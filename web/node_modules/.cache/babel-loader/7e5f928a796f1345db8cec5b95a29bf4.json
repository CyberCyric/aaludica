{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\srouco\\\\Downloads\\\\Personal\\\\htdocs\\\\aaludica.com.ar\\\\web\\\\src\\\\components\\\\AdmProductGrid.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport { useTable, usePagination } from \"react-table\";\nimport makeData from \"./makeData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Styles = styled.div`\n  padding: 1rem;\n\n  table {\n    border-spacing: 0;\n    border: 1px solid black;\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n\n      input {\n        font-size: 1rem;\n        padding: 0;\n        margin: 0;\n        border: 0;\n      }\n    }\n  }\n\n  .pagination {\n    padding: 0.5rem;\n  }\n`; // Create an editable cell renderer\n\n_c = Styles;\n\nconst EditableCell = ({\n  value: initialValue,\n  row: {\n    index\n  },\n  column: {\n    id\n  },\n  updateMyData // This is a custom function that we supplied to our table instance\n\n}) => {\n  _s();\n\n  // We need to keep and update the state of the cell normally\n  const [value, setValue] = React.useState(initialValue);\n\n  const onChange = e => {\n    setValue(e.target.value);\n  }; // We'll only update the external data when the input is blurred\n\n\n  const onBlur = () => {\n    updateMyData(index, id, value);\n  }; // If the initialValue is changed external, sync it up with our state\n\n\n  React.useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    value: value,\n    onChange: onChange,\n    onBlur: onBlur\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 10\n  }, this);\n}; // Set our editable cell renderer as the default Cell renderer\n\n\n_s(EditableCell, \"tWiMN+R1KrlPc+I/v9D+hnPBFtc=\");\n\n_c2 = EditableCell;\nconst defaultColumn = {\n  Cell: EditableCell\n};\n\nconst AdmProductGrid = () => {\n  var _s2 = $RefreshSig$(),\n      _s3 = $RefreshSig$();\n\n  // Be sure to pass our updateMyData and the skipPageReset option\n  function Table({\n    columns,\n    data,\n    updateMyData,\n    skipPageReset\n  }) {\n    _s2();\n\n    // For this example, we're using pagination to illustrate how to stop\n    // the current page from resetting when our data changes\n    // Otherwise, nothing is different here.\n    const {\n      getTableProps,\n      getTableBodyProps,\n      headerGroups,\n      prepareRow,\n      page,\n      canPreviousPage,\n      canNextPage,\n      pageOptions,\n      pageCount,\n      gotoPage,\n      nextPage,\n      previousPage,\n      setPageSize,\n      state: {\n        pageIndex,\n        pageSize\n      }\n    } = useTable({\n      columns,\n      data,\n      defaultColumn,\n      // use the skipPageReset option to disable page resetting temporarily\n      autoResetPage: !skipPageReset,\n      // updateMyData isn't part of the API, but\n      // anything we put into these options will\n      // automatically be available on the instance.\n      // That way we can call this function from our\n      // cell renderer!\n      updateMyData\n    }, usePagination); // Render the UI for your table\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n            children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n              children: column.render(\"Header\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n          children: page.map((row, i) => {\n            prepareRow(row);\n            return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n              children: row.cells.map(cell => {\n                return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                  children: cell.render(\"Cell\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => gotoPage(0),\n          disabled: !canPreviousPage,\n          children: \"<<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => previousPage(),\n          disabled: !canPreviousPage,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => nextPage(),\n          disabled: !canNextPage,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => gotoPage(pageCount - 1),\n          disabled: !canNextPage,\n          children: \">>\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Page\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [pageIndex + 1, \" of \", pageOptions.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"| Go to page:\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            defaultValue: pageIndex + 1,\n            onChange: e => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0;\n              gotoPage(page);\n            },\n            style: {\n              width: \"100px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: pageSize,\n          onChange: e => {\n            setPageSize(Number(e.target.value));\n          },\n          children: [10, 20, 30, 40, 50].map(pageSize => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: pageSize,\n            children: [\"Show \", pageSize]\n          }, pageSize, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n  _s2(Table, \"8qUgdwu8lmz3mzrso/5FwOOlJhc=\", false, function () {\n    return [useTable];\n  });\n\n  function App() {\n    _s3();\n\n    const columns = React.useMemo(() => [{\n      Header: \"Name\",\n      columns: [{\n        Header: \"First Name\",\n        accessor: \"firstName\"\n      }, {\n        Header: \"Last Name\",\n        accessor: \"lastName\"\n      }]\n    }, {\n      Header: \"Info\",\n      columns: [{\n        Header: \"Age\",\n        accessor: \"age\"\n      }, {\n        Header: \"Visits\",\n        accessor: \"visits\"\n      }, {\n        Header: \"Status\",\n        accessor: \"status\"\n      }, {\n        Header: \"Profile Progress\",\n        accessor: \"progress\"\n      }]\n    }], []);\n    const [data, setData] = React.useState(() => makeData(20));\n    const [originalData] = React.useState(data);\n    const [skipPageReset, setSkipPageReset] = React.useState(false); // We need to keep the table from resetting the pageIndex when we\n    // Update data. So we can keep track of that flag with a ref.\n    // When our cell renderer calls updateMyData, we'll use\n    // the rowIndex, columnId and new value to update the\n    // original data\n\n    const updateMyData = (rowIndex, columnId, value) => {\n      // We also turn on the flag to not reset the page\n      setSkipPageReset(true);\n      setData(old => old.map((row, index) => {\n        if (index === rowIndex) {\n          return { ...old[rowIndex],\n            [columnId]: value\n          };\n        }\n\n        return row;\n      }));\n    }; // After data chagnes, we turn the flag back off\n    // so that if data actually changes when we're not\n    // editing it, the page is reset\n\n\n    React.useEffect(() => {\n      setSkipPageReset(false);\n    }, [data]); // Let's add a data resetter/randomizer to help\n    // illustrate that flow...\n\n    const resetData = () => setData(originalData);\n\n    return /*#__PURE__*/_jsxDEV(Styles, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetData,\n        children: \"Reset Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        columns: columns,\n        data: data,\n        updateMyData: updateMyData,\n        skipPageReset: skipPageReset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this);\n  }\n\n  _s3(App, \"kltNrTaTk66MFCvqKDhOmuE/v0M=\");\n};\n\n_c3 = AdmProductGrid;\nexport default AdmProductGrid;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Styles\");\n$RefreshReg$(_c2, \"EditableCell\");\n$RefreshReg$(_c3, \"AdmProductGrid\");","map":{"version":3,"sources":["C:/Users/srouco/Downloads/Personal/htdocs/aaludica.com.ar/web/src/components/AdmProductGrid.js"],"names":["React","styled","useTable","usePagination","makeData","Styles","div","EditableCell","value","initialValue","row","index","column","id","updateMyData","setValue","useState","onChange","e","target","onBlur","useEffect","defaultColumn","Cell","AdmProductGrid","Table","columns","data","skipPageReset","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","autoResetPage","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","i","getRowProps","cells","cell","getCellProps","length","Number","width","App","useMemo","Header","accessor","setData","originalData","setSkipPageReset","rowIndex","columnId","old","resetData"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useTable, usePagination } from \"react-table\";\r\nimport makeData from \"./makeData\";\r\n\r\nconst Styles = styled.div`\r\n  padding: 1rem;\r\n\r\n  table {\r\n    border-spacing: 0;\r\n    border: 1px solid black;\r\n\r\n    tr {\r\n      :last-child {\r\n        td {\r\n          border-bottom: 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    th,\r\n    td {\r\n      margin: 0;\r\n      padding: 0.5rem;\r\n      border-bottom: 1px solid black;\r\n      border-right: 1px solid black;\r\n\r\n      :last-child {\r\n        border-right: 0;\r\n      }\r\n\r\n      input {\r\n        font-size: 1rem;\r\n        padding: 0;\r\n        margin: 0;\r\n        border: 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  .pagination {\r\n    padding: 0.5rem;\r\n  }\r\n`;\r\n\r\n// Create an editable cell renderer\r\nconst EditableCell = ({\r\n  value: initialValue,\r\n  row: { index },\r\n  column: { id },\r\n  updateMyData, // This is a custom function that we supplied to our table instance\r\n}) => {\r\n  // We need to keep and update the state of the cell normally\r\n  const [value, setValue] = React.useState(initialValue);\r\n\r\n  const onChange = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  // We'll only update the external data when the input is blurred\r\n  const onBlur = () => {\r\n    updateMyData(index, id, value);\r\n  };\r\n\r\n  // If the initialValue is changed external, sync it up with our state\r\n  React.useEffect(() => {\r\n    setValue(initialValue);\r\n  }, [initialValue]);\r\n\r\n  return <input value={value} onChange={onChange} onBlur={onBlur} />;\r\n};\r\n\r\n// Set our editable cell renderer as the default Cell renderer\r\nconst defaultColumn = {\r\n  Cell: EditableCell,\r\n};\r\n\r\nconst AdmProductGrid = () => {\r\n  // Be sure to pass our updateMyData and the skipPageReset option\r\n  function Table({ columns, data, updateMyData, skipPageReset }) {\r\n    // For this example, we're using pagination to illustrate how to stop\r\n    // the current page from resetting when our data changes\r\n    // Otherwise, nothing is different here.\r\n    const {\r\n      getTableProps,\r\n      getTableBodyProps,\r\n      headerGroups,\r\n      prepareRow,\r\n      page,\r\n      canPreviousPage,\r\n      canNextPage,\r\n      pageOptions,\r\n      pageCount,\r\n      gotoPage,\r\n      nextPage,\r\n      previousPage,\r\n      setPageSize,\r\n      state: { pageIndex, pageSize },\r\n    } = useTable(\r\n      {\r\n        columns,\r\n        data,\r\n        defaultColumn,\r\n        // use the skipPageReset option to disable page resetting temporarily\r\n        autoResetPage: !skipPageReset,\r\n        // updateMyData isn't part of the API, but\r\n        // anything we put into these options will\r\n        // automatically be available on the instance.\r\n        // That way we can call this function from our\r\n        // cell renderer!\r\n        updateMyData,\r\n      },\r\n      usePagination\r\n    );\r\n\r\n    // Render the UI for your table\r\n    return (\r\n      <>\r\n        <table {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.map((headerGroup) => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map((column) => (\r\n                  <th {...column.getHeaderProps()}>\r\n                    {column.render(\"Header\")}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {page.map((row, i) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map((cell) => {\r\n                    return (\r\n                      <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        <div className=\"pagination\">\r\n          <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n            {\"<<\"}\r\n          </button>{\" \"}\r\n          <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n            {\"<\"}\r\n          </button>{\" \"}\r\n          <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n            {\">\"}\r\n          </button>{\" \"}\r\n          <button\r\n            onClick={() => gotoPage(pageCount - 1)}\r\n            disabled={!canNextPage}\r\n          >\r\n            {\">>\"}\r\n          </button>{\" \"}\r\n          <span>\r\n            Page{\" \"}\r\n            <strong>\r\n              {pageIndex + 1} of {pageOptions.length}\r\n            </strong>{\" \"}\r\n          </span>\r\n          <span>\r\n            | Go to page:{\" \"}\r\n            <input\r\n              type=\"number\"\r\n              defaultValue={pageIndex + 1}\r\n              onChange={(e) => {\r\n                const page = e.target.value ? Number(e.target.value) - 1 : 0;\r\n                gotoPage(page);\r\n              }}\r\n              style={{ width: \"100px\" }}\r\n            />\r\n          </span>{\" \"}\r\n          <select\r\n            value={pageSize}\r\n            onChange={(e) => {\r\n              setPageSize(Number(e.target.value));\r\n            }}\r\n          >\r\n            {[10, 20, 30, 40, 50].map((pageSize) => (\r\n              <option key={pageSize} value={pageSize}>\r\n                Show {pageSize}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  function App() {\r\n    const columns = React.useMemo(\r\n      () => [\r\n        {\r\n          Header: \"Name\",\r\n          columns: [\r\n            {\r\n              Header: \"First Name\",\r\n              accessor: \"firstName\",\r\n            },\r\n            {\r\n              Header: \"Last Name\",\r\n              accessor: \"lastName\",\r\n            },\r\n          ],\r\n        },\r\n        {\r\n          Header: \"Info\",\r\n          columns: [\r\n            {\r\n              Header: \"Age\",\r\n              accessor: \"age\",\r\n            },\r\n            {\r\n              Header: \"Visits\",\r\n              accessor: \"visits\",\r\n            },\r\n            {\r\n              Header: \"Status\",\r\n              accessor: \"status\",\r\n            },\r\n            {\r\n              Header: \"Profile Progress\",\r\n              accessor: \"progress\",\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n      []\r\n    );\r\n\r\n    const [data, setData] = React.useState(() => makeData(20));\r\n    const [originalData] = React.useState(data);\r\n    const [skipPageReset, setSkipPageReset] = React.useState(false);\r\n\r\n    // We need to keep the table from resetting the pageIndex when we\r\n    // Update data. So we can keep track of that flag with a ref.\r\n\r\n    // When our cell renderer calls updateMyData, we'll use\r\n    // the rowIndex, columnId and new value to update the\r\n    // original data\r\n    const updateMyData = (rowIndex, columnId, value) => {\r\n      // We also turn on the flag to not reset the page\r\n      setSkipPageReset(true);\r\n      setData((old) =>\r\n        old.map((row, index) => {\r\n          if (index === rowIndex) {\r\n            return {\r\n              ...old[rowIndex],\r\n              [columnId]: value,\r\n            };\r\n          }\r\n          return row;\r\n        })\r\n      );\r\n    };\r\n\r\n    // After data chagnes, we turn the flag back off\r\n    // so that if data actually changes when we're not\r\n    // editing it, the page is reset\r\n    React.useEffect(() => {\r\n      setSkipPageReset(false);\r\n    }, [data]);\r\n\r\n    // Let's add a data resetter/randomizer to help\r\n    // illustrate that flow...\r\n    const resetData = () => setData(originalData);\r\n\r\n    return (\r\n      <Styles>\r\n        <button onClick={resetData}>Reset Data</button>\r\n        <Table\r\n          columns={columns}\r\n          data={data}\r\n          updateMyData={updateMyData}\r\n          skipPageReset={skipPageReset}\r\n        />\r\n      </Styles>\r\n    );\r\n  }\r\n};\r\nexport default AdmProductGrid;\r\n"]},"metadata":{},"sourceType":"module"}