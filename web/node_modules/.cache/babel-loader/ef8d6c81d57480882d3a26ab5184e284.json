{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\srouco\\\\Downloads\\\\Personal\\\\htdocs\\\\aaludica.com.ar\\\\web\\\\src\\\\pages\\\\AdmProducts.js\";\nimport React from \"react\";\nimport AdmProductGrid from \"../components/AdmProductGrid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PageAdmProducts = () => {\n  // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n  const updateMyData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true);\n    setData(old => old.map((row, index) => {\n      if (index === rowIndex) {\n        return { ...old[rowIndex],\n          [columnId]: value\n        };\n      }\n\n      return row;\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    id: \"CatalogPage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-lg-12 col-md-12\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-title\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Administrar Productos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(AdmProductGrid, {\n        columns: columns,\n        data: data,\n        updateMyData: updateMyData,\n        skipPageReset: skipPageReset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_c = PageAdmProducts;\nexport default PageAdmProducts;\n\nvar _c;\n\n$RefreshReg$(_c, \"PageAdmProducts\");","map":{"version":3,"sources":["C:/Users/srouco/Downloads/Personal/htdocs/aaludica.com.ar/web/src/pages/AdmProducts.js"],"names":["React","AdmProductGrid","PageAdmProducts","updateMyData","rowIndex","columnId","value","setSkipPageReset","setData","old","map","row","index","columns","data","skipPageReset"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAC5B;AACA;AAEA;AACA;AACA;AACA,QAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,QAAX,EAAqBC,KAArB,KAA+B;AAClD;AACAC,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAC,IAAAA,OAAO,CAAEC,GAAD,IACNA,GAAG,CAACC,GAAJ,CAAQ,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACtB,UAAIA,KAAK,KAAKR,QAAd,EAAwB;AACtB,eAAO,EACL,GAAGK,GAAG,CAACL,QAAD,CADD;AAEL,WAACC,QAAD,GAAYC;AAFP,SAAP;AAID;;AACD,aAAOK,GAAP;AACD,KARD,CADK,CAAP;AAWD,GAdD;;AAgBA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAA2B,IAAA,EAAE,EAAC,aAA9B;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,eAAf;AAAA,iCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAQE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACE,QAAC,cAAD;AACE,QAAA,OAAO,EAAEE,OADX;AAEE,QAAA,IAAI,EAAEC,IAFR;AAGE,QAAA,YAAY,EAAEX,YAHhB;AAIE,QAAA,aAAa,EAAEY;AAJjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CA1CD;;KAAMb,e;AA4CN,eAAeA,eAAf","sourcesContent":["import React from \"react\";\r\nimport AdmProductGrid from \"../components/AdmProductGrid\";\r\n\r\nconst PageAdmProducts = () => {\r\n  // We need to keep the table from resetting the pageIndex when we\r\n  // Update data. So we can keep track of that flag with a ref.\r\n\r\n  // When our cell renderer calls updateMyData, we'll use\r\n  // the rowIndex, columnId and new value to update the\r\n  // original data\r\n  const updateMyData = (rowIndex, columnId, value) => {\r\n    // We also turn on the flag to not reset the page\r\n    setSkipPageReset(true);\r\n    setData((old) =>\r\n      old.map((row, index) => {\r\n        if (index === rowIndex) {\r\n          return {\r\n            ...old[rowIndex],\r\n            [columnId]: value,\r\n          };\r\n        }\r\n        return row;\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\" id=\"CatalogPage\">\r\n      <div className=\"row\">\r\n        <div className=\"col-lg-12 col-md-12\">\r\n          <div className=\"section-title\">\r\n            <h4>Administrar Productos</h4>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <AdmProductGrid\r\n          columns={columns}\r\n          data={data}\r\n          updateMyData={updateMyData}\r\n          skipPageReset={skipPageReset}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageAdmProducts;\r\n"]},"metadata":{},"sourceType":"module"}