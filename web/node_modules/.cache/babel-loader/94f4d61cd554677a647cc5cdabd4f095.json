{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\srouco\\\\Downloads\\\\Personal\\\\htdocs\\\\aaludica.com.ar\\\\web\\\\src\\\\pages\\\\AdmProducts.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport AdmProductGrid from \"../components/AdmProductGrid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PageAdmProducts = () => {\n  _s();\n\n  const Styles = styled.div`\n    padding: 1rem;\n\n    table {\n      border-spacing: 0;\n      border: 1px solid black;\n\n      tr {\n        :last-child {\n          td {\n            border-bottom: 0;\n          }\n        }\n      }\n\n      th,\n      td {\n        margin: 0;\n        padding: 0.5rem;\n        border-bottom: 1px solid black;\n        border-right: 1px solid black;\n\n        :last-child {\n          border-right: 0;\n        }\n\n        input {\n          font-size: 1rem;\n          padding: 0;\n          margin: 0;\n          border: 0;\n        }\n      }\n    }\n\n    .pagination {\n      padding: 0.5rem;\n    }\n  `;\n  const columns = React.useMemo(() => [{\n    Header: \"Name\",\n    columns: [{\n      Header: \"First Name\",\n      accessor: \"firstName\"\n    }, {\n      Header: \"Last Name\",\n      accessor: \"lastName\"\n    }]\n  }, {\n    Header: \"Info\",\n    columns: [{\n      Header: \"Age\",\n      accessor: \"age\"\n    }, {\n      Header: \"Visits\",\n      accessor: \"visits\"\n    }, {\n      Header: \"Status\",\n      accessor: \"status\"\n    }, {\n      Header: \"Profile Progress\",\n      accessor: \"progress\"\n    }]\n  }], []); // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n\n  const updateMyData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true);\n    setData(old => old.map((row, index) => {\n      if (index === rowIndex) {\n        return { ...old[rowIndex],\n          [columnId]: value\n        };\n      }\n\n      return row;\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    id: \"CatalogPage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-lg-12 col-md-12\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-title\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Administrar Productos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(Styles, {\n        children: /*#__PURE__*/_jsxDEV(AdmProductGrid, {\n          columns: columns,\n          data: data,\n          updateMyData: updateMyData,\n          skipPageReset: skipPageReset\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PageAdmProducts, \"erkfbBpUuAY09jdvhSOqc0XsEHQ=\");\n\n_c = PageAdmProducts;\nexport default PageAdmProducts;\n\nvar _c;\n\n$RefreshReg$(_c, \"PageAdmProducts\");","map":{"version":3,"sources":["C:/Users/srouco/Downloads/Personal/htdocs/aaludica.com.ar/web/src/pages/AdmProducts.js"],"names":["React","styled","AdmProductGrid","PageAdmProducts","Styles","div","columns","useMemo","Header","accessor","updateMyData","rowIndex","columnId","value","setSkipPageReset","setData","old","map","row","index","data","skipPageReset"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAC5B,QAAMC,MAAM,GAAGH,MAAM,CAACI,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAtCE;AAwCA,QAAMC,OAAO,GAAGN,KAAK,CAACO,OAAN,CACd,MAAM,CACJ;AACEC,IAAAA,MAAM,EAAE,MADV;AAEEF,IAAAA,OAAO,EAAE,CACP;AACEE,MAAAA,MAAM,EAAE,YADV;AAEEC,MAAAA,QAAQ,EAAE;AAFZ,KADO,EAKP;AACED,MAAAA,MAAM,EAAE,WADV;AAEEC,MAAAA,QAAQ,EAAE;AAFZ,KALO;AAFX,GADI,EAcJ;AACED,IAAAA,MAAM,EAAE,MADV;AAEEF,IAAAA,OAAO,EAAE,CACP;AACEE,MAAAA,MAAM,EAAE,KADV;AAEEC,MAAAA,QAAQ,EAAE;AAFZ,KADO,EAKP;AACED,MAAAA,MAAM,EAAE,QADV;AAEEC,MAAAA,QAAQ,EAAE;AAFZ,KALO,EASP;AACED,MAAAA,MAAM,EAAE,QADV;AAEEC,MAAAA,QAAQ,EAAE;AAFZ,KATO,EAaP;AACED,MAAAA,MAAM,EAAE,kBADV;AAEEC,MAAAA,QAAQ,EAAE;AAFZ,KAbO;AAFX,GAdI,CADQ,EAqCd,EArCc,CAAhB,CAzC4B,CAgF5B;AACA;AAEA;AACA;AACA;;AACA,QAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,QAAX,EAAqBC,KAArB,KAA+B;AAClD;AACAC,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAC,IAAAA,OAAO,CAAEC,GAAD,IACNA,GAAG,CAACC,GAAJ,CAAQ,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACtB,UAAIA,KAAK,KAAKR,QAAd,EAAwB;AACtB,eAAO,EACL,GAAGK,GAAG,CAACL,QAAD,CADD;AAEL,WAACC,QAAD,GAAYC;AAFP,SAAP;AAID;;AACD,aAAOK,GAAP;AACD,KARD,CADK,CAAP;AAWD,GAdD;;AAgBA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAA2B,IAAA,EAAE,EAAC,aAA9B;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,eAAf;AAAA,iCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAQE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACE,QAAC,MAAD;AAAA,+BACE,QAAC,cAAD;AACE,UAAA,OAAO,EAAEZ,OADX;AAEE,UAAA,IAAI,EAAEc,IAFR;AAGE,UAAA,YAAY,EAAEV,YAHhB;AAIE,UAAA,aAAa,EAAEW;AAJjB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CA3HD;;GAAMlB,e;;KAAAA,e;AA6HN,eAAeA,eAAf","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport AdmProductGrid from \"../components/AdmProductGrid\";\r\n\r\nconst PageAdmProducts = () => {\r\n  const Styles = styled.div`\r\n    padding: 1rem;\r\n\r\n    table {\r\n      border-spacing: 0;\r\n      border: 1px solid black;\r\n\r\n      tr {\r\n        :last-child {\r\n          td {\r\n            border-bottom: 0;\r\n          }\r\n        }\r\n      }\r\n\r\n      th,\r\n      td {\r\n        margin: 0;\r\n        padding: 0.5rem;\r\n        border-bottom: 1px solid black;\r\n        border-right: 1px solid black;\r\n\r\n        :last-child {\r\n          border-right: 0;\r\n        }\r\n\r\n        input {\r\n          font-size: 1rem;\r\n          padding: 0;\r\n          margin: 0;\r\n          border: 0;\r\n        }\r\n      }\r\n    }\r\n\r\n    .pagination {\r\n      padding: 0.5rem;\r\n    }\r\n  `;\r\n\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: \"Name\",\r\n        columns: [\r\n          {\r\n            Header: \"First Name\",\r\n            accessor: \"firstName\",\r\n          },\r\n          {\r\n            Header: \"Last Name\",\r\n            accessor: \"lastName\",\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        Header: \"Info\",\r\n        columns: [\r\n          {\r\n            Header: \"Age\",\r\n            accessor: \"age\",\r\n          },\r\n          {\r\n            Header: \"Visits\",\r\n            accessor: \"visits\",\r\n          },\r\n          {\r\n            Header: \"Status\",\r\n            accessor: \"status\",\r\n          },\r\n          {\r\n            Header: \"Profile Progress\",\r\n            accessor: \"progress\",\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n    []\r\n  );\r\n  // We need to keep the table from resetting the pageIndex when we\r\n  // Update data. So we can keep track of that flag with a ref.\r\n\r\n  // When our cell renderer calls updateMyData, we'll use\r\n  // the rowIndex, columnId and new value to update the\r\n  // original data\r\n  const updateMyData = (rowIndex, columnId, value) => {\r\n    // We also turn on the flag to not reset the page\r\n    setSkipPageReset(true);\r\n    setData((old) =>\r\n      old.map((row, index) => {\r\n        if (index === rowIndex) {\r\n          return {\r\n            ...old[rowIndex],\r\n            [columnId]: value,\r\n          };\r\n        }\r\n        return row;\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\" id=\"CatalogPage\">\r\n      <div className=\"row\">\r\n        <div className=\"col-lg-12 col-md-12\">\r\n          <div className=\"section-title\">\r\n            <h4>Administrar Productos</h4>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <Styles>\r\n          <AdmProductGrid\r\n            columns={columns}\r\n            data={data}\r\n            updateMyData={updateMyData}\r\n            skipPageReset={skipPageReset}\r\n          />\r\n        </Styles>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageAdmProducts;\r\n"]},"metadata":{},"sourceType":"module"}