{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\srouco\\\\Downloads\\\\Personal\\\\htdocs\\\\aaludica.com.ar\\\\web\\\\src\\\\pages\\\\AdmProducts.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useTable } from \"react-table\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PageAdmProducts = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  // Create an editable cell renderer\n  const EditableCell = ({\n    value: initialValue,\n    row: {\n      index\n    },\n    column: {\n      id\n    },\n    updateMyData // This is a custom function that we supplied to our table instance\n\n  }) => {\n    _s();\n\n    // We need to keep and update the state of the cell normally\n    const [value, setValue] = React.useState(initialValue);\n\n    const onChange = e => {\n      setValue(e.target.value);\n    }; // We'll only update the external data when the input is blurred\n\n\n    const onBlur = () => {\n      updateMyData(index, id, value);\n    }; // If the initialValue is changed external, sync it up with our state\n\n\n    React.useEffect(() => {\n      setValue(initialValue);\n    }, [initialValue]);\n    return /*#__PURE__*/_jsxDEV(\"input\", {\n      value: value,\n      onChange: onChange,\n      onBlur: onBlur\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 12\n    }, this);\n  };\n\n  _s(EditableCell, \"tWiMN+R1KrlPc+I/v9D+hnPBFtc=\");\n\n  const columns = React.useMemo(() => [{\n    Header: \"Producto\",\n    accessor: \"col1\"\n  }, {\n    Header: \"Precio (min)\",\n    accessor: \"col2\"\n  }, {\n    Header: \"Activo\",\n    accessor: \"col3\"\n  }], []);\n  const data = React.useMemo(() => [{\n    col1: \"Hello\",\n    col2: \"World\"\n  }, {\n    col1: \"react-table\",\n    col2: \"rocks\"\n  }, {\n    col1: \"whatever\",\n    col2: \"you want\"\n  }], []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow\n  } = useTable({\n    columns,\n    data\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    id: \"CatalogPage\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-lg-12 col-md-12\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-title\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Administrar Productos\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n        style: {\n          border: \"solid 1px black\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n            children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n              style: {\n                borderBottom: \"solid 3px black\",\n                background: \"lightgray\",\n                color: \"black\",\n                fontWeight: \"bold\"\n              },\n              children: column.render(\"Header\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n          children: rows.map(row => {\n            prepareRow(row);\n            return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n              children: row.cells.map(cell => {\n                return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                  style: {\n                    padding: \"10px\",\n                    border: \"solid 1px gray\",\n                    background: \"white\"\n                  },\n                  children: cell.render(\"Cell\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(PageAdmProducts, \"gPl1YPwY6+oTvDxq6Sq+kRo5FpM=\", false, function () {\n  return [useTable];\n});\n\n_c = PageAdmProducts;\nexport default PageAdmProducts;\n\nvar _c;\n\n$RefreshReg$(_c, \"PageAdmProducts\");","map":{"version":3,"sources":["C:/Users/srouco/Downloads/Personal/htdocs/aaludica.com.ar/web/src/pages/AdmProducts.js"],"names":["React","useEffect","useState","useTable","PageAdmProducts","EditableCell","value","initialValue","row","index","column","id","updateMyData","setValue","onChange","e","target","onBlur","columns","useMemo","Header","accessor","data","col1","col2","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","border","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","borderBottom","background","color","fontWeight","render","getRowProps","cells","cell","getCellProps","padding"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useTable } from \"react-table\";\r\n\r\nconst PageAdmProducts = () => {\r\n  // Create an editable cell renderer\r\n  const EditableCell = ({\r\n    value: initialValue,\r\n    row: { index },\r\n    column: { id },\r\n    updateMyData, // This is a custom function that we supplied to our table instance\r\n  }) => {\r\n    // We need to keep and update the state of the cell normally\r\n    const [value, setValue] = React.useState(initialValue);\r\n\r\n    const onChange = (e) => {\r\n      setValue(e.target.value);\r\n    };\r\n\r\n    // We'll only update the external data when the input is blurred\r\n    const onBlur = () => {\r\n      updateMyData(index, id, value);\r\n    };\r\n\r\n    // If the initialValue is changed external, sync it up with our state\r\n    React.useEffect(() => {\r\n      setValue(initialValue);\r\n    }, [initialValue]);\r\n\r\n    return <input value={value} onChange={onChange} onBlur={onBlur} />;\r\n  };\r\n\r\n  const columns = React.useMemo(\r\n    () => [\r\n      {\r\n        Header: \"Producto\",\r\n        accessor: \"col1\",\r\n      },\r\n      {\r\n        Header: \"Precio (min)\",\r\n        accessor: \"col2\",\r\n      },\r\n      {\r\n        Header: \"Activo\",\r\n        accessor: \"col3\",\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const data = React.useMemo(\r\n    () => [\r\n      {\r\n        col1: \"Hello\",\r\n        col2: \"World\",\r\n      },\r\n      {\r\n        col1: \"react-table\",\r\n        col2: \"rocks\",\r\n      },\r\n      {\r\n        col1: \"whatever\",\r\n        col2: \"you want\",\r\n      },\r\n    ],\r\n    []\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({ columns, data });\r\n\r\n  return (\r\n    <div className=\"container\" id=\"CatalogPage\">\r\n      <div className=\"row\">\r\n        <div className=\"col-lg-12 col-md-12\">\r\n          <div className=\"section-title\">\r\n            <h4>Administrar Productos</h4>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <table {...getTableProps()} style={{ border: \"solid 1px black\" }}>\r\n          <thead>\r\n            {headerGroups.map((headerGroup) => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map((column) => (\r\n                  <th\r\n                    {...column.getHeaderProps()}\r\n                    style={{\r\n                      borderBottom: \"solid 3px black\",\r\n                      background: \"lightgray\",\r\n                      color: \"black\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                  >\r\n                    {column.render(\"Header\")}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {rows.map((row) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map((cell) => {\r\n                    return (\r\n                      <td\r\n                        {...cell.getCellProps()}\r\n                        style={{\r\n                          padding: \"10px\",\r\n                          border: \"solid 1px gray\",\r\n                          background: \"white\",\r\n                        }}\r\n                      >\r\n                        {cell.render(\"Cell\")}\r\n                      </td>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageAdmProducts;\r\n"]},"metadata":{},"sourceType":"module"}