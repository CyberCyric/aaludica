{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\srouco\\\\Downloads\\\\Personal\\\\htdocs\\\\aaludica.com.ar\\\\web\\\\src\\\\components\\\\AdmProductGrid.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\nimport { useTable, usePagination } from \"react-table\";\n/****** Editable Cell Component *****/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst EditableCell = ({\n  value: initialValue,\n  row: {\n    index\n  },\n  column: {\n    id\n  },\n  updateMyData // This is a custom function that we supplied to our table instance\n\n}) => {\n  _s();\n\n  // We need to keep and update the state of the cell normally\n  const [value, setValue] = React.useState(initialValue);\n\n  const onChange = e => {\n    setValue(e.target.value);\n  }; // We'll only update the external data when the input is blurred\n\n\n  const onBlur = () => {\n    updateMyData(index, id, value);\n  }; // If the initialValue is changed external, sync it up with our state\n\n\n  React.useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    value: value,\n    onChange: onChange,\n    onBlur: onBlur\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 10\n  }, this);\n};\n\n_s(EditableCell, \"tWiMN+R1KrlPc+I/v9D+hnPBFtc=\");\n\n_c = EditableCell;\nconst defaultColumn = {\n  Cell: EditableCell\n};\n/**********/\n\nconst AdmProductGrid = ({\n  columns,\n  data,\n  updateMyData,\n  skipPageReset\n}) => {\n  _s2();\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: {\n      pageIndex,\n      pageSize\n    }\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    autoResetPage: !skipPageReset,\n    updateMyData\n  }, usePagination); // Render the UI for your table\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n            children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n              children: column.render(\"Header\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n          children: page.map((row, i) => {\n            prepareRow(row);\n            return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n              children: row.cells.map(cell => {\n                return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                  children: cell.render(\"Cell\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => gotoPage(0),\n          disabled: !canPreviousPage,\n          children: \"<<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => previousPage(),\n          disabled: !canPreviousPage,\n          children: \"<\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => nextPage(),\n          disabled: !canNextPage,\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => gotoPage(pageCount - 1),\n          disabled: !canNextPage,\n          children: \">>\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"Page\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [pageIndex + 1, \" of \", pageOptions.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"| Go to page:\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            defaultValue: pageIndex + 1,\n            onChange: e => {\n              const page = e.target.value ? Number(e.target.value) - 1 : 0;\n              gotoPage(page);\n            },\n            style: {\n              width: \"100px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: pageSize,\n          onChange: e => {\n            setPageSize(Number(e.target.value));\n          },\n          children: [10, 20, 30, 40, 50].map(pageSize => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: pageSize,\n            children: [\"Show \", pageSize]\n          }, pageSize, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s2(AdmProductGrid, \"TwIyn9tIhjwsiwoD1PKokW899BQ=\", false, function () {\n  return [useTable];\n});\n\n_c2 = AdmProductGrid;\nexport default AdmProductGrid;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"EditableCell\");\n$RefreshReg$(_c2, \"AdmProductGrid\");","map":{"version":3,"sources":["C:/Users/srouco/Downloads/Personal/htdocs/aaludica.com.ar/web/src/components/AdmProductGrid.js"],"names":["React","useTable","usePagination","EditableCell","value","initialValue","row","index","column","id","updateMyData","setValue","useState","onChange","e","target","onBlur","useEffect","defaultColumn","Cell","AdmProductGrid","columns","data","skipPageReset","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","pageIndex","pageSize","autoResetPage","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","i","getRowProps","cells","cell","getCellProps","length","Number","width"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { useTable, usePagination } from \"react-table\";\r\n\r\n/****** Editable Cell Component *****/\r\nconst EditableCell = ({\r\n  value: initialValue,\r\n  row: { index },\r\n  column: { id },\r\n  updateMyData, // This is a custom function that we supplied to our table instance\r\n}) => {\r\n  // We need to keep and update the state of the cell normally\r\n  const [value, setValue] = React.useState(initialValue);\r\n\r\n  const onChange = (e) => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  // We'll only update the external data when the input is blurred\r\n  const onBlur = () => {\r\n    updateMyData(index, id, value);\r\n  };\r\n\r\n  // If the initialValue is changed external, sync it up with our state\r\n  React.useEffect(() => {\r\n    setValue(initialValue);\r\n  }, [initialValue]);\r\n\r\n  return <input value={value} onChange={onChange} onBlur={onBlur} />;\r\n};\r\nconst defaultColumn = {\r\n  Cell: EditableCell,\r\n};\r\n/**********/\r\n\r\nconst AdmProductGrid = ({ columns, data, updateMyData, skipPageReset }) => {\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    prepareRow,\r\n    page,\r\n    canPreviousPage,\r\n    canNextPage,\r\n    pageOptions,\r\n    pageCount,\r\n    gotoPage,\r\n    nextPage,\r\n    previousPage,\r\n    setPageSize,\r\n    state: { pageIndex, pageSize },\r\n  } = useTable(\r\n    {\r\n      columns,\r\n      data,\r\n      defaultColumn,\r\n      autoResetPage: !skipPageReset,\r\n      updateMyData,\r\n    },\r\n    usePagination\r\n  );\r\n  // Render the UI for your table\r\n  return (\r\n    <>\r\n      <div class=\"grid\">\r\n        <table {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.map((headerGroup) => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map((column) => (\r\n                  <th {...column.getHeaderProps()}>\r\n                    {column.render(\"Header\")}\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {page.map((row, i) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map((cell) => {\r\n                    return (\r\n                      <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        <div className=\"pagination\">\r\n          <button onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\r\n            {\"<<\"}\r\n          </button>{\" \"}\r\n          <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n            {\"<\"}\r\n          </button>{\" \"}\r\n          <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n            {\">\"}\r\n          </button>{\" \"}\r\n          <button\r\n            onClick={() => gotoPage(pageCount - 1)}\r\n            disabled={!canNextPage}\r\n          >\r\n            {\">>\"}\r\n          </button>{\" \"}\r\n          <span>\r\n            Page{\" \"}\r\n            <strong>\r\n              {pageIndex + 1} of {pageOptions.length}\r\n            </strong>{\" \"}\r\n          </span>\r\n          <span>\r\n            | Go to page:{\" \"}\r\n            <input\r\n              type=\"number\"\r\n              defaultValue={pageIndex + 1}\r\n              onChange={(e) => {\r\n                const page = e.target.value ? Number(e.target.value) - 1 : 0;\r\n                gotoPage(page);\r\n              }}\r\n              style={{ width: \"100px\" }}\r\n            />\r\n          </span>{\" \"}\r\n          <select\r\n            value={pageSize}\r\n            onChange={(e) => {\r\n              setPageSize(Number(e.target.value));\r\n            }}\r\n          >\r\n            {[10, 20, 30, 40, 50].map((pageSize) => (\r\n              <option key={pageSize} value={pageSize}>\r\n                Show {pageSize}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AdmProductGrid;\r\n"]},"metadata":{},"sourceType":"module"}