{"version":3,"file":"bundle.cjs","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/style/cell.ts","../src/style/core.ts","../src/style/grouprow.ts","../src/style/header.ts","../src/style/row.ts","../src/hooks/useFocusRef.ts","../src/formatters/SelectCellFormatter.tsx","../src/formatters/ValueFormatter.tsx","../src/formatters/ToggleGroupFormatter.tsx","../src/utils/colSpanUtils.ts","../src/utils/domUtils.ts","../src/utils/keyboardUtils.ts","../src/utils/selectedCellUtils.ts","../src/utils/index.ts","../src/Columns.tsx","../src/hooks/useCalculatedColumns.ts","../src/hooks/useCombinedRefs.ts","../src/hooks/useGridDimensions.ts","../src/hooks/useLatestFunc.ts","../src/hooks/useRovingRef.ts","../src/hooks/useRowSelection.ts","../src/hooks/useViewportColumns.ts","../src/hooks/useViewportRows.ts","../src/headerCells/SortableHeaderCell.tsx","../src/HeaderCell.tsx","../src/HeaderRow.tsx","../src/Cell.tsx","../src/Row.tsx","../src/GroupCell.tsx","../src/GroupRow.tsx","../src/SummaryCell.tsx","../src/SummaryRow.tsx","../src/EditCell.tsx","../src/DragHandle.tsx","../src/DataGrid.tsx","../src/editors/TextEditor.tsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  contain: strict;\n  contain: size layout style paint;\n  padding: 0 8px;\n  border-right: 1px solid var(--border-color);\n  border-bottom: 1px solid var(--border-color);\n  background-color: inherit;\n\n  white-space: nowrap;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n  outline: none;\n\n  &[aria-selected='true'] {\n    box-shadow: inset 0 0 0 2px var(--selection-color);\n  }\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nconst cellFrozen = css`\n  position: sticky;\n  // Should have a higher value than 0 to show up above unfrozen cells\n  z-index: 1;\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  box-shadow: 2px 0 5px -2px rgba(136, 136, 136, 0.3);\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n","import { css } from '@linaria/core';\nimport { row } from './row';\n\nconst lightTheme = `\n  --color: #000;\n  --border-color: #ddd;\n  --summary-border-color: #aaa;\n  --background-color: hsl(0deg 0% 100%);\n  --header-background-color: hsl(0deg 0% 97.5%);\n  --row-hover-background-color: hsl(0deg 0% 96%);\n  --row-selected-background-color: hsl(207deg 76% 92%);\n  --row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --checkbox-color: hsl(207deg 100% 29%);\n  --checkbox-focus-color: hsl(207deg 100% 69%);\n  --checkbox-disabled-border-color: #ccc;\n  --checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --color: #ddd;\n  --border-color: #444;\n  --summary-border-color: #555;\n  --background-color: hsl(0deg 0% 13%);\n  --header-background-color: hsl(0deg 0% 10.5%);\n  --row-hover-background-color: hsl(0deg 0% 9%);\n  --row-selected-background-color: hsl(207deg 76% 42%);\n  --row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --checkbox-color: hsl(207deg 100% 79%);\n  --checkbox-focus-color: hsl(207deg 100% 89%);\n  --checkbox-disabled-border-color: #000;\n  --checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  ${lightTheme}\n  --selection-color: #66afe9;\n  --font-size: 14px;\n\n  color-scheme: var(--color-scheme, light dark);\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\n  // We set a stacking context so internal elements don't render on top of external components.\n  contain: strict;\n  contain: size layout style paint;\n  content-visibility: auto;\n  height: 350px;\n  border: 1px solid var(--border-color);\n  box-sizing: border-box;\n  overflow: auto;\n  user-select: none;\n  background-color: var(--background-color);\n  color: var(--color);\n  font-size: var(--font-size);\n\n  // set stacking context in safari\n  @supports not (contain: strict) {\n    position: relative;\n    z-index: 0;\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: inherit;\n  }\n\n  &.rdg-dark {\n    --color-scheme: dark;\n    ${darkTheme}\n  }\n\n  &.rdg-light {\n    --color-scheme: light;\n  }\n\n  @media (prefers-color-scheme: dark) {\n    &:not(.rdg-light) {\n      ${darkTheme}\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst focusSink = css`\n  position: sticky;\n  top: 0;\n  left: 0;\n  height: 0;\n  width: 0;\n  outline: 0;\n`;\n\nexport const focusSinkClassname = `rdg-focus-sink ${focusSink}`;\n\nconst viewportDragging = css`\n  &.${row} {\n    cursor: move;\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n","import { css } from '@linaria/core';\nimport { cell, cellFrozenLast } from './cell';\n\nconst groupRow = css`\n  &:not([aria-selected='true']) {\n    background-color: var(--header-background-color);\n  }\n\n  > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n    border-right: none;\n  }\n`;\n\nexport const groupRowClassname = `rdg-group-row ${groupRow}`;\n\nconst groupRowSelected = css`\n  outline: none;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    box-shadow: inset 0 0 0 2px var(--selection-color);\n    pointer-events: none;\n    z-index: 2;\n  }\n\n  > .${cell}:first-child {\n    // preserve left border on the first frozen cell after scrolling to the right\n    box-shadow: inset 2px 0 0 0 var(--selection-color);\n  }\n`;\n\n// TODO: rename class\nexport const groupRowSelectedClassname = `rdg-group-row-selected ${groupRowSelected}`;\n","import { css } from '@linaria/core';\n\nconst headerRow = css`\n  contain: strict;\n  contain: size layout style paint;\n  display: grid;\n  grid-template-columns: var(--template-columns);\n  grid-template-rows: var(--header-row-height);\n  height: var(--header-row-height); // needed on Firefox\n  line-height: var(--header-row-height);\n  width: var(--row-width);\n  position: sticky;\n  top: 0;\n  background-color: var(--header-background-color);\n  font-weight: bold;\n  z-index: 3;\n  touch-action: none;\n`;\n\nexport const headerRowClassname = `rdg-header-row ${headerRow}`;\n","import { css } from '@linaria/core';\nimport { cell } from './cell';\n\nexport const row = css`\n  contain: strict;\n  contain: size layout style paint;\n  display: grid;\n  grid-template-rows: var(--row-height);\n  grid-template-columns: var(--template-columns);\n  position: absolute;\n  left: 0;\n  width: var(--row-width);\n  height: var(--row-height); // needed on Firefox\n  line-height: var(--row-height);\n  background-color: var(--background-color);\n\n  &:hover {\n    background-color: var(--row-hover-background-color);\n  }\n\n  &[aria-selected='true'] {\n    background-color: var(--row-selected-background-color);\n\n    &:hover {\n      background-color: var(--row-selected-hover-background-color);\n    }\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nconst summaryRow = css`\n  position: sticky;\n  z-index: 3;\n  grid-template-rows: var(--summary-row-height);\n  height: var(--summary-row-height); // needed on Firefox\n  line-height: var(--summary-row-height);\n\n  > .${cell} {\n    border-top: 2px solid var(--summary-border-color);\n  }\n`;\n\nexport const summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n","import { useRef, useLayoutEffect } from 'react';\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isSelected: boolean) {\n  const ref = useRef<T>(null);\n  useLayoutEffect(() => {\n    if (!isSelected) return;\n    ref.current?.focus({ preventScroll: true });\n  }, [isSelected]);\n\n  return {\n    ref,\n    tabIndex: isSelected ? 0 : -1\n  };\n}\n","import clsx from 'clsx';\nimport { css } from '@linaria/core';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst checkboxLabel = css`\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  margin-right: 1px; // align checkbox in row group cell\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  all: unset;\n  width: 0;\n  margin: 0;\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  content: '';\n  width: 20px;\n  height: 20px;\n  border: 2px solid var(--border-color);\n  background-color: var(--background-color);\n\n  .${checkboxInput}:checked + & {\n    background-color: var(--checkbox-color);\n    box-shadow: inset 0px 0px 0px 4px var(--background-color);\n  }\n\n  .${checkboxInput}:focus + & {\n    border-color: var(--checkbox-focus-color);\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  cursor: default;\n\n  .${checkbox} {\n    border-color: var(--checkbox-disabled-border-color);\n    background-color: var(--checkbox-disabled-background-color);\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\ntype SharedInputProps = Pick<\n  React.InputHTMLAttributes<HTMLInputElement>,\n  'disabled' | 'tabIndex' | 'onClick' | 'aria-label' | 'aria-labelledby'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  isCellSelected: boolean;\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  isCellSelected,\n  disabled,\n  onClick,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const { ref, tabIndex } = useFocusRef<HTMLInputElement>(isCellSelected);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label className={clsx(checkboxLabelClassname, { [checkboxLabelDisabledClassname]: disabled })}>\n      <input\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        ref={ref}\n        type=\"checkbox\"\n        tabIndex={tabIndex}\n        className={checkboxInputClassname}\n        disabled={disabled}\n        checked={value}\n        onChange={handleChange}\n        onClick={onClick}\n      />\n      <div className={checkboxClassname} />\n    </label>\n  );\n}\n","import type { FormatterProps } from '../types';\n\nexport function ValueFormatter<R, SR>(props: FormatterProps<R, SR>) {\n  try {\n    return <>{props.row[props.column.key as keyof R]}</>;\n  } catch {\n    return null;\n  }\n}\n","import { css } from '@linaria/core';\nimport type { GroupFormatterProps } from '../types';\nimport { useFocusRef } from '../hooks';\n\nconst groupCellContent = css`\n  outline: none;\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  margin-left: 4px;\n  stroke: currentColor;\n  stroke-width: 1.5px;\n  fill: transparent;\n  vertical-align: middle;\n\n  > path {\n    transition: d 0.1s;\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function ToggleGroupFormatter<R, SR>({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n  const { ref, tabIndex } = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span\n      ref={ref}\n      className={groupCellContentClassname}\n      tabIndex={tabIndex}\n      onKeyDown={handleKeyDown}\n    >\n      {groupKey}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname} aria-hidden>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","import type { CalculatedColumn, ColSpanArgs } from '../types';\n\nexport function getColSpan<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  lastFrozenColumnIndex: number,\n  args: ColSpanArgs<R, SR>\n): number | undefined {\n  const colSpan = typeof column.colSpan === 'function' ? column.colSpan(args) : 1;\n  if (\n    Number.isInteger(colSpan) &&\n    colSpan! > 1 &&\n    // ignore colSpan if it spans over both frozen and regular columns\n    (!column.frozen || column.idx + colSpan! - 1 <= lastFrozenColumnIndex)\n  ) {\n    return colSpan!;\n  }\n  return undefined;\n}\n","export function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (\n    key === 'Tab' &&\n    (target instanceof HTMLInputElement ||\n      target instanceof HTMLTextAreaElement ||\n      target instanceof HTMLSelectElement)\n  ) {\n    return target.matches(\n      '.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child'\n    );\n  }\n  return false;\n}\n","import type { CalculatedColumn, Position, GroupRow, CellNavigationMode } from '../types';\nimport { getColSpan } from './colSpanUtils';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({\n  selectedPosition,\n  columns,\n  rows,\n  isGroupRow\n}: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return !isGroupRow(row) && isCellEditable(column, row);\n}\n\nexport function isCellEditable<R, SR>(column: CalculatedColumn<R, SR>, row: R): boolean {\n  return (\n    column.editor != null &&\n    !column.rowGroup &&\n    (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false\n  );\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  currentPosition: Position;\n  nextPosition: Position;\n  lastFrozenColumnIndex: number;\n  isCellWithinBounds: (position: Position) => boolean;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({\n  cellNavigationMode,\n  columns,\n  colSpanColumns,\n  rows,\n  currentPosition: { idx: currentIdx },\n  nextPosition,\n  lastFrozenColumnIndex,\n  isCellWithinBounds,\n  isGroupRow\n}: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  const rowsCount = rows.length;\n  let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n\n  const setColSpan = (moveRight: boolean) => {\n    const row = rows[nextRowIdx];\n    if (isGroupRow(row)) return;\n    // If a cell within the colspan range is selected then move to the\n    // previous or the next cell depending on the navigation direction\n    for (const column of colSpanColumns) {\n      const colIdx = column.idx;\n      if (colIdx > nextIdx) break;\n      const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n      if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n        nextIdx = colIdx + (moveRight ? colSpan : 0);\n        break;\n      }\n    }\n  };\n\n  if (isCellWithinBounds(nextPosition)) {\n    setColSpan(nextIdx - currentIdx > 0);\n  }\n\n  if (cellNavigationMode !== 'NONE') {\n    const columnsCount = columns.length;\n    const isAfterLastColumn = nextIdx === columnsCount;\n    const isBeforeFirstColumn = nextIdx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = nextRowIdx === rowsCount - 1;\n        if (!isLastRow) {\n          nextIdx = 0;\n          nextRowIdx += 1;\n        }\n      } else {\n        nextIdx = 0;\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = nextRowIdx === 0;\n        if (!isFirstRow) {\n          nextRowIdx -= 1;\n          nextIdx = columnsCount - 1;\n        }\n      } else {\n        nextIdx = columnsCount - 1;\n      }\n      setColSpan(false);\n    }\n  }\n\n  return { idx: nextIdx, rowIdx: nextRowIdx };\n}\n\ninterface CanExitGridOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rowsCount: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid<R, SR>({\n  cellNavigationMode,\n  columns,\n  rowsCount,\n  selectedPosition: { rowIdx, idx },\n  shiftKey\n}: CanExitGridOpts<R, SR>): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === columns.length - 1;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === rowsCount - 1;\n    const atFirstRow = rowIdx === 0;\n\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n","import clsx from 'clsx';\n\nimport type { CalculatedColumn } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style';\n\nexport * from './colSpanUtils';\nexport * from './domUtils';\nexport * from './keyboardUtils';\nexport * from './selectedCellUtils';\n\nexport const { min, max, floor, sign } = Math;\n\nexport function assertIsValidKeyGetter<R, K extends React.Key>(\n  keyGetter: unknown\n): asserts keyGetter is (row: R) => K {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function getCellStyle<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  colSpan?: number\n): React.CSSProperties {\n  return {\n    gridColumnStart: column.idx + 1,\n    gridColumnEnd: colSpan !== undefined ? `span ${colSpan}` : undefined,\n    left: column.frozen ? `var(--frozen-left-${column.idx})` : undefined\n  };\n}\n\nexport function getCellClassname<R, SR>(\n  column: CalculatedColumn<R, SR>,\n  ...extraClasses: Parameters<typeof clsx>\n): string {\n  return clsx(\n    cellClassname,\n    {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn\n    },\n    ...extraClasses\n  );\n}\n","import { SelectCellFormatter } from './formatters';\nimport { useRowSelection } from './hooks';\nimport type { Column, FormatterProps, GroupFormatterProps } from './types';\nimport { stopPropagation } from './utils';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\nfunction SelectFormatter(props: FormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onClick={stopPropagation}\n      onChange={(checked, isShiftClick) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick });\n      }}\n    />\n  );\n}\n\nfunction SelectGroupFormatter(props: GroupFormatterProps<unknown>) {\n  const [isRowSelected, onRowSelectionChange] = useRowSelection();\n\n  return (\n    <SelectCellFormatter\n      aria-label=\"Select Group\"\n      isCellSelected={props.isCellSelected}\n      value={isRowSelected}\n      onChange={(checked) => {\n        onRowSelectionChange({ row: props.row, checked, isShiftClick: false });\n      }}\n      // Stop propagation to prevent row selection\n      onClick={stopPropagation}\n    />\n  );\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select All\"\n        isCellSelected={false}\n        value={props.allRowsSelected}\n        onChange={props.onAllRowsSelectionChange}\n      />\n    );\n  },\n  formatter: SelectFormatter,\n  groupFormatter: SelectGroupFormatter\n};\n","import { useMemo } from 'react';\n\nimport type { CalculatedColumn, Column } from '../types';\nimport type { DataGridProps } from '../DataGrid';\nimport { ValueFormatter, ToggleGroupFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\nimport { floor, max, min } from '../utils';\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\ninterface ColumnMetric {\n  width: number;\n  left: number;\n}\n\ninterface CalculatedColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy: readonly string[] | undefined | null;\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n  enableVirtualization: boolean;\n}\n\nexport function useCalculatedColumns<R, SR>({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy,\n  enableVirtualization\n}: CalculatedColumnsArgs<R, SR>) {\n  const minColumnWidth = defaultColumnOptions?.minWidth ?? 80;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? ValueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, colSpanColumns, lastFrozenColumnIndex, groupBy } = useMemo((): {\n    columns: readonly CalculatedColumn<R, SR>[];\n    colSpanColumns: readonly CalculatedColumn<R, SR>[];\n    lastFrozenColumnIndex: number;\n    groupBy: readonly string[];\n  } => {\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    let lastFrozenColumnIndex = -1;\n\n    const columns = rawColumns.map((rawColumn) => {\n      const rowGroup = rawGroupBy?.includes(rawColumn.key) ?? false;\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      const frozen = rowGroup || rawColumn.frozen || false;\n\n      const column: Mutable<CalculatedColumn<R, SR>> = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        rowGroup,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        formatter: rawColumn.formatter ?? defaultFormatter\n      };\n\n      if (rowGroup) {\n        column.groupFormatter ??= ToggleGroupFormatter;\n      }\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    const colSpanColumns: CalculatedColumn<R, SR>[] = [];\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n\n      if (column.colSpan != null) {\n        colSpanColumns.push(column);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      colSpanColumns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [rawColumns, defaultFormatter, defaultResizable, defaultSortable, rawGroupBy]);\n\n  const { layoutCssVars, totalColumnWidth, totalFrozenColumnWidth, columnMetrics } = useMemo((): {\n    layoutCssVars: Readonly<Record<string, string>>;\n    totalColumnWidth: number;\n    totalFrozenColumnWidth: number;\n    columnMetrics: ReadonlyMap<CalculatedColumn<R, SR>, ColumnMetric>;\n  } => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalColumnWidth = 0;\n    let totalFrozenColumnWidth = 0;\n    let templateColumns = '';\n    let allocatedWidth = 0;\n    let unassignedColumnsCount = 0;\n\n    for (const column of columns) {\n      let width = getSpecifiedWidth(column, columnWidths, viewportWidth);\n\n      if (width === undefined) {\n        unassignedColumnsCount++;\n      } else {\n        width = clampColumnWidth(width, column, minColumnWidth);\n        allocatedWidth += width;\n        columnMetrics.set(column, { width, left: 0 });\n      }\n    }\n\n    const unallocatedWidth = viewportWidth - allocatedWidth;\n    const unallocatedColumnWidth = unallocatedWidth / unassignedColumnsCount;\n\n    for (const column of columns) {\n      let width: number;\n      if (columnMetrics.has(column)) {\n        const columnMetric = columnMetrics.get(column)!;\n        columnMetric.left = left;\n        ({ width } = columnMetric);\n      } else {\n        width = clampColumnWidth(unallocatedColumnWidth, column, minColumnWidth);\n        columnMetrics.set(column, { width, left });\n      }\n      totalColumnWidth += width;\n      left += width;\n      templateColumns += `${width}px `;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {\n      '--template-columns': templateColumns\n    };\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--frozen-left-${column.idx}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { layoutCssVars, totalColumnWidth, totalFrozenColumnWidth, columnMetrics };\n  }, [columnWidths, columns, viewportWidth, minColumnWidth, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [\n    columnMetrics,\n    columns,\n    lastFrozenColumnIndex,\n    scrollLeft,\n    totalFrozenColumnWidth,\n    viewportWidth,\n    enableVirtualization\n  ]);\n\n  return {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    totalColumnWidth,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  };\n}\n\nfunction getSpecifiedWidth<R, SR>(\n  { key, width }: Column<R, SR>,\n  columnWidths: ReadonlyMap<string, number>,\n  viewportWidth: number\n): number | undefined {\n  if (columnWidths.has(key)) {\n    // Use the resized width if available\n    return columnWidths.get(key);\n  }\n  if (typeof width === 'number') {\n    return width;\n  }\n  if (typeof width === 'string' && /^\\d+%$/.test(width)) {\n    return floor((viewportWidth * parseInt(width, 10)) / 100);\n  }\n  return undefined;\n}\n\nfunction clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: Column<R, SR>,\n  minColumnWidth: number\n): number {\n  width = max(width, minWidth ?? minColumnWidth);\n\n  if (typeof maxWidth === 'number') {\n    return min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { useCallback } from 'react';\n\nexport function useCombinedRefs<T>(...refs: readonly React.Ref<T>[]) {\n  return useCallback(\n    (handle: T | null) => {\n      for (const ref of refs) {\n        if (typeof ref === 'function') {\n          ref(handle);\n        } else if (ref !== null) {\n          // @ts-expect-error: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065\n          ref.current = handle;\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    refs\n  );\n}\n","import { useRef, useState, useLayoutEffect } from 'react';\n\nexport function useGridDimensions(): [\n  ref: React.RefObject<HTMLDivElement>,\n  width: number,\n  height: number\n] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [gridWidth, setGridWidth] = useState(1);\n  const [gridHeight, setGridHeight] = useState(1);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in Node.js (SSR), jest/jsdom, and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const resizeObserver = new ResizeObserver(() => {\n      // Get dimensions without scrollbars.\n      // The dimensions given by the callback entries in Firefox do not substract the scrollbar sizes.\n      const { clientWidth, clientHeight } = gridRef.current!;\n      // TODO: remove once fixed upstream\n      // we reduce width by 1px here to avoid layout issues in Chrome\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=1206298\n      setGridWidth(clientWidth - (devicePixelRatio % 1 === 0 ? 0 : 1));\n      setGridHeight(clientHeight);\n    });\n\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, gridWidth, gridHeight];\n}\n","import { useRef, useEffect, useCallback } from 'react';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends (...args: any[]) => any>(fn: T) {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  return useCallback((...args: Parameters<T>) => {\n    ref.current(...args);\n  }, []);\n}\n","import { useRef, useLayoutEffect, useState } from 'react';\n\n// https://www.w3.org/TR/wai-aria-practices-1.1/#kbd_roving_tabindex\nexport function useRovingRef(isSelected: boolean) {\n  const ref = useRef<HTMLDivElement>(null);\n  // https://www.w3.org/TR/wai-aria-practices-1.1/#gridNav_focus\n  const isChildFocused = useRef(false);\n  const [, forceRender] = useState<Record<string, never>>({});\n\n  useLayoutEffect(() => {\n    if (!isSelected) {\n      isChildFocused.current = false;\n      return;\n    }\n\n    if (isChildFocused.current) {\n      // When the child is focused, we need to rerender\n      // the cell again so tabIndex is updated to -1\n      forceRender({});\n      return;\n    }\n    ref.current?.focus();\n  }, [isSelected]);\n\n  function onFocus(event: React.FocusEvent<HTMLDivElement>) {\n    if (event.target !== ref.current) {\n      isChildFocused.current = true;\n    }\n  }\n\n  const isFocused = isSelected && !isChildFocused.current;\n\n  return {\n    ref,\n    tabIndex: isFocused ? 0 : -1,\n    onFocus\n  };\n}\n","import { createContext, useContext } from 'react';\nimport type { SelectRowEvent } from '../types';\n\nconst RowSelectionContext = createContext<boolean | undefined>(undefined);\n\nexport const RowSelectionProvider = RowSelectionContext.Provider;\n\nconst RowSelectionChangeContext = createContext<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ((selectRowEvent: SelectRowEvent<any>) => void) | undefined\n>(undefined);\n\nexport const RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\n\nexport function useRowSelection<R>(): [boolean, (selectRowEvent: SelectRowEvent<R>) => void] {\n  const rowSelectionContext = useContext(RowSelectionContext);\n  const rowSelectionChangeContext = useContext(RowSelectionChangeContext);\n\n  if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n    throw new Error('useRowSelection must be used within DataGrid cells');\n  }\n\n  return [rowSelectionContext, rowSelectionChangeContext];\n}\n","import { useMemo } from 'react';\n\nimport { getColSpan } from '../utils';\nimport type { CalculatedColumn, GroupRow } from '../types';\n\ninterface ViewportColumnsArgs<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  colSpanColumns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  summaryRows: readonly SR[] | undefined | null;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  lastFrozenColumnIndex: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function useViewportColumns<R, SR>({\n  columns,\n  colSpanColumns,\n  rows,\n  summaryRows,\n  colOverscanStartIdx,\n  colOverscanEndIdx,\n  lastFrozenColumnIndex,\n  rowOverscanStartIdx,\n  rowOverscanEndIdx,\n  isGroupRow\n}: ViewportColumnsArgs<R, SR>) {\n  // find the column that spans over a column within the visible columns range and adjust colOverscanStartIdx\n  const startIdx = useMemo(() => {\n    if (colOverscanStartIdx === 0) return 0;\n\n    let startIdx = colOverscanStartIdx;\n\n    const updateStartIdx = (colIdx: number, colSpan: number | undefined) => {\n      if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n        startIdx = colIdx;\n        return true;\n      }\n      return false;\n    };\n\n    for (const column of colSpanColumns) {\n      // check header row\n      const colIdx = column.idx;\n      if (colIdx >= startIdx) break;\n      if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' }))) {\n        break;\n      }\n\n      // check viewport rows\n      for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n        const row = rows[rowIdx];\n        if (isGroupRow(row)) continue;\n        if (\n          updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row }))\n        ) {\n          break;\n        }\n      }\n\n      // check summary rows\n      if (summaryRows != null) {\n        for (const row of summaryRows) {\n          if (\n            updateStartIdx(\n              colIdx,\n              getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row })\n            )\n          ) {\n            break;\n          }\n        }\n      }\n    }\n\n    return startIdx;\n  }, [\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    summaryRows,\n    colOverscanStartIdx,\n    lastFrozenColumnIndex,\n    colSpanColumns,\n    isGroupRow\n  ]);\n\n  return useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < startIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [startIdx, colOverscanEndIdx, columns]);\n}\n","import { useMemo } from 'react';\nimport { floor, max, min } from '../utils';\nimport type { GroupRow, RowHeightArgs } from '../types';\n\ntype GroupByDictionary<TRow> = Record<\n  string,\n  {\n    readonly childRows: readonly TRow[];\n    readonly childGroups: readonly TRow[] | Readonly<GroupByDictionary<TRow>>;\n    readonly startRowIndex: number;\n  }\n>;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number | ((args: RowHeightArgs<R>) => number);\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper:\n    | ((rows: readonly R[], columnKey: string) => Record<string, readonly R[]>)\n    | undefined\n    | null;\n  expandedGroupIds: ReadonlySet<unknown> | undefined | null;\n  enableVirtualization: boolean;\n}\n\n// https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || rowGrouper == null) return [undefined, rawRows.length];\n\n    const groupRows = (\n      rows: readonly R[],\n      [groupByKey, ...remainingGroupByKeys]: readonly string[],\n      startRowIndex: number\n    ): [Readonly<GroupByDictionary<R>>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] =\n          remainingGroupByKeys.length === 0\n            ? [childRows, childRows.length]\n            : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, isGroupRow] = useMemo((): [\n    ReadonlyArray<R | GroupRow<R>>,\n    (row: R | GroupRow<R>) => row is GroupRow<R>\n  ] => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, isGroupRow];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (\n      rows: GroupByDictionary<R> | readonly R[],\n      parentId: string | undefined,\n      level: number\n    ): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, isGroupRow];\n\n    function isGroupRow(row: R | GroupRow<R>): row is GroupRow<R> {\n      return allGroupRows.has(row);\n    }\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const { totalRowHeight, getRowTop, getRowHeight, findRowIdx } = useMemo(() => {\n    if (typeof rowHeight === 'number') {\n      return {\n        totalRowHeight: rowHeight * rows.length,\n        getRowTop: (rowIdx: number) => rowIdx * rowHeight,\n        getRowHeight: () => rowHeight,\n        findRowIdx: (offset: number) => floor(offset / rowHeight)\n      };\n    }\n\n    let totalRowHeight = 0;\n    // Calcule the height of all the rows upfront. This can cause performance issues\n    // and we can consider using a similar approach as react-window\n    // https://github.com/bvaughn/react-window/blob/master/src/VariableSizeList.js#L68\n    const rowPositions = rows.map((row: R | GroupRow<R>) => {\n      const currentRowHeight = isGroupRow(row)\n        ? rowHeight({ type: 'GROUP', row })\n        : rowHeight({ type: 'ROW', row });\n      const position = { top: totalRowHeight, height: currentRowHeight };\n      totalRowHeight += currentRowHeight;\n      return position;\n    });\n\n    const validateRowIdx = (rowIdx: number) => {\n      return max(0, min(rows.length - 1, rowIdx));\n    };\n\n    return {\n      totalRowHeight,\n      getRowTop: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].top,\n      getRowHeight: (rowIdx: number) => rowPositions[validateRowIdx(rowIdx)].height,\n      findRowIdx(offset: number) {\n        let start = 0;\n        let end = rowPositions.length - 1;\n        while (start <= end) {\n          const middle = start + floor((end - start) / 2);\n          const currentOffset = rowPositions[middle].top;\n\n          if (currentOffset === offset) return middle;\n\n          if (currentOffset < offset) {\n            start = middle + 1;\n          } else if (currentOffset > offset) {\n            end = middle - 1;\n          }\n\n          if (start > end) return end;\n        }\n        return 0;\n      }\n    };\n  }, [isGroupRow, rowHeight, rows]);\n\n  if (!enableVirtualization) {\n    return {\n      rowOverscanStartIdx: 0,\n      rowOverscanEndIdx: rows.length - 1,\n      rows,\n      rowsCount,\n      totalRowHeight,\n      isGroupRow,\n      getRowTop,\n      getRowHeight,\n      findRowIdx\n    };\n  }\n\n  const overscanThreshold = 4;\n  const rowVisibleStartIdx = findRowIdx(scrollTop);\n  const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n  const rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n  const rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  };\n}\n","import { css } from '@linaria/core';\nimport type { HeaderRendererProps } from '../types';\n\nconst headerSortCell = css`\n  cursor: pointer;\n  display: flex;\n`;\n\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\n\nconst headerSortName = css`\n  flex-grow: 1;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\nconst arrow = css`\n  fill: currentColor;\n\n  > path {\n    transition: d 0.1s;\n  }\n`;\n\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\n\ntype SharedHeaderCellProps<R, SR> = Pick<\n  HeaderRendererProps<R, SR>,\n  'sortDirection' | 'onSort' | 'priority'\n>;\n\ninterface Props<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nexport default function SortableHeaderCell<R, SR>({\n  onSort,\n  sortDirection,\n  priority,\n  children\n}: Props<R, SR>) {\n  return (\n    <span className={headerSortCellClassname} onClick={(e) => onSort(e.ctrlKey || e.metaKey)}>\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>\n        {sortDirection !== undefined && (\n          <svg viewBox=\"0 0 12 8\" width=\"12\" height=\"8\" className={arrowClassname} aria-hidden>\n            <path d={sortDirection === 'ASC' ? 'M0 8 6 0 12 8' : 'M0 0 6 8 12 0'} />\n          </svg>\n        )}\n        {priority}\n      </span>\n    </span>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, SortColumn } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport SortableHeaderCell from './headerCells/SortableHeaderCell';\nimport { getCellStyle, getCellClassname } from './utils';\n\nconst cellResizable = css`\n  &::after {\n    content: '';\n    cursor: col-resize;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 10px;\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\ntype SharedHeaderRowProps<R, SR> = Pick<\n  HeaderRowProps<R, SR, React.Key>,\n  'onSortColumnsChange' | 'allRowsSelected' | 'onAllRowsSelectionChange' | 'sortColumns'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  colSpan: number | undefined;\n  onResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  colSpan,\n  onResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumns,\n  onSortColumnsChange\n}: HeaderCellProps<R, SR>) {\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right } = currentTarget.getBoundingClientRect();\n    const offset = right - event.clientX;\n\n    if (offset > 11) {\n      // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      if (event.pointerId !== pointerId) return;\n      if (event.pointerType === 'mouse' && event.buttons !== 1) {\n        onPointerUp(event);\n        return;\n      }\n      const width = event.clientX + offset - currentTarget.getBoundingClientRect().left;\n      if (width > 0) {\n        onResize(column, width);\n      }\n    }\n\n    function onPointerUp(event: PointerEvent) {\n      if (event.pointerId !== pointerId) return;\n      window.removeEventListener('pointermove', onPointerMove);\n      window.removeEventListener('pointerup', onPointerUp);\n    }\n\n    event.preventDefault();\n    window.addEventListener('pointermove', onPointerMove);\n    window.addEventListener('pointerup', onPointerUp);\n  }\n  const sortIndex = sortColumns?.findIndex((sort) => sort.columnKey === column.key);\n  const sortColumn =\n    sortIndex !== undefined && sortIndex > -1 ? sortColumns![sortIndex] : undefined;\n  const sortDirection = sortColumn?.direction;\n  const priority = sortColumn !== undefined && sortColumns!.length > 1 ? sortIndex! + 1 : undefined;\n  const ariaSort =\n    sortDirection && !priority ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined;\n\n  const onSort = (ctrlClick: boolean) => {\n    if (onSortColumnsChange == null) return;\n    const { sortDescendingFirst } = column;\n    if (sortColumn === undefined) {\n      // not currently sorted\n      const nextSort: SortColumn = {\n        columnKey: column.key,\n        direction: sortDescendingFirst ? 'DESC' : 'ASC'\n      };\n      onSortColumnsChange(sortColumns && ctrlClick ? [...sortColumns, nextSort] : [nextSort]);\n    } else {\n      let nextSortColumn: SortColumn | undefined;\n      if (\n        (sortDescendingFirst && sortDirection === 'DESC') ||\n        (!sortDescendingFirst && sortDirection === 'ASC')\n      ) {\n        nextSortColumn = {\n          columnKey: column.key,\n          direction: sortDirection === 'ASC' ? 'DESC' : 'ASC'\n        };\n      }\n      if (ctrlClick) {\n        const nextSortColumns = [...sortColumns!];\n        if (nextSortColumn) {\n          // swap direction\n          nextSortColumns[sortIndex!] = nextSortColumn;\n        } else {\n          // remove sort\n          nextSortColumns.splice(sortIndex!, 1);\n        }\n        onSortColumnsChange(nextSortColumns);\n      } else {\n        onSortColumnsChange(nextSortColumn ? [nextSortColumn] : []);\n      }\n    }\n  };\n\n  function getCell() {\n    if (column.headerRenderer) {\n      return (\n        <column.headerRenderer\n          column={column}\n          sortDirection={sortDirection}\n          priority={priority}\n          onSort={onSort}\n          allRowsSelected={allRowsSelected}\n          onAllRowsSelectionChange={onAllRowsSelectionChange}\n        />\n      );\n    }\n\n    if (column.sortable) {\n      return (\n        <SortableHeaderCell onSort={onSort} sortDirection={sortDirection} priority={priority}>\n          {column.name}\n        </SortableHeaderCell>\n      );\n    }\n\n    return column.name;\n  }\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellResizableClassname]: column.resizable\n  });\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-sort={ariaSort}\n      aria-colspan={colSpan}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      {getCell()}\n    </div>\n  );\n}\n","import { memo } from 'react';\n\nimport HeaderCell from './HeaderCell';\nimport type { CalculatedColumn } from './types';\nimport { getColSpan } from './utils';\nimport type { DataGridProps } from './DataGrid';\nimport { headerRowClassname } from './style';\n\ntype SharedDataGridProps<R, SR, K extends React.Key> = Pick<\n  DataGridProps<R, SR, K>,\n  'sortColumns' | 'onSortColumnsChange'\n>;\n\nexport interface HeaderRowProps<R, SR, K extends React.Key> extends SharedDataGridProps<R, SR, K> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n  lastFrozenColumnIndex: number;\n}\n\nfunction HeaderRow<R, SR, K extends React.Key>({\n  columns,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  onColumnResize,\n  sortColumns,\n  onSortColumnsChange,\n  lastFrozenColumnIndex\n}: HeaderRowProps<R, SR, K>) {\n  const cells = [];\n  for (let index = 0; index < columns.length; index++) {\n    const column = columns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'HEADER' });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(\n      <HeaderCell<R, SR>\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        onResize={onColumnResize}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={onAllRowsSelectionChange}\n        onSortColumnsChange={onSortColumnsChange}\n        sortColumns={sortColumns}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className={headerRowClassname}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR, K extends React.Key>(\n  props: HeaderRowProps<R, SR, K>\n) => JSX.Element;\n","import { memo } from 'react';\nimport type { RefAttributes } from 'react';\nimport { css } from '@linaria/core';\n\nimport { getCellStyle, getCellClassname, isCellEditable } from './utils';\nimport type { CellRendererProps } from './types';\nimport { useRovingRef } from './hooks';\n\nconst cellCopied = css`\n  background-color: #ccccff;\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  background-color: #ccccff;\n\n  &.${cellCopied} {\n    background-color: #9999ff;\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nfunction Cell<R, SR>({\n  column,\n  colSpan,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  row,\n  dragHandle,\n  onRowClick,\n  onRowDoubleClick,\n  onRowChange,\n  selectCell,\n  ...props\n}: CellRendererProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingRef(isCellSelected);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    {\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  function selectCellWrapper(openEditor?: boolean | null) {\n    selectCell(row, column, openEditor);\n  }\n\n  function handleClick() {\n    selectCellWrapper(column.editorOptions?.editOnClick);\n    onRowClick?.(row, column);\n  }\n\n  function handleContextMenu() {\n    selectCellWrapper();\n  }\n\n  function handleDoubleClick() {\n    selectCellWrapper(true);\n    onRowDoubleClick?.(row, column);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      aria-colspan={colSpan}\n      aria-readonly={!isCellEditable(column, row) || undefined}\n      ref={ref}\n      tabIndex={tabIndex}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      onFocus={onFocus}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          <column.formatter\n            column={column}\n            row={row}\n            isCellSelected={isCellSelected}\n            onRowChange={onRowChange}\n          />\n          {dragHandle}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Cell) as <R, SR>(\n  props: CellRendererProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n","import { memo, forwardRef } from 'react';\nimport type { RefAttributes, CSSProperties } from 'react';\nimport clsx from 'clsx';\n\nimport Cell from './Cell';\nimport { RowSelectionProvider, useLatestFunc, useFocusRef, useCombinedRefs } from './hooks';\nimport { getColSpan } from './utils';\nimport { groupRowSelectedClassname, rowClassname } from './style';\nimport type { RowRendererProps } from './types';\n\nfunction Row<R, SR>(\n  {\n    className,\n    rowIdx,\n    selectedCellIdx,\n    isRowSelected,\n    copiedCellIdx,\n    draggedOverCellIdx,\n    lastFrozenColumnIndex,\n    row,\n    viewportColumns,\n    selectedCellEditor,\n    selectedCellDragHandle,\n    onRowClick,\n    onRowDoubleClick,\n    rowClass,\n    setDraggedOverRowIdx,\n    onMouseEnter,\n    top,\n    height,\n    onRowChange,\n    selectCell,\n    ...props\n  }: RowRendererProps<R, SR>,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const isRowFocused = selectedCellIdx === -1;\n  const { ref: rowRef, tabIndex } = useFocusRef<HTMLDivElement>(isRowFocused);\n\n  const handleRowChange = useLatestFunc((newRow: R) => {\n    onRowChange(rowIdx, newRow);\n  });\n\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n    {\n      [groupRowSelectedClassname]: isRowFocused\n    },\n    rowClass?.(row),\n    className\n  );\n\n  const cells = [];\n\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const { idx } = column;\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    const isCellSelected = selectedCellIdx === idx;\n\n    if (isCellSelected && selectedCellEditor) {\n      cells.push(selectedCellEditor);\n    } else {\n      cells.push(\n        <Cell\n          key={column.key}\n          column={column}\n          colSpan={colSpan}\n          row={row}\n          isCopied={copiedCellIdx === idx}\n          isDraggedOver={draggedOverCellIdx === idx}\n          isCellSelected={isCellSelected}\n          dragHandle={isCellSelected ? selectedCellDragHandle : undefined}\n          onRowClick={onRowClick}\n          onRowDoubleClick={onRowDoubleClick}\n          onRowChange={handleRowChange}\n          selectCell={selectCell}\n        />\n      );\n    }\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        ref={useCombinedRefs(ref, rowRef)}\n        tabIndex={tabIndex}\n        className={className}\n        onMouseEnter={handleDragEnter}\n        style={\n          {\n            top,\n            '--row-height': `${height}px`\n          } as unknown as CSSProperties\n        }\n        {...props}\n      >\n        {cells}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(forwardRef(Row)) as <R, SR>(\n  props: RowRendererProps<R, SR> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, GroupRow } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\nimport { useRovingRef } from './hooks';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<\n  GroupRowRendererProps<R, SR>,\n  'id' | 'groupKey' | 'childRows' | 'isExpanded' | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  row: GroupRow<R>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  column,\n  row,\n  groupColumnIndex,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  const { ref, tabIndex, onFocus } = useRovingRef(isCellSelected);\n\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-selected={isCellSelected}\n      ref={ref}\n      tabIndex={tabIndex}\n      key={column.key}\n      className={getCellClassname(column)}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n      onFocus={onFocus}\n    >\n      {(!column.rowGroup || groupColumnIndex === column.idx) && column.groupFormatter && (\n        <column.groupFormatter\n          groupKey={groupKey}\n          childRows={childRows}\n          column={column}\n          row={row}\n          isExpanded={isExpanded}\n          isCellSelected={isCellSelected}\n          toggleGroup={toggleGroup}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import type { CSSProperties } from 'react';\nimport { memo } from 'react';\nimport clsx from 'clsx';\n\nimport { groupRowClassname, groupRowSelectedClassname, rowClassname } from './style';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport type { CalculatedColumn, GroupRow, Omit } from './types';\nimport { RowSelectionProvider, useFocusRef } from './hooks';\n\nexport interface GroupRowRendererProps<R, SR>\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  row: GroupRow<R>;\n  top: number;\n  height: number;\n  level: number;\n  selectedCellIdx: number | undefined;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectGroup: (rowIdx: number) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  row,\n  top,\n  height,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectGroup,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  const isRowFocused = selectedCellIdx === -1;\n  const { ref, tabIndex } = useFocusRef<HTMLDivElement>(isRowFocused);\n\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function handleSelectGroup() {\n    selectGroup(rowIdx);\n  }\n\n  return (\n    <RowSelectionProvider value={isRowSelected}>\n      <div\n        role=\"row\"\n        aria-level={level}\n        aria-expanded={isExpanded}\n        ref={ref}\n        tabIndex={tabIndex}\n        className={clsx(\n          rowClassname,\n          groupRowClassname,\n          `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`,\n          {\n            [groupRowSelectedClassname]: isRowFocused // Select row if there is no selected cell\n          }\n        )}\n        onClick={handleSelectGroup}\n        style={\n          {\n            top,\n            '--row-height': `${height}px`\n          } as unknown as CSSProperties\n        }\n        {...props}\n      >\n        {viewportColumns.map((column) => (\n          <GroupCell\n            key={column.key}\n            id={id}\n            groupKey={groupKey}\n            childRows={childRows}\n            isExpanded={isExpanded}\n            isCellSelected={selectedCellIdx === column.idx}\n            column={column}\n            row={row}\n            groupColumnIndex={idx}\n            toggleGroup={toggleGroup}\n          />\n        ))}\n      </div>\n    </RowSelectionProvider>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CellRendererProps } from './types';\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'column' | 'colSpan'>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({ column, colSpan, row }: SummaryCellProps<R, SR>) {\n  const { summaryFormatter: SummaryFormatter, summaryCellClass } = column;\n  const className = getCellClassname(\n    column,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      aria-colspan={colSpan}\n      className={className}\n      style={getCellStyle(column, colSpan)}\n    >\n      {SummaryFormatter && <SummaryFormatter column={column} row={row} />}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { rowClassname, summaryRowClassname } from './style';\nimport { getColSpan } from './utils';\nimport SummaryCell from './SummaryCell';\nimport type { RowRendererProps } from './types';\n\ntype SharedRowRendererProps<R, SR> = Pick<RowRendererProps<R, SR>, 'viewportColumns' | 'rowIdx'>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  bottom: number;\n  lastFrozenColumnIndex: number;\n}\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  row,\n  viewportColumns,\n  bottom,\n  lastFrozenColumnIndex,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  const cells = [];\n  for (let index = 0; index < viewportColumns.length; index++) {\n    const column = viewportColumns[index];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'SUMMARY', row });\n    if (colSpan !== undefined) {\n      index += colSpan - 1;\n    }\n\n    cells.push(<SummaryCell<R, SR> key={column.key} column={column} colSpan={colSpan} row={row} />);\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={`${rowClassname} rdg-row-${\n        rowIdx % 2 === 0 ? 'even' : 'odd'\n      } ${summaryRowClassname}`}\n      style={{ bottom }}\n    >\n      {cells}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import { useEffect, useRef } from 'react';\nimport { createPortal } from 'react-dom';\nimport { css } from '@linaria/core';\n\nimport { useLatestFunc } from './hooks';\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CellRendererProps, EditorProps } from './types';\n\n/*\n * To check for outside `mousedown` events, we listen to all `mousedown` events at their birth,\n * i.e. on the window during the capture phase, and at their death, i.e. on the window during the bubble phase.\n *\n * We schedule a check at the birth of the event, cancel the check when the event reaches the \"inside\" container,\n * and trigger the \"outside\" callback when the event bubbles back up to the window.\n *\n * The event can be `stopPropagation()`ed halfway through, so they may not always bubble back up to the window,\n * so an alternative check must be used. The check must happen after the event can reach the \"inside\" container,\n * and not before it run to completion. `requestAnimationFrame` is the best way we know how to achieve this.\n * Usually we want click event handlers from parent components to access the latest commited values,\n * so `mousedown` is used instead of `click`.\n *\n * We must also rely on React's event capturing/bubbling to handle elements rendered in a portal.\n */\n\nconst cellEditing = css`\n  &.rdg-cell {\n    padding: 0;\n  }\n`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'colSpan'>;\n\ninterface EditCellProps<R, SR> extends EditorProps<R, SR>, SharedCellRendererProps<R, SR> {\n  onKeyDown: (event: React.KeyboardEvent<HTMLDivElement>, isEditorPortalEvent: boolean) => void;\n}\n\nexport default function EditCell<R, SR>({\n  column,\n  colSpan,\n  row,\n  onRowChange,\n  onClose,\n  onKeyDown,\n  editorPortalTarget\n}: EditCellProps<R, SR>) {\n  const frameRequestRef = useRef<number | undefined>();\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `onWindowCaptureMouseDown` might otherwise miss valid mousedown events.\n  // To that end we instead access the latest props via useLatestFunc.\n  const commitOnOutsideMouseDown = useLatestFunc(() => {\n    onRowChange(row, true);\n  });\n\n  function cancelFrameRequest() {\n    cancelAnimationFrame(frameRequestRef.current!);\n  }\n\n  useEffect(() => {\n    function onWindowCaptureMouseDown() {\n      frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n    }\n\n    addEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n\n    return () => {\n      removeEventListener('mousedown', onWindowCaptureMouseDown, { capture: true });\n      cancelFrameRequest();\n    };\n  }, [commitOnOutsideMouseDown]);\n\n  const { cellClass } = column;\n  const className = getCellClassname(\n    column,\n    'rdg-editor-container',\n    !column.editorOptions?.createPortal && cellEditing,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass\n  );\n\n  let content;\n  if (column.editor != null) {\n    content = (\n      <column.editor\n        column={column}\n        row={row}\n        onRowChange={onRowChange}\n        onClose={onClose}\n        editorPortalTarget={editorPortalTarget}\n      />\n    );\n\n    if (column.editorOptions?.createPortal) {\n      content = (\n        <>\n          {createPortal(content, editorPortalTarget)}\n          <column.formatter column={column} row={row} isCellSelected onRowChange={onRowChange} />\n        </>\n      );\n    }\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    onKeyDown(event, true);\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-colspan={colSpan}\n      aria-selected\n      className={className}\n      style={getCellStyle(column, colSpan)}\n      onKeyDown={column.editorOptions?.createPortal ? handleKeyDown : undefined}\n      onMouseDownCapture={cancelFrameRequest}\n    >\n      {content}\n    </div>\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, FillEvent, Position } from './types';\nimport type { DataGridProps, SelectCellState } from './DataGrid';\n\nconst cellDragHandle = css`\n  cursor: move;\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  width: 8px;\n  height: 8px;\n  background-color: var(--selection-color);\n\n  &:hover {\n    width: 16px;\n    height: 16px;\n    border: 2px solid var(--selection-color);\n    background-color: var(--background-color);\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\ninterface Props<R, SR> extends Pick<DataGridProps<R, SR>, 'rows' | 'onRowsChange'> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  selectedPosition: SelectCellState;\n  latestDraggedOverRowIdx: React.MutableRefObject<number | undefined>;\n  isCellEditable: (position: Position) => boolean;\n  onFill: (event: FillEvent<R>) => R;\n  setDragging: (isDragging: boolean) => void;\n  setDraggedOverRowIdx: (overRowIdx: number | undefined) => void;\n}\n\nexport default function DragHandle<R, SR>({\n  rows,\n  columns,\n  selectedPosition,\n  latestDraggedOverRowIdx,\n  isCellEditable,\n  onRowsChange,\n  onFill,\n  setDragging,\n  setDraggedOverRowIdx\n}: Props<R, SR>) {\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined) return;\n\n    const { rowIdx } = selectedPosition;\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    updateRows(startRowIndex, endRowIndex);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    updateRows(selectedPosition.rowIdx + 1, rows.length);\n  }\n\n  function updateRows(startRowIdx: number, endRowIdx: number) {\n    const { idx, rowIdx } = selectedPosition;\n    const column = columns[idx];\n    const sourceRow = rows[rowIdx];\n    const updatedRows = [...rows];\n    const indexes: number[] = [];\n    for (let i = startRowIdx; i < endRowIdx; i++) {\n      if (isCellEditable({ rowIdx: i, idx })) {\n        const updatedRow = onFill({ columnKey: column.key, sourceRow, targetRow: rows[i] });\n        if (updatedRow !== rows[i]) {\n          updatedRows[i] = updatedRow;\n          indexes.push(i);\n        }\n      }\n    }\n\n    if (indexes.length > 0) {\n      onRowsChange?.(updatedRows, { indexes, column });\n    }\n  }\n\n  return (\n    <div\n      className={cellDragHandleClassname}\n      onMouseDown={handleMouseDown}\n      onDoubleClick={handleDoubleClick}\n    />\n  );\n}\n","import {\n  forwardRef,\n  useState,\n  useRef,\n  useLayoutEffect,\n  useImperativeHandle,\n  useCallback,\n  useMemo\n} from 'react';\nimport type { Key, RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport {\n  rootClassname,\n  viewportDraggingClassname,\n  cell as cellClassname,\n  row as rowClassname,\n  focusSinkClassname\n} from './style';\nimport {\n  useGridDimensions,\n  useCalculatedColumns,\n  useViewportColumns,\n  useViewportRows,\n  useLatestFunc,\n  RowSelectionChangeProvider\n} from './hooks';\nimport HeaderRow from './HeaderRow';\nimport Row from './Row';\nimport GroupRowRenderer from './GroupRow';\nimport SummaryRow from './SummaryRow';\nimport EditCell from './EditCell';\nimport DragHandle from './DragHandle';\nimport {\n  assertIsValidKeyGetter,\n  onEditorNavigation,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput,\n  getColSpan,\n  max,\n  sign\n} from './utils';\n\nimport type {\n  CalculatedColumn,\n  Column,\n  Position,\n  RowRendererProps,\n  RowsChangeData,\n  SelectRowEvent,\n  FillEvent,\n  PasteEvent,\n  CellNavigationMode,\n  SortColumn,\n  RowHeightArgs\n} from './types';\n\nexport interface SelectCellState extends Position {\n  readonly mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  readonly mode: 'EDIT';\n  readonly row: R;\n  readonly originalRow: R;\n  readonly key: string | null;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<\n  Column<R, SR>,\n  'formatter' | 'minWidth' | 'resizable' | 'sortable'\n>;\n\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nconst body = globalThis.document?.body;\n\nconst initialPosition: SelectCellState = {\n  idx: -1,\n  rowIdx: -1,\n  mode: 'SELECT'\n};\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, enableEditor?: boolean | null) => void;\n}\n\ntype SharedDivProps = Pick<\n  React.HTMLAttributes<HTMLDivElement>,\n  'aria-label' | 'aria-labelledby' | 'aria-describedby' | 'className' | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown, K extends Key = Key> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   * Bottom horizontal scroll bar can move the row left / right. Or a customized row renderer can be used to disabled the scrolling support.\n   */\n  summaryRows?: readonly SR[] | null;\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: ((row: R) => K) | null;\n  onRowsChange?: ((rows: R[], data: RowsChangeData<R, SR>) => void) | null;\n\n  /**\n   * Dimensions props\n   */\n  /** The height of each row in pixels */\n  rowHeight?: number | ((args: RowHeightArgs<R>) => number) | null;\n  /** The height of the header row in pixels */\n  headerRowHeight?: number | null;\n  /** The height of each summary row in pixels */\n  summaryRowHeight?: number | null;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: ReadonlySet<K> | null;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: ((selectedRows: Set<K>) => void) | null;\n  /**Used for multi column sorting */\n  sortColumns?: readonly SortColumn[] | null;\n  onSortColumnsChange?: ((sortColumns: SortColumn[]) => void) | null;\n  defaultColumnOptions?: DefaultColumnOptions<R, SR> | null;\n  groupBy?: readonly string[] | null;\n  rowGrouper?: ((rows: readonly R[], columnKey: string) => Record<string, readonly R[]>) | null;\n  expandedGroupIds?: ReadonlySet<unknown> | null;\n  onExpandedGroupIdsChange?: ((expandedGroupIds: Set<unknown>) => void) | null;\n  onFill?: ((event: FillEvent<R>) => R) | null;\n  onPaste?: ((event: PasteEvent<R>) => R) | null;\n\n  /**\n   * Custom renderers\n   */\n  rowRenderer?: React.ComponentType<RowRendererProps<R, SR>> | null;\n  emptyRowsRenderer?: React.ComponentType | null;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: ((row: R, column: CalculatedColumn<R, SR>) => void) | null;\n  /** Function called whenever a row is double clicked */\n  onRowDoubleClick?: ((row: R, column: CalculatedColumn<R, SR>) => void) | null;\n  /** Called when the grid is scrolled */\n  onScroll?: ((event: React.UIEvent<HTMLDivElement>) => void) | null;\n  /** Called when a column is resized */\n  onColumnResize?: ((idx: number, width: number) => void) | null;\n  /** Function called whenever selected cell is changed */\n  onSelectedCellChange?: ((position: Position) => void) | null;\n\n  /**\n   * Toggles and modes\n   */\n  cellNavigationMode?: CellNavigationMode | null;\n  enableVirtualization?: boolean | null;\n\n  /**\n   * Miscellaneous\n   */\n  /** The node where the editor portal should mount. */\n  editorPortalTarget?: Element | null;\n  rowClass?: ((row: R) => string | undefined | null) | null;\n  'data-testid'?: string;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n */\nfunction DataGrid<R, SR, K extends Key>(\n  {\n    // Grid and data Props\n    columns: rawColumns,\n    rows: rawRows,\n    summaryRows,\n    rowKeyGetter,\n    onRowsChange,\n    // Dimensions props\n    rowHeight,\n    headerRowHeight: rawHeaderRowHeight,\n    summaryRowHeight: rawSummaryRowHeight,\n    // Feature props\n    selectedRows,\n    onSelectedRowsChange,\n    sortColumns,\n    onSortColumnsChange,\n    defaultColumnOptions,\n    groupBy: rawGroupBy,\n    rowGrouper,\n    expandedGroupIds,\n    onExpandedGroupIdsChange,\n    // Custom renderers\n    rowRenderer,\n    emptyRowsRenderer: EmptyRowsRenderer,\n    // Event props\n    onRowClick,\n    onRowDoubleClick,\n    onScroll,\n    onColumnResize,\n    onSelectedCellChange,\n    onFill,\n    onPaste,\n    // Toggles and modes\n    cellNavigationMode: rawCellNavigationMode,\n    enableVirtualization,\n    // Miscellaneous\n    editorPortalTarget: rawEditorPortalTarget,\n    className,\n    style,\n    rowClass,\n    // ARIA\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy,\n    'data-testid': testId\n  }: DataGridProps<R, SR, K>,\n  ref: React.Ref<DataGridHandle>\n) {\n  /**\n   * defaults\n   */\n  rowHeight ??= 35;\n  const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === 'number' ? rowHeight : 35);\n  const RowRenderer = rowRenderer ?? Row;\n  const cellNavigationMode = rawCellNavigationMode ?? 'NONE';\n  enableVirtualization ??= true;\n  const editorPortalTarget = rawEditorPortalTarget ?? body;\n\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState<ReadonlyMap<string, number>>(() => new Map());\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>(\n    initialPosition\n  );\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n\n  /**\n   * refs\n   */\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const headerRowsCount = 1;\n  const summaryRowsCount = summaryRows?.length ?? 0;\n  const clientHeight = gridHeight - headerRowHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n\n  const allRowsSelected = useMemo((): boolean => {\n    // no rows to select = explicitely unchecked\n    const { length } = rawRows;\n    return (\n      length !== 0 &&\n      selectedRows != null &&\n      rowKeyGetter != null &&\n      selectedRows.size >= length &&\n      rawRows.every((row) => selectedRows.has(rowKeyGetter(row)))\n    );\n  }, [rawRows, selectedRows, rowKeyGetter]);\n\n  const {\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    layoutCssVars,\n    columnMetrics,\n    totalColumnWidth,\n    lastFrozenColumnIndex,\n    totalFrozenColumnWidth,\n    groupBy\n  } = useCalculatedColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization\n  });\n\n  const {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    totalRowHeight,\n    isGroupRow,\n    getRowTop,\n    getRowHeight,\n    findRowIdx\n  } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n\n  const viewportColumns = useViewportColumns({\n    columns,\n    colSpanColumns,\n    colOverscanStartIdx,\n    colOverscanEndIdx,\n    lastFrozenColumnIndex,\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    summaryRows,\n    isGroupRow\n  });\n\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const selectRowLatest = useLatestFunc(selectRow);\n  const selectAllRowsLatest = useLatestFunc(selectAllRows);\n  const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n  const selectCellLatest = useLatestFunc(\n    (row: R, column: CalculatedColumn<R, SR>, enableEditor: boolean | undefined | null) => {\n      const rowIdx = rows.indexOf(row);\n      selectCell({ rowIdx, idx: column.idx }, enableEditor);\n    }\n  );\n  const selectGroupLatest = useLatestFunc((rowIdx: number) => {\n    selectCell({ rowIdx, idx: -1 });\n  });\n  const toggleGroupLatest = useLatestFunc(toggleGroup);\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (\n      selectedPosition === prevSelectedPosition.current ||\n      selectedPosition.mode === 'EDIT' ||\n      !isCellWithinBounds(selectedPosition)\n    ) {\n      return;\n    }\n    prevSelectedPosition.current = selectedPosition;\n    scrollToCell(selectedPosition);\n  });\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToColumn(idx: number) {\n      scrollToCell({ idx });\n    },\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: getRowTop(rowIdx),\n        behavior: 'smooth'\n      });\n    },\n    selectCell\n  }));\n\n  /**\n   * callbacks\n   */\n  const handleColumnResize = useCallback(\n    (column: CalculatedColumn<R, SR>, width: number) => {\n      setColumnWidths((columnWidths) => {\n        const newColumnWidths = new Map(columnWidths);\n        newColumnWidths.set(column.key, width);\n        return newColumnWidths;\n      });\n\n      onColumnResize?.(column.idx, width);\n    },\n    [onColumnResize]\n  );\n\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n   * event handlers\n   */\n  function selectRow({ row, checked, isShiftClick }: SelectRowEvent<R>) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      const rowIdx = rows.indexOf(row);\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function selectAllRows(checked: boolean) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter<R, K>(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n\n    for (const row of rawRows) {\n      const rowKey = rowKeyGetter(row);\n      if (checked) {\n        newSelectedRows.add(rowKey);\n      } else {\n        newSelectedRows.delete(rowKey);\n      }\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function onGridFocus() {\n    if (isCellWithinBounds(selectedPosition)) return;\n    // Tabbing into the grid should initiate keyboard navigation\n    const initialPosition: SelectCellState = { idx: 0, rowIdx: 0, mode: 'SELECT' };\n    if (isCellWithinBounds(initialPosition)) {\n      setSelectedPosition(initialPosition);\n    }\n    // otherwise browser automatically scrolls to the selected cell\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>, isEditorPortalEvent = false) {\n    if (!(event.target instanceof Element)) return;\n    const isCellEvent = event.target.closest(`.${cellClassname}`) !== null;\n    const isRowEvent = hasGroups && event.target.classList.contains(rowClassname);\n    if (!isCellEvent && !isRowEvent && !isEditorPortalEvent) return;\n\n    const { key, keyCode } = event;\n    const row = rows[selectedPosition.rowIdx];\n\n    if (\n      onPaste &&\n      isCtrlKeyHeldDown(event) &&\n      isCellWithinBounds(selectedPosition) &&\n      !isGroupRow(row) &&\n      selectedPosition.idx !== -1 &&\n      selectedPosition.mode === 'SELECT'\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (\n      isCellWithinBounds(selectedPosition) &&\n      isGroupRow(row) &&\n      selectedPosition.idx === -1 &&\n      // Collapse the current group row if it is focused and is in expanded state\n      ((key === 'ArrowLeft' && row.isExpanded) ||\n        // Expand the current group row if it is focused and is in collapsed state\n        (key === 'ArrowRight' && !row.isExpanded))\n    ) {\n      event.preventDefault(); // Prevents scrolling\n      toggleGroup(row.id);\n      return;\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        closeEditor();\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    setScrollTop(scrollTop);\n    setScrollLeft(scrollLeft);\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function updateRow(rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    const rawRowIdx = getRawRowIdx(rowIdx);\n    if (row === rawRows[rawRowIdx]) return;\n    const updatedRows = [...rawRows];\n    updatedRows[rawRowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rawRowIdx],\n      column: columns[selectedPosition.idx]\n    });\n  }\n\n  function commitEditorChanges() {\n    if (\n      columns[selectedPosition.idx]?.editor == null ||\n      selectedPosition.mode === 'SELECT' ||\n      selectedPosition.row === selectedPosition.originalRow\n    ) {\n      return;\n    }\n\n    updateRow(selectedPosition.rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    setCopiedCell({ row: rawRows[getRawRowIdx(rowIdx)], columnKey: columns[idx].key });\n  }\n\n  function handlePaste() {\n    if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n      return;\n    }\n\n    const { idx, rowIdx } = selectedPosition;\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: columns[idx].key\n    });\n\n    updateRow(rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!isCellWithinBounds(selectedPosition) || selectedPosition.idx === -1) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key, shiftKey } = event;\n\n    if (selectedPosition.mode === 'EDIT') {\n      if (key === 'Enter') {\n        // Custom editors can listen for the event and stop propagation to prevent commit\n        commitEditorChanges();\n        closeEditor();\n      }\n      return;\n    }\n\n    // Select the row on Shift + Space\n    if (isSelectable && shiftKey && key === ' ') {\n      assertIsValidKeyGetter<R, K>(rowKeyGetter);\n      const rowKey = rowKeyGetter(row);\n      selectRow({ row, checked: !selectedRows!.has(rowKey), isShiftClick: false });\n      // do not scroll\n      event.preventDefault();\n      return;\n    }\n\n    const column = columns[selectedPosition.idx];\n    column.editorOptions?.onCellKeyDown?.(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        key,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  function handleEditorRowChange(row: R, commitChanges?: boolean) {\n    if (selectedPosition.mode === 'SELECT') return;\n    if (commitChanges) {\n      updateRow(selectedPosition.rowIdx, row);\n      closeEditor();\n    } else {\n      setSelectedPosition((position) => ({ ...position, row }));\n    }\n  }\n\n  function handleOnClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      commitEditorChanges();\n    }\n    closeEditor();\n  }\n\n  /**\n   * utils\n   */\n  function isCellWithinBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= 0 && rowIdx < rows.length && idx >= minColIdx && idx < columns.length;\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return (\n      isCellWithinBounds(position) &&\n      isSelectedCellEditable({ columns, rows, selectedPosition: position, isGroupRow })\n    );\n  }\n\n  function selectCell(position: Position, enableEditor?: boolean | null): void {\n    if (!isCellWithinBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', key: null, row, originalRow: row });\n    } else {\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n    onSelectedCellChange?.({ ...position });\n  }\n\n  function closeEditor() {\n    if (selectedPosition.mode === 'SELECT') return;\n    setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n  }\n\n  function scrollToCell({ idx, rowIdx }: Partial<Position>): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (typeof idx === 'number' && idx > lastFrozenColumnIndex) {\n      rowIdx ??= selectedPosition.rowIdx;\n      if (!isCellWithinBounds({ rowIdx, idx })) return;\n      const { clientWidth } = current;\n      const column = columns[idx];\n      const { left, width } = columnMetrics.get(column)!;\n      let right = left + width;\n      const row = rows[rowIdx];\n      if (!isGroupRow(row)) {\n        const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n        if (colSpan !== undefined) {\n          const { left, width } = columnMetrics.get(columns[column.idx + colSpan - 1])!;\n          right = left + width;\n        }\n      }\n\n      const isCellAtLeftBoundary = left < scrollLeft + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = right > clientWidth + scrollLeft;\n      if (isCellAtLeftBoundary) {\n        current.scrollLeft = left - totalFrozenColumnWidth;\n      } else if (isCellAtRightBoundary) {\n        current.scrollLeft = right - clientWidth;\n      }\n    }\n\n    if (typeof rowIdx === 'number') {\n      const rowTop = getRowTop(rowIdx);\n      const rowHeight = getRowHeight(rowIdx);\n      if (rowTop < scrollTop) {\n        // at top boundary, scroll to the row's top\n        current.scrollTop = rowTop;\n      } else if (rowTop + rowHeight > scrollTop + clientHeight) {\n        // at bottom boundary, scroll the next row's top to the bottom of the viewport\n        current.scrollTop = rowTop + rowHeight - clientHeight;\n      }\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = isCellWithinBounds(selectedPosition) && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (\n      key === 'ArrowLeft' &&\n      isRowSelected &&\n      isGroupRow(row) &&\n      !row.isExpanded &&\n      row.level !== 0\n    ) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case 'ArrowLeft':\n        return { idx: idx - 1, rowIdx };\n      case 'ArrowRight':\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return ctrlKey ? { idx: 0, rowIdx: 0 } : { idx: 0, rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return ctrlKey\n          ? { idx: columns.length - 1, rowIdx: rows.length - 1 }\n          : { idx: columns.length - 1, rowIdx };\n      case 'PageUp': {\n        const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n        return { idx, rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0 };\n      }\n      case 'PageDown': {\n        const nextRowY = getRowTop(rowIdx) + clientHeight;\n        return { idx, rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1 };\n      }\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (selectedPosition.mode === 'EDIT') {\n      const onNavigation =\n        columns[selectedPosition.idx].editorOptions?.onNavigation ?? onEditorNavigation;\n      if (!onNavigation(event)) return;\n    }\n    const { key, shiftKey } = event;\n    let mode = cellNavigationMode;\n    if (key === 'Tab') {\n      // If we are in a position to leave the grid, stop editing but stay in that cell\n      if (\n        canExitGrid({\n          shiftKey,\n          cellNavigationMode,\n          columns,\n          rowsCount: rows.length,\n          selectedPosition\n        })\n      ) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      mode = cellNavigationMode === 'NONE' ? 'CHANGE_ROW' : cellNavigationMode;\n    }\n\n    // Do not allow focus to leave\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    if (\n      nextPosition.rowIdx === selectedPosition.rowIdx &&\n      nextPosition.idx === selectedPosition.idx\n    ) {\n      return;\n    }\n\n    const nextSelectedCellPosition = getNextSelectedCellPosition({\n      columns,\n      colSpanColumns,\n      rows,\n      lastFrozenColumnIndex,\n      cellNavigationMode: mode,\n      currentPosition: selectedPosition,\n      nextPosition,\n      isCellWithinBounds,\n      isGroupRow\n    });\n\n    selectCell(nextSelectedCellPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver =\n      rowIdx < draggedOverRowIdx\n        ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n        : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getDragHandle(rowIdx: number) {\n    if (\n      selectedPosition.rowIdx !== rowIdx ||\n      selectedPosition.mode === 'EDIT' ||\n      hasGroups || // drag fill is not supported when grouping is enabled\n      onFill == null\n    ) {\n      return;\n    }\n\n    return (\n      <DragHandle\n        rows={rawRows}\n        columns={columns}\n        selectedPosition={selectedPosition}\n        isCellEditable={isCellEditable}\n        latestDraggedOverRowIdx={latestDraggedOverRowIdx}\n        onRowsChange={onRowsChange}\n        onFill={onFill}\n        setDragging={setDragging}\n        setDraggedOverRowIdx={setDraggedOverRowIdx}\n      />\n    );\n  }\n\n  function getCellEditor(rowIdx: number) {\n    if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === 'SELECT') return;\n\n    const { idx, row } = selectedPosition;\n    const column = columns[idx];\n    const colSpan = getColSpan(column, lastFrozenColumnIndex, { type: 'ROW', row });\n\n    return (\n      <EditCell\n        key={column.key}\n        column={column}\n        colSpan={colSpan}\n        row={row}\n        editorPortalTarget={editorPortalTarget}\n        onKeyDown={handleKeyDown}\n        onRowChange={handleEditorRowChange}\n        onClose={handleOnClose}\n      />\n    );\n  }\n\n  function getViewportRows() {\n    const rowElements = [];\n    let startRowIndex = 0;\n\n    const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n    const cellIsWithinBounds = isCellWithinBounds(selectedPosition);\n    const startRowIdx =\n      cellIsWithinBounds && selectedRowIdx < rowOverscanStartIdx\n        ? rowOverscanStartIdx - 1\n        : rowOverscanStartIdx;\n    const endRowIdx =\n      cellIsWithinBounds && selectedRowIdx > rowOverscanEndIdx\n        ? rowOverscanEndIdx + 1\n        : rowOverscanEndIdx;\n\n    for (let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++) {\n      const isRowOutsideViewport =\n        viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n      const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n\n      let rowColumns = viewportColumns;\n      const selectedColumn = columns[selectedIdx];\n      // selectedIdx can be -1 if grouping is enabled\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (selectedColumn !== undefined) {\n        if (isRowOutsideViewport) {\n          // if the row is outside the viewport then only render the selected cell\n          rowColumns = [selectedColumn];\n        } else if (selectedRowIdx === rowIdx && !viewportColumns.includes(selectedColumn)) {\n          // if the row is within the viewport and cell is not, add the selected column to viewport columns\n          rowColumns =\n            selectedIdx > viewportColumns[viewportColumns.length - 1].idx\n              ? [...viewportColumns, selectedColumn]\n              : [\n                  ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n                  selectedColumn,\n                  ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n                ];\n        }\n      }\n\n      const row = rows[rowIdx];\n      const top = getRowTop(rowIdx) + headerRowHeight;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        const isGroupRowSelected =\n          isSelectable && row.childRows.every((cr) => selectedRows?.has(rowKeyGetter!(cr)));\n        rowElements.push(\n          <GroupRowRenderer\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            aria-selected={isSelectable ? isGroupRowSelected : undefined}\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={rowColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            row={row}\n            top={top}\n            height={getRowHeight(rowIdx)}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n            isRowSelected={isGroupRowSelected}\n            selectGroup={selectGroupLatest}\n            toggleGroup={toggleGroupLatest}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      } else {\n        key = hasGroups ? startRowIndex : rowIdx;\n      }\n\n      rowElements.push(\n        <RowRenderer\n          aria-rowindex={headerRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1} // aria-rowindex is 1 based\n          aria-selected={isSelectable ? isRowSelected : undefined}\n          key={key}\n          rowIdx={rowIdx}\n          row={row}\n          viewportColumns={rowColumns}\n          isRowSelected={isRowSelected}\n          onRowClick={onRowClick}\n          onRowDoubleClick={onRowDoubleClick}\n          rowClass={rowClass}\n          top={top}\n          height={getRowHeight(rowIdx)}\n          copiedCellIdx={\n            copiedCell !== null && copiedCell.row === row\n              ? columns.findIndex((c) => c.key === copiedCell.columnKey)\n              : undefined\n          }\n          selectedCellIdx={selectedRowIdx === rowIdx ? selectedIdx : undefined}\n          draggedOverCellIdx={getDraggedOverCellIdx(rowIdx)}\n          setDraggedOverRowIdx={isDragging ? setDraggedOverRowIdx : undefined}\n          lastFrozenColumnIndex={lastFrozenColumnIndex}\n          onRowChange={handleFormatterRowChangeLatest}\n          selectCell={selectCellLatest}\n          selectedCellDragHandle={getDragHandle(rowIdx)}\n          selectedCellEditor={getCellEditor(rowIdx)}\n        />\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx >= columns.length || selectedPosition.rowIdx >= rows.length) {\n    setSelectedPosition(initialPosition);\n    setDraggedOverRowIdx(undefined);\n  }\n\n  if (\n    selectedPosition.mode === 'EDIT' &&\n    rows[selectedPosition.rowIdx] !== selectedPosition.originalRow\n  ) {\n    // Discard changes if rows are updated from outside\n    closeEditor();\n  }\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx(rootClassname, { [viewportDraggingClassname]: isDragging }, className)}\n      style={\n        {\n          ...style,\n          '--header-row-height': `${headerRowHeight}px`,\n          '--row-width': `${totalColumnWidth}px`,\n          '--summary-row-height': `${summaryRowHeight}px`,\n          ...layoutCssVars\n        } as unknown as React.CSSProperties\n      }\n      ref={gridRef}\n      onScroll={handleScroll}\n      onKeyDown={handleKeyDown}\n      data-testid={testId}\n    >\n      <HeaderRow\n        columns={viewportColumns}\n        onColumnResize={handleColumnResize}\n        allRowsSelected={allRowsSelected}\n        onAllRowsSelectionChange={selectAllRowsLatest}\n        sortColumns={sortColumns}\n        onSortColumnsChange={onSortColumnsChange}\n        lastFrozenColumnIndex={lastFrozenColumnIndex}\n      />\n      {rows.length === 0 && EmptyRowsRenderer ? (\n        <EmptyRowsRenderer />\n      ) : (\n        <>\n          {/*\n            An extra div is needed initially to set the focus\n            on the grid when there is no selected cell.\n           */}\n          {!isCellWithinBounds(selectedPosition) && (\n            <div className={focusSinkClassname} tabIndex={0} onFocus={onGridFocus} />\n          )}\n          <div style={{ height: max(totalRowHeight, clientHeight) }} />\n          <RowSelectionChangeProvider value={selectRowLatest}>\n            {getViewportRows()}\n          </RowSelectionChangeProvider>\n          {summaryRows?.map((row, rowIdx) => (\n            <SummaryRow\n              aria-rowindex={headerRowsCount + rowsCount + rowIdx + 1}\n              key={rowIdx}\n              rowIdx={rowIdx}\n              row={row}\n              bottom={summaryRowHeight * (summaryRows.length - 1 - rowIdx)}\n              viewportColumns={viewportColumns}\n              lastFrozenColumnIndex={lastFrozenColumnIndex}\n            />\n          ))}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown, K extends Key = Key>(\n  props: DataGridProps<R, SR, K> & RefAttributes<DataGridHandle>\n) => JSX.Element;\n","import { css } from '@linaria/core';\nimport type { EditorProps } from '../types';\n\nconst textEditor = css`\n  appearance: none;\n\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  padding: 0px 6px 0 6px;\n  border: 2px solid #ccc;\n  vertical-align: top;\n  color: var(--color);\n  background-color: var(--background-color);\n\n  font-family: inherit;\n  font-size: var(--font-size);\n\n  &:focus {\n    border-color: var(--selection-color);\n    outline: none;\n  }\n\n  &::placeholder {\n    color: #999;\n    opacity: 1;\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditor}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function TextEditor<TRow, TSummaryRow>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={(event) => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n"],"names":["cell","cellClassname","cellFrozen","cellFrozenClassname","cellFrozenLast","cellFrozenLastClassname","root","rootClassname","focusSink","focusSinkClassname","viewportDragging","viewportDraggingClassname","groupRow","groupRowClassname","groupRowSelected","groupRowSelectedClassname","headerRow","headerRowClassname","row","rowClassname","summaryRow","summaryRowClassname","useFocusRef","isSelected","ref","useRef","useLayoutEffect","current","focus","preventScroll","tabIndex","checkboxLabel","checkboxLabelClassname","checkboxInput","checkboxInputClassname","checkbox","checkboxClassname","checkboxLabelDisabled","checkboxLabelDisabledClassname","SelectCellFormatter","value","isCellSelected","disabled","onClick","onChange","ariaLabel","ariaLabelledBy","handleChange","e","target","checked","nativeEvent","shiftKey","_jsxs","clsx","_jsx","ValueFormatter","props","column","key","groupCellContent","groupCellContentClassname","caret","caretClassname","ToggleGroupFormatter","groupKey","isExpanded","toggleGroup","handleKeyDown","d","getColSpan","lastFrozenColumnIndex","args","colSpan","Number","isInteger","frozen","idx","undefined","stopPropagation","event","nonInputKeys","Set","isCtrlKeyHeldDown","ctrlKey","metaKey","isDefaultCellInput","has","onEditorNavigation","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","isSelectedCellEditable","selectedPosition","columns","rows","isGroupRow","rowIdx","isCellEditable","editor","rowGroup","editable","getNextSelectedCellPosition","cellNavigationMode","colSpanColumns","currentPosition","currentIdx","nextPosition","isCellWithinBounds","rowsCount","length","nextIdx","nextRowIdx","setColSpan","moveRight","colIdx","type","columnsCount","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","canExitGrid","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","min","max","floor","sign","Math","assertIsValidKeyGetter","keyGetter","Error","getCellStyle","gridColumnStart","gridColumnEnd","left","getCellClassname","extraClasses","isLastFrozenColumn","SELECT_COLUMN_KEY","SelectFormatter","isRowSelected","onRowSelectionChange","useRowSelection","isShiftClick","SelectGroupFormatter","SelectColumn","name","width","maxWidth","resizable","sortable","headerRenderer","allRowsSelected","onAllRowsSelectionChange","formatter","groupFormatter","useCalculatedColumns","rawColumns","columnWidths","viewportWidth","scrollLeft","defaultColumnOptions","rawGroupBy","enableVirtualization","minColumnWidth","minWidth","defaultFormatter","defaultSortable","defaultResizable","groupBy","useMemo","map","rawColumn","includes","sort","aKey","frozenA","bKey","frozenB","indexOf","forEach","push","layoutCssVars","totalColumnWidth","totalFrozenColumnWidth","columnMetrics","Map","templateColumns","allocatedWidth","unassignedColumnsCount","getSpecifiedWidth","clampColumnWidth","set","unallocatedWidth","unallocatedColumnWidth","columnMetric","get","i","colOverscanStartIdx","colOverscanEndIdx","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","colVisibleStartIdx","colVisibleEndIdx","test","parseInt","useCombinedRefs","refs","useCallback","handle","useGridDimensions","gridRef","gridWidth","setGridWidth","useState","gridHeight","setGridHeight","ResizeObserver","window","resizeObserver","clientWidth","clientHeight","devicePixelRatio","observe","disconnect","useLatestFunc","fn","useEffect","useRovingRef","isChildFocused","forceRender","onFocus","isFocused","RowSelectionContext","createContext","RowSelectionProvider","Provider","RowSelectionChangeContext","RowSelectionChangeProvider","rowSelectionContext","useContext","rowSelectionChangeContext","useViewportColumns","summaryRows","rowOverscanStartIdx","rowOverscanEndIdx","startIdx","updateStartIdx","viewportColumns","isReadonlyArray","arr","Array","isArray","useViewportRows","rawRows","rowHeight","scrollTop","rowGrouper","expandedGroupIds","groupedRows","groupRows","groupByKey","remainingGroupByKeys","startRowIndex","groupRowsCount","groups","childRows","Object","entries","childGroups","childRowsCount","allGroupRows","flattenedRows","expandGroup","parentId","level","keys","posInSet","id","setSize","add","totalRowHeight","getRowTop","getRowHeight","findRowIdx","offset","rowPositions","currentRowHeight","position","top","height","validateRowIdx","start","end","middle","currentOffset","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","headerSortCell","headerSortCellClassname","headerSortName","headerSortNameClassname","arrow","arrowClassname","SortableHeaderCell","onSort","sortDirection","priority","children","cellResizable","cellResizableClassname","HeaderCell","onResize","sortColumns","onSortColumnsChange","onPointerDown","pointerType","buttons","currentTarget","pointerId","right","getBoundingClientRect","clientX","onPointerMove","onPointerUp","removeEventListener","preventDefault","addEventListener","sortIndex","findIndex","columnKey","sortColumn","direction","ariaSort","ctrlClick","sortDescendingFirst","nextSort","nextSortColumn","nextSortColumns","splice","getCell","className","headerCellClass","HeaderRow","onColumnResize","cells","index","memo","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","Cell","isCopied","isDraggedOver","dragHandle","onRowClick","onRowDoubleClick","onRowChange","selectCell","cellClass","selectCellWrapper","openEditor","handleClick","editorOptions","editOnClick","handleContextMenu","handleDoubleClick","Row","selectedCellIdx","copiedCellIdx","draggedOverCellIdx","selectedCellEditor","selectedCellDragHandle","rowClass","setDraggedOverRowIdx","onMouseEnter","isRowFocused","rowRef","handleRowChange","newRow","handleDragEnter","forwardRef","GroupCell","groupColumnIndex","toggleGroupWrapper","isLevelMatching","cursor","GroupedRow","selectGroup","handleSelectGroup","SummaryCell","summaryFormatter","SummaryFormatter","summaryCellClass","SummaryRow","bottom","ariaRowIndex","cellEditing","EditCell","onClose","onKeyDown","editorPortalTarget","frameRequestRef","commitOnOutsideMouseDown","cancelFrameRequest","cancelAnimationFrame","onWindowCaptureMouseDown","requestAnimationFrame","capture","createPortal","content","cellDragHandle","cellDragHandleClassname","DragHandle","latestDraggedOverRowIdx","onRowsChange","onFill","setDragging","handleMouseDown","onMouseOver","onMouseUp","handleDragEnd","overRowIdx","endRowIndex","updateRows","startRowIdx","endRowIdx","sourceRow","updatedRows","indexes","updatedRow","targetRow","body","globalThis","document","initialPosition","mode","DataGrid","rowKeyGetter","headerRowHeight","rawHeaderRowHeight","summaryRowHeight","rawSummaryRowHeight","selectedRows","onSelectedRowsChange","onExpandedGroupIdsChange","rowRenderer","emptyRowsRenderer","EmptyRowsRenderer","onScroll","onSelectedCellChange","onPaste","rawCellNavigationMode","rawEditorPortalTarget","style","ariaDescribedBy","testId","RowRenderer","setScrollTop","setScrollLeft","setColumnWidths","setSelectedPosition","copiedCell","setCopiedCell","isDragging","draggedOverRowIdx","setOverRowIdx","prevSelectedPosition","lastSelectedRowIdx","headerRowsCount","summaryRowsCount","isSelectable","size","every","hasGroups","minColIdx","selectRowLatest","selectRow","selectAllRowsLatest","selectAllRows","handleFormatterRowChangeLatest","updateRow","selectCellLatest","enableEditor","selectGroupLatest","toggleGroupLatest","scrollToCell","useImperativeHandle","element","scrollToColumn","scrollToRow","scrollTo","behavior","handleColumnResize","newColumnWidths","newSelectedRows","childRow","rowKey","delete","previousRowIdx","step","expandedGroupId","newExpandedGroupIds","onGridFocus","isEditorPortalEvent","Element","isCellEvent","closest","isRowEvent","classList","contains","keyCode","cKey","vKey","handleCopy","handlePaste","closeEditor","navigate","handleCellInput","handleScroll","getRawRowIdx","rawRowIdx","commitEditorChanges","originalRow","updatedTargetRow","sourceColumnKey","targetColumnKey","onCellKeyDown","isDefaultPrevented","handleEditorRowChange","commitChanges","handleOnClose","isCellAtLeftBoundary","isCellAtRightBoundary","rowTop","getNextPosition","parentRowIdx","parentRow","nextRowY","onNavigation","nextSelectedCellPosition","getDraggedOverCellIdx","currentRowIdx","getDragHandle","getCellEditor","getViewportRows","rowElements","selectedIdx","selectedRowIdx","cellIsWithinBounds","viewportRowIdx","isRowOutsideViewport","rowColumns","selectedColumn","slice","isGroupRowSelected","cr","c","textEditor","textEditorClassname","autoFocusAndSelect","input","select","TextEditor"],"mappings":";;;;;;;;;AAAA,SAAS,WAAW,CAAC,GAAG,EAAE,GAAG,EAAE;AAC/B,EAAE,KAAK,GAAG,KAAK,KAAK,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC;AACjC,EAAE,IAAI,QAAQ,GAAG,GAAG,CAAC,QAAQ,CAAC;AAC9B;AACA,EAAE,IAAI,CAAC,GAAG,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE,EAAE,OAAO,EAAE;AAC1D;AACA,EAAE,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;AACvE,EAAE,IAAI,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;AAC9C,EAAE,KAAK,CAAC,IAAI,GAAG,UAAU,CAAC;AAC1B;AACA,EAAE,IAAI,QAAQ,KAAK,KAAK,EAAE;AAC1B,IAAI,IAAI,IAAI,CAAC,UAAU,EAAE;AACzB,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;AAChD,KAAK,MAAM;AACX,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AAC9B,KAAK;AACL,GAAG,MAAM;AACT,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AAC5B,GAAG;AACH;AACA,EAAE,IAAI,KAAK,CAAC,UAAU,EAAE;AACxB,IAAI,KAAK,CAAC,UAAU,CAAC,OAAO,GAAG,GAAG,CAAC;AACnC,GAAG,MAAM;AACT,IAAI,KAAK,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;AACpD,GAAG;AACH;;;;;ACvBO,MAAMA,IAAI,qBAAV;AAmBA,MAAMC,aAAa,eAAeD,MAAlC;AAEP,MAAME,UAAU,qBAAhB;AAMO,MAAMC,mBAAmB,sBAAsBD,YAA/C;AAEA,MAAME,cAAc,sBAApB;AAIA,MAAMC,uBAAuB,2BAA2BD,gBAAxD;;;;;ACAP,MAAME,IAAI,sBAAV;AAiDO,MAAMC,aAAa,UAAUD,MAA7B;AAEP,MAAME,SAAS,oBAAf;AASO,MAAMC,kBAAkB,qBAAqBD,WAA7C;AAEP,MAAME,gBAAgB,qBAAtB;AAMO,MAAMC,yBAAyB,4BAA4BD,kBAA3D;;;;;ACpGP,MAAME,QAAQ,sBAAd;AAUO,MAAMC,iBAAiB,oBAAoBD,UAA3C;AAEP,MAAME,gBAAgB,sBAAtB;AAsBO,MAAMC,yBAAyB,6BAA6BD,kBAA5D;;;;;ACnCP,MAAME,SAAS,sBAAf;AAiBO,MAAMC,kBAAkB,qBAAqBD,WAA7C;;;;;AChBA,MAAME,GAAG,sBAAT;AA0BA,MAAMC,YAAY,cAAcD,KAAhC;AAEP,MAAME,UAAU,qBAAhB;AAYO,MAAMC,mBAAmB,sBAAsBD,YAA/C;;ACzCA,SAASE,WAAT,CAAiDC,UAAjD,EAAsE;AAC3E,QAAMC,GAAG,GAAGC,YAAM,CAAI,IAAJ,CAAlB;AACAC,EAAAA,qBAAe,CAAC,MAAM;AAAA;;AACpB,QAAI,CAACH,UAAL,EAAiB;AACjB,oBAAAC,GAAG,CAACG,OAAJ,kCAAaC,KAAb,CAAmB;AAAEC,MAAAA,aAAa,EAAE;AAAjB,KAAnB;AACD,GAHc,EAGZ,CAACN,UAAD,CAHY,CAAf;AAKA,SAAO;AACLC,IAAAA,GADK;AAELM,IAAAA,QAAQ,EAAEP,UAAU,GAAG,CAAH,GAAO,CAAC;AAFvB,GAAP;AAID;;;;;ACTD,MAAMQ,aAAa,sBAAnB;AAaA,MAAMC,sBAAsB,yBAAyBD,eAArD;AAEA,MAAME,aAAa,sBAAnB;AAMA,MAAMC,sBAAsB,yBAAyBD,eAArD;AAEA,MAAME,QAAQ,qBAAd;AAiBA,MAAMC,iBAAiB,mBAAmBD,UAA1C;AAEA,MAAME,qBAAqB,sBAA3B;AASA,MAAMC,8BAA8B,kCAAkCD,uBAAtE;AAaO,SAASE,mBAAT,CAA6B;AAClCC,EAAAA,KADkC;AAElCC,EAAAA,cAFkC;AAGlCC,EAAAA,QAHkC;AAIlCC,EAAAA,OAJkC;AAKlCC,EAAAA,QALkC;gBAMpBC,SANoB;qBAOfC;AAPe,CAA7B,EAQsB;QACrB;AAAEtB,IAAAA,GAAF;AAAOM,IAAAA;AAAP,MAAoBR,WAAW,CAAmBmB,cAAnB;;WAE5BM,aAAaC,GAAwC;AAC5DJ,IAAAA,QAAQ,CAACI,CAAC,CAACC,MAAFD,CAASE,OAAV,EAAoBF,CAAC,CAACG,WAAH,CAA8BC,QAAjD,CAARR;;;sBAIAS;AAAO,IAAA,WAAWC,IAAI,CAACtB,sBAAD,EAA6DU,QAA7D,IAA4BJ,8BAA5B,CAAtB;AAAA,4BACEiB;AACE,oBAAYV,SADd;AAEE,yBAAiBC,cAFnB;AAGE,MAAA,KAAKtB,GAHP;AAIE,MAAA,MAAK,UAJP;AAKE,MAAA,UAAUM,QALZ;AAME,MAAA,WAAWI,sBANb;AAOE,MAAA,UAAUQ,QAPZ;AAQE,MAAA,SAASF,KARX;AASE,MAAA,UAAUO,YATZ;AAUE,MAAA,SAASJ;AAVX,MADF,eAaEY;AAAK,MAAA,WAAWnB;AAAhB,MAbF;AAAA;;;AClFG,SAASoB,cAAT,CAA+BC,KAA/B,EAA6D;AAClE,MAAI;AACF,wBAAOF;AAAA,gBAAGE,KAAK,CAACvC,GAAN,CAAUuC,KAAK,CAACC,MAAN,CAAaC,GAAvB;AAAH,MAAP;AACD,GAFD,CAEE,MAAM;AACN,WAAO,IAAP;AACD;AACF;;;;;ACJD,MAAMC,gBAAgB,qBAAtB;AAIA,MAAMC,yBAAyB,6BAA6BD,kBAA5D;AAEA,MAAME,KAAK,qBAAX;AAYA,MAAMC,cAAc,gBAAgBD,OAApC;AAEO,SAASE,oBAAT,CAAqC;AAC1CC,EAAAA,QAD0C;AAE1CC,EAAAA,UAF0C;AAG1CzB,EAAAA,cAH0C;AAI1C0B,EAAAA;AAJ0C,CAArC,EAKwB;QACvB;AAAE3C,IAAAA,GAAF;AAAOM,IAAAA;AAAP,MAAoBR,WAAW,CAAkBmB,cAAlB;;WAE5B2B,cAAc;AAAET,IAAAA;AAAF,KAA+C;QAChEA,GAAG,KAAK,SAAS;AACnBQ,MAAAA,WAAW;;;;QAITE,CAAC,GAAGH,UAAU,GAAG,mBAAH,GAAyB;sBAG3Cb;AACE,IAAA,KAAK7B,GADP;AAEE,IAAA,WAAWqC,yBAFb;AAGE,IAAA,UAAU/B,QAHZ;AAIE,IAAA,WAAWsC,aAJb;AAAA,eAMGH,QANH,eAOEV;AAAK,MAAA,SAAQ,UAAb;AAAwB,MAAA,OAAM,IAA9B;AAAmC,MAAA,QAAO,GAA1C;AAA8C,MAAA,WAAWQ,cAAzD;AAAyE,yBAAzE;AAAA,6BACER;AAAM,QAAA,GAAGc;AAAT;AADF,MAPF;AAAA;;;ACvCG,SAASC,UAAT,CACLZ,MADK,EAELa,qBAFK,EAGLC,IAHK,EAIe;AACpB,QAAMC,OAAO,GAAG,OAAOf,MAAM,CAACe,OAAd,KAA0B,UAA1B,GAAuCf,MAAM,CAACe,OAAP,CAAeD,IAAf,CAAvC,GAA8D,CAA9E;;AACA,MACEE,MAAM,CAACC,SAAP,CAAiBF,OAAjB,KACAA,OAAO,GAAI,CADX,KAGC,CAACf,MAAM,CAACkB,MAAR,IAAkBlB,MAAM,CAACmB,GAAP,GAAaJ,OAAb,GAAwB,CAAxB,IAA6BF,qBAHhD,CADF,EAKE;AACA,WAAOE,OAAP;AACD;;AACD,SAAOK,SAAP;AACD;;ACjBM,SAASC,eAAT,CAAyBC,KAAzB,EAAsD;AAC3DA,EAAAA,KAAK,CAACD,eAAN;AACD;;ACDD,MAAME,YAAY,GAAG,IAAIC,GAAJ,CAAQ,CAE3B,cAF2B,EAI3B,KAJ2B,EAK3B,UAL2B,EAM3B,UAN2B,EAO3B,SAP2B,EAQ3B,IAR2B,EAS3B,QAT2B,EAU3B,MAV2B,EAW3B,SAX2B,EAY3B,YAZ2B,EAa3B,OAb2B,EAe3B,KAf2B,EAiB3B,WAjB2B,EAkB3B,WAlB2B,EAmB3B,YAnB2B,EAoB3B,SApB2B,EAqB3B,KArB2B,EAsB3B,MAtB2B,EAuB3B,UAvB2B,EAwB3B,QAxB2B,EA0B3B,QA1B2B,EA4B3B,aA5B2B,EA6B3B,QA7B2B,EA8B3B,OA9B2B,EA+B3B,MA/B2B,EAiC3B,aAjC2B,EAmC3B,IAnC2B,EAqC3B,IArC2B,EAsC3B,IAtC2B,EAuC3B,IAvC2B,EAwC3B,IAxC2B,EAyC3B,IAzC2B,EA0C3B,IA1C2B,EA2C3B,IA3C2B,EA4C3B,KA5C2B,EA6C3B,KA7C2B,EA8C3B,KA9C2B,CAAR,CAArB;AAiDO,SAASC,iBAAT,CAA2BnC,CAA3B,EAA4D;AACjE,SAAO,CAACA,CAAC,CAACoC,OAAF,IAAapC,CAAC,CAACqC,OAAhB,KAA4BrC,CAAC,CAACW,GAAF,KAAU,SAA7C;AACD;AAEM,SAAS2B,kBAAT,CAA4BN,KAA5B,EAAiF;AACtF,SAAO,CAACC,YAAY,CAACM,GAAb,CAAiBP,KAAK,CAACrB,GAAvB,CAAR;AACD;AAQM,SAAS6B,kBAAT,CAA4B;AAAE7B,EAAAA,GAAF;AAAOV,EAAAA;AAAP,CAA5B,EAA2F;AAChG,MACEU,GAAG,KAAK,KAAR,KACCV,MAAM,YAAYwC,gBAAlB,IACCxC,MAAM,YAAYyC,mBADnB,IAECzC,MAAM,YAAY0C,iBAHpB,CADF,EAKE;AACA,WAAO1C,MAAM,CAAC2C,OAAP,CACL,6FADK,CAAP;AAGD;;AACD,SAAO,KAAP;AACD;;AClEM,SAASC,sBAAT,CAAuC;AAC5CC,EAAAA,gBAD4C;AAE5CC,EAAAA,OAF4C;AAG5CC,EAAAA,IAH4C;AAI5CC,EAAAA;AAJ4C,CAAvC,EAKwC;AAC7C,QAAMvC,MAAM,GAAGqC,OAAO,CAACD,gBAAgB,CAACjB,GAAlB,CAAtB;AACA,QAAM3D,GAAG,GAAG8E,IAAI,CAACF,gBAAgB,CAACI,MAAlB,CAAhB;AACA,SAAO,CAACD,UAAU,CAAC/E,GAAD,CAAX,IAAoBiF,cAAc,CAACzC,MAAD,EAASxC,GAAT,CAAzC;AACD;AAEM,SAASiF,cAAT,CAA+BzC,MAA/B,EAAgExC,GAAhE,EAAiF;AACtF,SACEwC,MAAM,CAAC0C,MAAP,IAAiB,IAAjB,IACA,CAAC1C,MAAM,CAAC2C,QADR,IAEA,CAAC,OAAO3C,MAAM,CAAC4C,QAAd,KAA2B,UAA3B,GAAwC5C,MAAM,CAAC4C,QAAP,CAAgBpF,GAAhB,CAAxC,GAA+DwC,MAAM,CAAC4C,QAAvE,MAAqF,KAHvF;AAKD;AAcM,SAASC,2BAAT,CAA4C;AACjDC,EAAAA,kBADiD;AAEjDT,EAAAA,OAFiD;AAGjDU,EAAAA,cAHiD;AAIjDT,EAAAA,IAJiD;AAKjDU,EAAAA,eAAe,EAAE;AAAE7B,IAAAA,GAAG,EAAE8B;AAAP,GALgC;AAMjDC,EAAAA,YANiD;AAOjDrC,EAAAA,qBAPiD;AAQjDsC,EAAAA,kBARiD;AASjDZ,EAAAA;AATiD,CAA5C,EAU8C;AACnD,QAAMa,SAAS,GAAGd,IAAI,CAACe,MAAvB;AACA,MAAI;AAAElC,IAAAA,GAAG,EAAEmC,OAAP;AAAgBd,IAAAA,MAAM,EAAEe;AAAxB,MAAuCL,YAA3C;;AAEA,QAAMM,UAAU,GAAIC,SAAD,IAAwB;AACzC,UAAMjG,GAAG,GAAG8E,IAAI,CAACiB,UAAD,CAAhB;AACA,QAAIhB,UAAU,CAAC/E,GAAD,CAAd,EAAqB;;AAGrB,SAAK,MAAMwC,MAAX,IAAqB+C,cAArB,EAAqC;AACnC,YAAMW,MAAM,GAAG1D,MAAM,CAACmB,GAAtB;AACA,UAAIuC,MAAM,GAAGJ,OAAb,EAAsB;AACtB,YAAMvC,OAAO,GAAGH,UAAU,CAACZ,MAAD,EAASa,qBAAT,EAAgC;AAAE8C,QAAAA,IAAI,EAAE,KAAR;AAAenG,QAAAA;AAAf,OAAhC,CAA1B;;AACA,UAAIuD,OAAO,IAAIuC,OAAO,GAAGI,MAArB,IAA+BJ,OAAO,GAAGvC,OAAO,GAAG2C,MAAvD,EAA+D;AAC7DJ,QAAAA,OAAO,GAAGI,MAAM,IAAID,SAAS,GAAG1C,OAAH,GAAa,CAA1B,CAAhB;AACA;AACD;AACF;AACF,GAdD;;AAgBA,MAAIoC,kBAAkB,CAACD,YAAD,CAAtB,EAAsC;AACpCM,IAAAA,UAAU,CAACF,OAAO,GAAGL,UAAV,GAAuB,CAAxB,CAAV;AACD;;AAED,MAAIH,kBAAkB,KAAK,MAA3B,EAAmC;AACjC,UAAMc,YAAY,GAAGvB,OAAO,CAACgB,MAA7B;AACA,UAAMQ,iBAAiB,GAAGP,OAAO,KAAKM,YAAtC;AACA,UAAME,mBAAmB,GAAGR,OAAO,KAAK,CAAC,CAAzC;;AAEA,QAAIO,iBAAJ,EAAuB;AACrB,UAAIf,kBAAkB,KAAK,YAA3B,EAAyC;AACvC,cAAMiB,SAAS,GAAGR,UAAU,KAAKH,SAAS,GAAG,CAA7C;;AACA,YAAI,CAACW,SAAL,EAAgB;AACdT,UAAAA,OAAO,GAAG,CAAV;AACAC,UAAAA,UAAU,IAAI,CAAd;AACD;AACF,OAND,MAMO;AACLD,QAAAA,OAAO,GAAG,CAAV;AACD;AACF,KAVD,MAUO,IAAIQ,mBAAJ,EAAyB;AAC9B,UAAIhB,kBAAkB,KAAK,YAA3B,EAAyC;AACvC,cAAMkB,UAAU,GAAGT,UAAU,KAAK,CAAlC;;AACA,YAAI,CAACS,UAAL,EAAiB;AACfT,UAAAA,UAAU,IAAI,CAAd;AACAD,UAAAA,OAAO,GAAGM,YAAY,GAAG,CAAzB;AACD;AACF,OAND,MAMO;AACLN,QAAAA,OAAO,GAAGM,YAAY,GAAG,CAAzB;AACD;;AACDJ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF;;AAED,SAAO;AAAErC,IAAAA,GAAG,EAAEmC,OAAP;AAAgBd,IAAAA,MAAM,EAAEe;AAAxB,GAAP;AACD;AAUM,SAASU,WAAT,CAA4B;AACjCnB,EAAAA,kBADiC;AAEjCT,EAAAA,OAFiC;AAGjCe,EAAAA,SAHiC;AAIjChB,EAAAA,gBAAgB,EAAE;AAAEI,IAAAA,MAAF;AAAUrB,IAAAA;AAAV,GAJe;AAKjCzB,EAAAA;AALiC,CAA5B,EAM6B;AAGlC,MAAIoD,kBAAkB,KAAK,MAAvB,IAAiCA,kBAAkB,KAAK,YAA5D,EAA0E;AACxE,UAAMoB,eAAe,GAAG/C,GAAG,KAAKkB,OAAO,CAACgB,MAAR,GAAiB,CAAjD;AACA,UAAMc,gBAAgB,GAAGhD,GAAG,KAAK,CAAjC;AACA,UAAMiD,SAAS,GAAG5B,MAAM,KAAKY,SAAS,GAAG,CAAzC;AACA,UAAMiB,UAAU,GAAG7B,MAAM,KAAK,CAA9B;AAEA,WAAO9C,QAAQ,GAAGyE,gBAAgB,IAAIE,UAAvB,GAAoCH,eAAe,IAAIE,SAAtE;AACD;;AAED,SAAO,KAAP;AACD;;AC5HM,MAAM;AAAEE,EAAAA,GAAF;AAAOC,EAAAA,GAAP;AAAYC,EAAAA,KAAZ;AAAmBC,EAAAA;AAAnB,IAA4BC,IAAlC;AAEA,SAASC,sBAAT,CACLC,SADK,EAE+B;AACpC,MAAI,OAAOA,SAAP,KAAqB,UAAzB,EAAqC;AACnC,UAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACD;AACF;AAEM,SAASC,YAAT,CACL9E,MADK,EAELe,OAFK,EAGgB;AACrB,SAAO;AACLgE,IAAAA,eAAe,EAAE/E,MAAM,CAACmB,GAAP,GAAa,CADzB;AAEL6D,IAAAA,aAAa,EAAEjE,OAAO,KAAKK,SAAZ,GAAyB,QAAOL,OAAQ,EAAxC,GAA4CK,SAFtD;AAGL6D,IAAAA,IAAI,EAAEjF,MAAM,CAACkB,MAAP,GAAiB,qBAAoBlB,MAAM,CAACmB,GAAI,GAAhD,GAAqDC;AAHtD,GAAP;AAKD;AAEM,SAAS8D,gBAAT,CACLlF,MADK,EAEL,GAAGmF,YAFE,EAGG;AACR,SAAOvF,IAAI,CACTrD,aADS,EAMT,GAAG4I,YANM,EAGgBnF,MAAM,CAACkB,MAHvB,IAGNzE,mBAHM,EAIoBuD,MAAM,CAACoF,kBAJ3B,IAINzI,uBAJM,CAAX;AAQD;;MCtCY0I,iBAAiB,GAAG;;AAEjC,SAASC,eAAT,CAAyBvF,KAAzB,EAAyD;AACvD,QAAM,CAACwF,aAAD,EAAgBC,oBAAhB,IAAwCC,eAAe,EAA7D;AAEA,sBACE5F,eAAC,mBAAD;AACE,kBAAW,QADb;AAEE,IAAA,cAAc,EAAEE,KAAK,CAAChB,cAFxB;AAGE,IAAA,KAAK,EAAEwG,aAHT;AAIE,IAAA,OAAO,EAAElE,eAJX;AAKE,IAAA,QAAQ,EAAE,CAAC7B,OAAD,EAAUkG,YAAV,KAA2B;AACnCF,MAAAA,oBAAoB,CAAC;AAAEhI,QAAAA,GAAG,EAAEuC,KAAK,CAACvC,GAAb;AAAkBgC,QAAAA,OAAlB;AAA2BkG,QAAAA;AAA3B,OAAD,CAApB;AACD;AAPH,IADF;AAWD;;AAED,SAASC,oBAAT,CAA8B5F,KAA9B,EAAmE;AACjE,QAAM,CAACwF,aAAD,EAAgBC,oBAAhB,IAAwCC,eAAe,EAA7D;AAEA,sBACE5F,eAAC,mBAAD;AACE,kBAAW,cADb;AAEE,IAAA,cAAc,EAAEE,KAAK,CAAChB,cAFxB;AAGE,IAAA,KAAK,EAAEwG,aAHT;AAIE,IAAA,QAAQ,EAAG/F,OAAD,IAAa;AACrBgG,MAAAA,oBAAoB,CAAC;AAAEhI,QAAAA,GAAG,EAAEuC,KAAK,CAACvC,GAAb;AAAkBgC,QAAAA,OAAlB;AAA2BkG,QAAAA,YAAY,EAAE;AAAzC,OAAD,CAApB;AACD,KANH;AAQE,IAAA,OAAO,EAAErE;AARX,IADF;AAYD;;MAGYuE,YAA8B,GAAG;AAC5C3F,EAAAA,GAAG,EAAEoF,iBADuC;AAE5CQ,EAAAA,IAAI,EAAE,EAFsC;AAG5CC,EAAAA,KAAK,EAAE,EAHqC;AAI5CC,EAAAA,QAAQ,EAAE,EAJkC;AAK5CC,EAAAA,SAAS,EAAE,KALiC;AAM5CC,EAAAA,QAAQ,EAAE,KANkC;AAO5C/E,EAAAA,MAAM,EAAE,IAPoC;;AAQ5CgF,EAAAA,cAAc,CAACnG,KAAD,EAAQ;AACpB,wBACEF,eAAC,mBAAD;AACE,oBAAW,YADb;AAEE,MAAA,cAAc,EAAE,KAFlB;AAGE,MAAA,KAAK,EAAEE,KAAK,CAACoG,eAHf;AAIE,MAAA,QAAQ,EAAEpG,KAAK,CAACqG;AAJlB,MADF;AAQD,GAjB2C;;AAkB5CC,EAAAA,SAAS,EAAEf,eAlBiC;AAmB5CgB,EAAAA,cAAc,EAAEX;AAnB4B;;ACfvC,SAASY,oBAAT,CAAqC;AAC1CC,EAAAA,UAD0C;AAE1CC,EAAAA,YAF0C;AAG1CC,EAAAA,aAH0C;AAI1CC,EAAAA,UAJ0C;AAK1CC,EAAAA,oBAL0C;AAM1CC,EAAAA,UAN0C;AAO1CC,EAAAA;AAP0C,CAArC,EAQ0B;AAAA;;AAC/B,QAAMC,cAAc,4BAAGH,oBAAH,oBAAGA,oBAAoB,CAAEI,QAAzB,oCAAqC,EAAzD;AACA,QAAMC,gBAAgB,6BAAGL,oBAAH,oBAAGA,oBAAoB,CAAEP,SAAzB,qCAAsCvG,cAA5D;AACA,QAAMoH,eAAe,6BAAGN,oBAAH,oBAAGA,oBAAoB,CAAEX,QAAzB,qCAAqC,KAA1D;AACA,QAAMkB,gBAAgB,6BAAGP,oBAAH,oBAAGA,oBAAoB,CAAEZ,SAAzB,qCAAsC,KAA5D;AAEA,QAAM;AAAE3D,IAAAA,OAAF;AAAWU,IAAAA,cAAX;AAA2BlC,IAAAA,qBAA3B;AAAkDuG,IAAAA;AAAlD,MAA8DC,aAAO,CAAC,MAKvE;AAEH,UAAMD,OAAiB,GAAG,EAA1B;AACA,QAAIvG,qBAAqB,GAAG,CAAC,CAA7B;AAEA,UAAMwB,OAAO,GAAGmE,UAAU,CAACc,GAAX,CAAgBC,SAAD,IAAe;AAAA;;AAC5C,YAAM5E,QAAQ,2BAAGkE,UAAH,oBAAGA,UAAU,CAAEW,QAAZ,CAAqBD,SAAS,CAACtH,GAA/B,CAAH,mCAA0C,KAAxD;AAEA,YAAMiB,MAAM,GAAGyB,QAAQ,IAAI4E,SAAS,CAACrG,MAAtB,IAAgC,KAA/C;AAEA,YAAMlB,MAAwC,GAAG,EAC/C,GAAGuH,SAD4C;AAE/CpG,QAAAA,GAAG,EAAE,CAF0C;AAG/CD,QAAAA,MAH+C;AAI/CkE,QAAAA,kBAAkB,EAAE,KAJ2B;AAK/CzC,QAAAA,QAL+C;AAM/CsD,QAAAA,QAAQ,yBAAEsB,SAAS,CAACtB,QAAZ,kCAAwBiB,eANe;AAO/ClB,QAAAA,SAAS,0BAAEuB,SAAS,CAACvB,SAAZ,mCAAyBmB,gBAPa;AAQ/Cd,QAAAA,SAAS,0BAAEkB,SAAS,CAAClB,SAAZ,mCAAyBY;AARa,OAAjD;;AAWA,UAAItE,QAAJ,EAAc;AAAA;;AACZ,iCAAA3C,MAAM,CAACsG,cAAP,oCAAAtG,MAAM,CAACsG,cAAP,GAA0BhG,oBAA1B;AACD;;AAED,UAAIY,MAAJ,EAAY;AACVL,QAAAA,qBAAqB;AACtB;;AAED,aAAOb,MAAP;AACD,KAzBe,CAAhB;AA2BAqC,IAAAA,OAAO,CAACoF,IAAR,CAAa,CAAC;AAAExH,MAAAA,GAAG,EAAEyH,IAAP;AAAaxG,MAAAA,MAAM,EAAEyG;AAArB,KAAD,EAAiC;AAAE1H,MAAAA,GAAG,EAAE2H,IAAP;AAAa1G,MAAAA,MAAM,EAAE2G;AAArB,KAAjC,KAAoE;AAE/E,UAAIH,IAAI,KAAKrC,iBAAb,EAAgC,OAAO,CAAC,CAAR;AAChC,UAAIuC,IAAI,KAAKvC,iBAAb,EAAgC,OAAO,CAAP;;AAGhC,UAAIwB,UAAJ,YAAIA,UAAU,CAAEW,QAAZ,CAAqBE,IAArB,CAAJ,EAAgC;AAC9B,YAAIb,UAAU,CAACW,QAAX,CAAoBI,IAApB,CAAJ,EAA+B;AAC7B,iBAAOf,UAAU,CAACiB,OAAX,CAAmBJ,IAAnB,IAA2Bb,UAAU,CAACiB,OAAX,CAAmBF,IAAnB,CAAlC;AACD;;AACD,eAAO,CAAC,CAAR;AACD;;AACD,UAAIf,UAAJ,YAAIA,UAAU,CAAEW,QAAZ,CAAqBI,IAArB,CAAJ,EAAgC,OAAO,CAAP;;AAGhC,UAAID,OAAJ,EAAa;AACX,YAAIE,OAAJ,EAAa,OAAO,CAAP;AACb,eAAO,CAAC,CAAR;AACD;;AACD,UAAIA,OAAJ,EAAa,OAAO,CAAP;AAGb,aAAO,CAAP;AACD,KAvBD;AAyBA,UAAM9E,cAAyC,GAAG,EAAlD;AACAV,IAAAA,OAAO,CAAC0F,OAAR,CAAgB,CAAC/H,MAAD,EAASmB,GAAT,KAAiB;AAC/BnB,MAAAA,MAAM,CAACmB,GAAP,GAAaA,GAAb;;AAEA,UAAInB,MAAM,CAAC2C,QAAX,EAAqB;AACnByE,QAAAA,OAAO,CAACY,IAAR,CAAahI,MAAM,CAACC,GAApB;AACD;;AAED,UAAID,MAAM,CAACe,OAAP,IAAkB,IAAtB,EAA4B;AAC1BgC,QAAAA,cAAc,CAACiF,IAAf,CAAoBhI,MAApB;AACD;AACF,KAVD;;AAYA,QAAIa,qBAAqB,KAAK,CAAC,CAA/B,EAAkC;AAChCwB,MAAAA,OAAO,CAACxB,qBAAD,CAAP,CAA+BuE,kBAA/B,GAAoD,IAApD;AACD;;AAED,WAAO;AACL/C,MAAAA,OADK;AAELU,MAAAA,cAFK;AAGLlC,MAAAA,qBAHK;AAILuG,MAAAA;AAJK,KAAP;AAMD,GArF0E,EAqFxE,CAACZ,UAAD,EAAaS,gBAAb,EAA+BE,gBAA/B,EAAiDD,eAAjD,EAAkEL,UAAlE,CArFwE,CAA3E;AAuFA,QAAM;AAAEoB,IAAAA,aAAF;AAAiBC,IAAAA,gBAAjB;AAAmCC,IAAAA,sBAAnC;AAA2DC,IAAAA;AAA3D,MAA6Ef,aAAO,CAAC,MAKtF;AACH,UAAMe,aAAa,GAAG,IAAIC,GAAJ,EAAtB;AACA,QAAIpD,IAAI,GAAG,CAAX;AACA,QAAIiD,gBAAgB,GAAG,CAAvB;AACA,QAAIC,sBAAsB,GAAG,CAA7B;AACA,QAAIG,eAAe,GAAG,EAAtB;AACA,QAAIC,cAAc,GAAG,CAArB;AACA,QAAIC,sBAAsB,GAAG,CAA7B;;AAEA,SAAK,MAAMxI,MAAX,IAAqBqC,OAArB,EAA8B;AAC5B,UAAIyD,KAAK,GAAG2C,iBAAiB,CAACzI,MAAD,EAASyG,YAAT,EAAuBC,aAAvB,CAA7B;;AAEA,UAAIZ,KAAK,KAAK1E,SAAd,EAAyB;AACvBoH,QAAAA,sBAAsB;AACvB,OAFD,MAEO;AACL1C,QAAAA,KAAK,GAAG4C,gBAAgB,CAAC5C,KAAD,EAAQ9F,MAAR,EAAgB+G,cAAhB,CAAxB;AACAwB,QAAAA,cAAc,IAAIzC,KAAlB;AACAsC,QAAAA,aAAa,CAACO,GAAd,CAAkB3I,MAAlB,EAA0B;AAAE8F,UAAAA,KAAF;AAASb,UAAAA,IAAI,EAAE;AAAf,SAA1B;AACD;AACF;;AAED,UAAM2D,gBAAgB,GAAGlC,aAAa,GAAG6B,cAAzC;AACA,UAAMM,sBAAsB,GAAGD,gBAAgB,GAAGJ,sBAAlD;;AAEA,SAAK,MAAMxI,MAAX,IAAqBqC,OAArB,EAA8B;AAC5B,UAAIyD,KAAJ;;AACA,UAAIsC,aAAa,CAACvG,GAAd,CAAkB7B,MAAlB,CAAJ,EAA+B;AAC7B,cAAM8I,YAAY,GAAGV,aAAa,CAACW,GAAd,CAAkB/I,MAAlB,CAArB;AACA8I,QAAAA,YAAY,CAAC7D,IAAb,GAAoBA,IAApB;AACA,SAAC;AAAEa,UAAAA;AAAF,YAAYgD,YAAb;AACD,OAJD,MAIO;AACLhD,QAAAA,KAAK,GAAG4C,gBAAgB,CAACG,sBAAD,EAAyB7I,MAAzB,EAAiC+G,cAAjC,CAAxB;AACAqB,QAAAA,aAAa,CAACO,GAAd,CAAkB3I,MAAlB,EAA0B;AAAE8F,UAAAA,KAAF;AAASb,UAAAA;AAAT,SAA1B;AACD;;AACDiD,MAAAA,gBAAgB,IAAIpC,KAApB;AACAb,MAAAA,IAAI,IAAIa,KAAR;AACAwC,MAAAA,eAAe,IAAK,GAAExC,KAAM,KAA5B;AACD;;AAED,QAAIjF,qBAAqB,KAAK,CAAC,CAA/B,EAAkC;AAChC,YAAMiI,YAAY,GAAGV,aAAa,CAACW,GAAd,CAAkB1G,OAAO,CAACxB,qBAAD,CAAzB,CAArB;AACAsH,MAAAA,sBAAsB,GAAGW,YAAY,CAAC7D,IAAb,GAAoB6D,YAAY,CAAChD,KAA1D;AACD;;AAED,UAAMmC,aAAqC,GAAG;AAC5C,4BAAsBK;AADsB,KAA9C;;AAIA,SAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAInI,qBAArB,EAA4CmI,CAAC,EAA7C,EAAiD;AAC/C,YAAMhJ,MAAM,GAAGqC,OAAO,CAAC2G,CAAD,CAAtB;AACAf,MAAAA,aAAa,CAAE,iBAAgBjI,MAAM,CAACmB,GAAI,EAA7B,CAAb,GAAgD,GAAEiH,aAAa,CAACW,GAAd,CAAkB/I,MAAlB,EAA2BiF,IAAK,IAAlF;AACD;;AAED,WAAO;AAAEgD,MAAAA,aAAF;AAAiBC,MAAAA,gBAAjB;AAAmCC,MAAAA,sBAAnC;AAA2DC,MAAAA;AAA3D,KAAP;AACD,GA3DyF,EA2DvF,CAAC3B,YAAD,EAAepE,OAAf,EAAwBqE,aAAxB,EAAuCK,cAAvC,EAAuDlG,qBAAvD,CA3DuF,CAA1F;AA6DA,QAAM,CAACoI,mBAAD,EAAsBC,iBAAtB,IAA2C7B,aAAO,CAAC,MAAwB;AAC/E,QAAI,CAACP,oBAAL,EAA2B;AACzB,aAAO,CAAC,CAAD,EAAIzE,OAAO,CAACgB,MAAR,GAAiB,CAArB,CAAP;AACD;;AAED,UAAM8F,YAAY,GAAGxC,UAAU,GAAGwB,sBAAlC;AACA,UAAMiB,aAAa,GAAGzC,UAAU,GAAGD,aAAnC;AAEA,UAAM2C,UAAU,GAAGhH,OAAO,CAACgB,MAAR,GAAiB,CAApC;AACA,UAAMiG,sBAAsB,GAAGhF,GAAG,CAACzD,qBAAqB,GAAG,CAAzB,EAA4BwI,UAA5B,CAAlC;;AAGA,QAAIF,YAAY,IAAIC,aAApB,EAAmC;AACjC,aAAO,CAACE,sBAAD,EAAyBA,sBAAzB,CAAP;AACD;;AAGD,QAAIC,kBAAkB,GAAGD,sBAAzB;;AACA,WAAOC,kBAAkB,GAAGF,UAA5B,EAAwC;AACtC,YAAM;AAAEpE,QAAAA,IAAF;AAAQa,QAAAA;AAAR,UAAkBsC,aAAa,CAACW,GAAd,CAAkB1G,OAAO,CAACkH,kBAAD,CAAzB,CAAxB;;AAGA,UAAItE,IAAI,GAAGa,KAAP,GAAeqD,YAAnB,EAAiC;AAC/B;AACD;;AACDI,MAAAA,kBAAkB;AACnB;;AAGD,QAAIC,gBAAgB,GAAGD,kBAAvB;;AACA,WAAOC,gBAAgB,GAAGH,UAA1B,EAAsC;AACpC,YAAM;AAAEpE,QAAAA,IAAF;AAAQa,QAAAA;AAAR,UAAkBsC,aAAa,CAACW,GAAd,CAAkB1G,OAAO,CAACmH,gBAAD,CAAzB,CAAxB;;AAGA,UAAIvE,IAAI,GAAGa,KAAP,IAAgBsD,aAApB,EAAmC;AACjC;AACD;;AACDI,MAAAA,gBAAgB;AACjB;;AAED,UAAMP,mBAAmB,GAAG1E,GAAG,CAAC+E,sBAAD,EAAyBC,kBAAkB,GAAG,CAA9C,CAA/B;AACA,UAAML,iBAAiB,GAAG5E,GAAG,CAAC+E,UAAD,EAAaG,gBAAgB,GAAG,CAAhC,CAA7B;AAEA,WAAO,CAACP,mBAAD,EAAsBC,iBAAtB,CAAP;AACD,GA5CuD,EA4CrD,CACDd,aADC,EAED/F,OAFC,EAGDxB,qBAHC,EAID8F,UAJC,EAKDwB,sBALC,EAMDzB,aANC,EAODI,oBAPC,CA5CqD,CAAxD;AAsDA,SAAO;AACLzE,IAAAA,OADK;AAELU,IAAAA,cAFK;AAGLkG,IAAAA,mBAHK;AAILC,IAAAA,iBAJK;AAKLjB,IAAAA,aALK;AAMLG,IAAAA,aANK;AAOLF,IAAAA,gBAPK;AAQLrH,IAAAA,qBARK;AASLsH,IAAAA,sBATK;AAULf,IAAAA;AAVK,GAAP;AAYD;;AAED,SAASqB,iBAAT,CACE;AAAExI,EAAAA,GAAF;AAAO6F,EAAAA;AAAP,CADF,EAEEW,YAFF,EAGEC,aAHF,EAIsB;AACpB,MAAID,YAAY,CAAC5E,GAAb,CAAiB5B,GAAjB,CAAJ,EAA2B;AAEzB,WAAOwG,YAAY,CAACsC,GAAb,CAAiB9I,GAAjB,CAAP;AACD;;AACD,MAAI,OAAO6F,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOA,KAAP;AACD;;AACD,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,SAAS2D,IAAT,CAAc3D,KAAd,CAAjC,EAAuD;AACrD,WAAOtB,KAAK,CAAEkC,aAAa,GAAGgD,QAAQ,CAAC5D,KAAD,EAAQ,EAAR,CAAzB,GAAwC,GAAzC,CAAZ;AACD;;AACD,SAAO1E,SAAP;AACD;;AAED,SAASsH,gBAAT,CACE5C,KADF,EAEE;AAAEkB,EAAAA,QAAF;AAAYjB,EAAAA;AAAZ,CAFF,EAGEgB,cAHF,EAIU;AACRjB,EAAAA,KAAK,GAAGvB,GAAG,CAACuB,KAAD,EAAQkB,QAAR,WAAQA,QAAR,GAAoBD,cAApB,CAAX;;AAEA,MAAI,OAAOhB,QAAP,KAAoB,QAAxB,EAAkC;AAChC,WAAOzB,GAAG,CAACwB,KAAD,EAAQC,QAAR,CAAV;AACD;;AAED,SAAOD,KAAP;AACD;;AC5RM,SAAS6D,eAAT,CAA4B,GAAGC,IAA/B,EAA8D;AACnE,SAAOC,iBAAW,CACfC,MAAD,IAAsB;AACpB,SAAK,MAAMhM,GAAX,IAAkB8L,IAAlB,EAAwB;AACtB,UAAI,OAAO9L,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,QAAAA,GAAG,CAACgM,MAAD,CAAH;AACD,OAFD,MAEO,IAAIhM,GAAG,KAAK,IAAZ,EAAkB;AAEvBA,QAAAA,GAAG,CAACG,OAAJ,GAAc6L,MAAd;AACD;AACF;AACF,GAVe,EAYhBF,IAZgB,CAAlB;AAcD;;ACfM,SAASG,iBAAT,GAIL;AACA,QAAMC,OAAO,GAAGjM,YAAM,CAAiB,IAAjB,CAAtB;AACA,QAAM,CAACkM,SAAD,EAAYC,YAAZ,IAA4BC,cAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BF,cAAQ,CAAC,CAAD,CAA5C;AAEAnM,EAAAA,qBAAe,CAAC,MAAM;AACpB,UAAM;AAAEsM,MAAAA;AAAF,QAAqBC,MAA3B;AAIA,QAAID,cAAc,IAAI,IAAtB,EAA4B;AAE5B,UAAME,cAAc,GAAG,IAAIF,cAAJ,CAAmB,MAAM;AAG9C,YAAM;AAAEG,QAAAA,WAAF;AAAeC,QAAAA;AAAf,UAAgCV,OAAO,CAAC/L,OAA9C;AAIAiM,MAAAA,YAAY,CAACO,WAAW,IAAIE,gBAAgB,GAAG,CAAnB,KAAyB,CAAzB,GAA6B,CAA7B,GAAiC,CAArC,CAAZ,CAAZ;AACAN,MAAAA,aAAa,CAACK,YAAD,CAAb;AACD,KATsB,CAAvB;AAWAF,IAAAA,cAAc,CAACI,OAAf,CAAuBZ,OAAO,CAAC/L,OAA/B;AAEA,WAAO,MAAM;AACXuM,MAAAA,cAAc,CAACK,UAAf;AACD,KAFD;AAGD,GAvBc,EAuBZ,EAvBY,CAAf;AAyBA,SAAO,CAACb,OAAD,EAAUC,SAAV,EAAqBG,UAArB,CAAP;AACD;;ACjCM,SAASU,aAAT,CAA0DC,EAA1D,EAAiE;AACtE,QAAMjN,GAAG,GAAGC,YAAM,CAACgN,EAAD,CAAlB;AAEAC,EAAAA,eAAS,CAAC,MAAM;AACdlN,IAAAA,GAAG,CAACG,OAAJ,GAAc8M,EAAd;AACD,GAFQ,CAAT;AAIA,SAAOlB,iBAAW,CAAC,CAAC,GAAG/I,IAAJ,KAA4B;AAC7ChD,IAAAA,GAAG,CAACG,OAAJ,CAAY,GAAG6C,IAAf;AACD,GAFiB,EAEf,EAFe,CAAlB;AAGD;;ACXM,SAASmK,YAAT,CAAsBpN,UAAtB,EAA2C;AAChD,QAAMC,GAAG,GAAGC,YAAM,CAAiB,IAAjB,CAAlB;AAEA,QAAMmN,cAAc,GAAGnN,YAAM,CAAC,KAAD,CAA7B;AACA,QAAM,GAAGoN,WAAH,IAAkBhB,cAAQ,CAAwB,EAAxB,CAAhC;AAEAnM,EAAAA,qBAAe,CAAC,MAAM;AAAA;;AACpB,QAAI,CAACH,UAAL,EAAiB;AACfqN,MAAAA,cAAc,CAACjN,OAAf,GAAyB,KAAzB;AACA;AACD;;AAED,QAAIiN,cAAc,CAACjN,OAAnB,EAA4B;AAG1BkN,MAAAA,WAAW,CAAC,EAAD,CAAX;AACA;AACD;;AACD,oBAAArN,GAAG,CAACG,OAAJ,kCAAaC,KAAb;AACD,GAbc,EAaZ,CAACL,UAAD,CAbY,CAAf;;AAeA,WAASuN,OAAT,CAAiB9J,KAAjB,EAA0D;AACxD,QAAIA,KAAK,CAAC/B,MAAN,KAAiBzB,GAAG,CAACG,OAAzB,EAAkC;AAChCiN,MAAAA,cAAc,CAACjN,OAAf,GAAyB,IAAzB;AACD;AACF;;AAED,QAAMoN,SAAS,GAAGxN,UAAU,IAAI,CAACqN,cAAc,CAACjN,OAAhD;AAEA,SAAO;AACLH,IAAAA,GADK;AAELM,IAAAA,QAAQ,EAAEiN,SAAS,GAAG,CAAH,GAAO,CAAC,CAFtB;AAGLD,IAAAA;AAHK,GAAP;AAKD;;AClCD,MAAME,mBAAmB,gBAAGC,mBAAa,CAAsBnK,SAAtB,CAAzC;AAEO,MAAMoK,oBAAoB,GAAGF,mBAAmB,CAACG,QAAjD;AAEP,MAAMC,yBAAyB,gBAAGH,mBAAa,CAG7CnK,SAH6C,CAA/C;AAKO,MAAMuK,0BAA0B,GAAGD,yBAAyB,CAACD,QAA7D;AAEA,SAAShG,eAAT,GAAsF;AAC3F,QAAMmG,mBAAmB,GAAGC,gBAAU,CAACP,mBAAD,CAAtC;AACA,QAAMQ,yBAAyB,GAAGD,gBAAU,CAACH,yBAAD,CAA5C;;AAEA,MAAIE,mBAAmB,KAAKxK,SAAxB,IAAqC0K,yBAAyB,KAAK1K,SAAvE,EAAkF;AAChF,UAAM,IAAIyD,KAAJ,CAAU,oDAAV,CAAN;AACD;;AAED,SAAO,CAAC+G,mBAAD,EAAsBE,yBAAtB,CAAP;AACD;;ACLM,SAASC,kBAAT,CAAmC;AACxC1J,EAAAA,OADwC;AAExCU,EAAAA,cAFwC;AAGxCT,EAAAA,IAHwC;AAIxC0J,EAAAA,WAJwC;AAKxC/C,EAAAA,mBALwC;AAMxCC,EAAAA,iBANwC;AAOxCrI,EAAAA,qBAPwC;AAQxCoL,EAAAA,mBARwC;AASxCC,EAAAA,iBATwC;AAUxC3J,EAAAA;AAVwC,CAAnC,EAWwB;AAE7B,QAAM4J,QAAQ,GAAG9E,aAAO,CAAC,MAAM;AAC7B,QAAI4B,mBAAmB,KAAK,CAA5B,EAA+B,OAAO,CAAP;AAE/B,QAAIkD,QAAQ,GAAGlD,mBAAf;;AAEA,UAAMmD,cAAc,GAAG,CAAC1I,MAAD,EAAiB3C,OAAjB,KAAiD;AACtE,UAAIA,OAAO,KAAKK,SAAZ,IAAyBsC,MAAM,GAAG3C,OAAT,GAAmBkI,mBAAhD,EAAqE;AACnEkD,QAAAA,QAAQ,GAAGzI,MAAX;AACA,eAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD,KAND;;AAQA,SAAK,MAAM1D,MAAX,IAAqB+C,cAArB,EAAqC;AAEnC,YAAMW,MAAM,GAAG1D,MAAM,CAACmB,GAAtB;AACA,UAAIuC,MAAM,IAAIyI,QAAd,EAAwB;;AACxB,UAAIC,cAAc,CAAC1I,MAAD,EAAS9C,UAAU,CAACZ,MAAD,EAASa,qBAAT,EAAgC;AAAE8C,QAAAA,IAAI,EAAE;AAAR,OAAhC,CAAnB,CAAlB,EAA2F;AACzF;AACD;;AAGD,WAAK,IAAInB,MAAM,GAAGyJ,mBAAlB,EAAuCzJ,MAAM,IAAI0J,iBAAjD,EAAoE1J,MAAM,EAA1E,EAA8E;AAC5E,cAAMhF,GAAG,GAAG8E,IAAI,CAACE,MAAD,CAAhB;AACA,YAAID,UAAU,CAAC/E,GAAD,CAAd,EAAqB;;AACrB,YACE4O,cAAc,CAAC1I,MAAD,EAAS9C,UAAU,CAACZ,MAAD,EAASa,qBAAT,EAAgC;AAAE8C,UAAAA,IAAI,EAAE,KAAR;AAAenG,UAAAA;AAAf,SAAhC,CAAnB,CADhB,EAEE;AACA;AACD;AACF;;AAGD,UAAIwO,WAAW,IAAI,IAAnB,EAAyB;AACvB,aAAK,MAAMxO,GAAX,IAAkBwO,WAAlB,EAA+B;AAC7B,cACEI,cAAc,CACZ1I,MADY,EAEZ9C,UAAU,CAACZ,MAAD,EAASa,qBAAT,EAAgC;AAAE8C,YAAAA,IAAI,EAAE,SAAR;AAAmBnG,YAAAA;AAAnB,WAAhC,CAFE,CADhB,EAKE;AACA;AACD;AACF;AACF;AACF;;AAED,WAAO2O,QAAP;AACD,GAhDuB,EAgDrB,CACDF,mBADC,EAEDC,iBAFC,EAGD5J,IAHC,EAID0J,WAJC,EAKD/C,mBALC,EAMDpI,qBANC,EAODkC,cAPC,EAQDR,UARC,CAhDqB,CAAxB;AA2DA,SAAO8E,aAAO,CAAC,MAA0C;AACvD,UAAMgF,eAA0C,GAAG,EAAnD;;AACA,SAAK,IAAI3I,MAAM,GAAG,CAAlB,EAAqBA,MAAM,IAAIwF,iBAA/B,EAAkDxF,MAAM,EAAxD,EAA4D;AAC1D,YAAM1D,MAAM,GAAGqC,OAAO,CAACqB,MAAD,CAAtB;AAEA,UAAIA,MAAM,GAAGyI,QAAT,IAAqB,CAACnM,MAAM,CAACkB,MAAjC,EAAyC;AACzCmL,MAAAA,eAAe,CAACrE,IAAhB,CAAqBhI,MAArB;AACD;;AAED,WAAOqM,eAAP;AACD,GAVa,EAUX,CAACF,QAAD,EAAWjD,iBAAX,EAA8B7G,OAA9B,CAVW,CAAd;AAWD;;ACzED,SAASiK,eAAT,CAAyBC,GAAzB,EAAkE;AAChE,SAAOC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAP;AACD;;AAEM,SAASG,eAAT,CAA4B;AACjCC,EAAAA,OADiC;AAEjCC,EAAAA,SAFiC;AAGjClC,EAAAA,YAHiC;AAIjCmC,EAAAA,SAJiC;AAKjCzF,EAAAA,OALiC;AAMjC0F,EAAAA,UANiC;AAOjCC,EAAAA,gBAPiC;AAQjCjG,EAAAA;AARiC,CAA5B,EASiB;AACtB,QAAM,CAACkG,WAAD,EAAc5J,SAAd,IAA2BiE,aAAO,CAAC,MAAM;AAC7C,QAAID,OAAO,CAAC/D,MAAR,KAAmB,CAAnB,IAAwByJ,UAAU,IAAI,IAA1C,EAAgD,OAAO,CAAC1L,SAAD,EAAYuL,OAAO,CAACtJ,MAApB,CAAP;;AAEhD,UAAM4J,SAAS,GAAG,CAChB3K,IADgB,EAEhB,CAAC4K,UAAD,EAAa,GAAGC,oBAAhB,CAFgB,EAGhBC,aAHgB,KAI6B;AAC7C,UAAIC,cAAc,GAAG,CAArB;AACA,YAAMC,MAA4B,GAAG,EAArC;;AACA,WAAK,MAAM,CAACrN,GAAD,EAAMsN,SAAN,CAAX,IAA+BC,MAAM,CAACC,OAAP,CAAeX,UAAU,CAACxK,IAAD,EAAO4K,UAAP,CAAzB,CAA/B,EAA6E;AAE3E,cAAM,CAACQ,WAAD,EAAcC,cAAd,IACJR,oBAAoB,CAAC9J,MAArB,KAAgC,CAAhC,GACI,CAACkK,SAAD,EAAYA,SAAS,CAAClK,MAAtB,CADJ,GAEI4J,SAAS,CAACM,SAAD,EAAYJ,oBAAZ,EAAkCC,aAAa,GAAGC,cAAhB,GAAiC,CAAnE,CAHf;AAIAC,QAAAA,MAAM,CAACrN,GAAD,CAAN,GAAc;AAAEsN,UAAAA,SAAF;AAAaG,UAAAA,WAAb;AAA0BN,UAAAA,aAAa,EAAEA,aAAa,GAAGC;AAAzD,SAAd;AACAA,QAAAA,cAAc,IAAIM,cAAc,GAAG,CAAnC;AACD;;AAED,aAAO,CAACL,MAAD,EAASD,cAAT,CAAP;AACD,KAlBD;;AAoBA,WAAOJ,SAAS,CAACN,OAAD,EAAUvF,OAAV,EAAmB,CAAnB,CAAhB;AACD,GAxBuC,EAwBrC,CAACA,OAAD,EAAU0F,UAAV,EAAsBH,OAAtB,CAxBqC,CAAxC;AA0BA,QAAM,CAACrK,IAAD,EAAOC,UAAP,IAAqB8E,aAAO,CAAC,MAG9B;AACH,UAAMuG,YAAY,GAAG,IAAIpM,GAAJ,EAArB;AACA,QAAI,CAACwL,WAAL,EAAkB,OAAO,CAACL,OAAD,EAAUpK,UAAV,CAAP;AAElB,UAAMsL,aAAqC,GAAG,EAA9C;;AACA,UAAMC,WAAW,GAAG,CAClBxL,IADkB,EAElByL,QAFkB,EAGlBC,KAHkB,KAIT;AACT,UAAI1B,eAAe,CAAChK,IAAD,CAAnB,EAA2B;AACzBuL,QAAAA,aAAa,CAAC7F,IAAd,CAAmB,GAAG1F,IAAtB;AACA;AACD;;AACDkL,MAAAA,MAAM,CAACS,IAAP,CAAY3L,IAAZ,EAAkByF,OAAlB,CAA0B,CAACxH,QAAD,EAAW2N,QAAX,EAAqBD,IAArB,KAA8B;AAAA;;AAEtD,cAAME,EAAE,GAAGJ,QAAQ,KAAK3M,SAAb,GAA0B,GAAE2M,QAAS,KAAIxN,QAAS,EAAlD,GAAsDA,QAAjE;AACA,cAAMC,UAAU,4BAAGuM,gBAAH,oBAAGA,gBAAgB,CAAElL,GAAlB,CAAsBsM,EAAtB,CAAH,oCAAgC,KAAhD;AACA,cAAM;AAAEZ,UAAAA,SAAF;AAAaG,UAAAA,WAAb;AAA0BN,UAAAA;AAA1B,YAA4C9K,IAAI,CAAC/B,QAAD,CAAtD;AAEA,cAAMrD,QAAqB,GAAG;AAC5BiR,UAAAA,EAD4B;AAE5BJ,UAAAA,QAF4B;AAG5BxN,UAAAA,QAH4B;AAI5BC,UAAAA,UAJ4B;AAK5B+M,UAAAA,SAL4B;AAM5BS,UAAAA,KAN4B;AAO5BE,UAAAA,QAP4B;AAQ5Bd,UAAAA,aAR4B;AAS5BgB,UAAAA,OAAO,EAAEH,IAAI,CAAC5K;AATc,SAA9B;AAWAwK,QAAAA,aAAa,CAAC7F,IAAd,CAAmB9K,QAAnB;AACA0Q,QAAAA,YAAY,CAACS,GAAb,CAAiBnR,QAAjB;;AAEA,YAAIsD,UAAJ,EAAgB;AACdsN,UAAAA,WAAW,CAACJ,WAAD,EAAcS,EAAd,EAAkBH,KAAK,GAAG,CAA1B,CAAX;AACD;AACF,OAvBD;AAwBD,KAjCD;;AAmCAF,IAAAA,WAAW,CAACd,WAAD,EAAc5L,SAAd,EAAyB,CAAzB,CAAX;AACA,WAAO,CAACyM,aAAD,EAAgBtL,UAAhB,CAAP;;AAEA,aAASA,UAAT,CAAoB/E,GAApB,EAA8D;AAC5D,aAAOoQ,YAAY,CAAC/L,GAAb,CAAiBrE,GAAjB,CAAP;AACD;AACF,GAjDiC,EAiD/B,CAACuP,gBAAD,EAAmBC,WAAnB,EAAgCL,OAAhC,CAjD+B,CAAlC;AAmDA,QAAM;AAAE2B,IAAAA,cAAF;AAAkBC,IAAAA,SAAlB;AAA6BC,IAAAA,YAA7B;AAA2CC,IAAAA;AAA3C,MAA0DpH,aAAO,CAAC,MAAM;AAC5E,QAAI,OAAOuF,SAAP,KAAqB,QAAzB,EAAmC;AACjC,aAAO;AACL0B,QAAAA,cAAc,EAAE1B,SAAS,GAAGtK,IAAI,CAACe,MAD5B;AAELkL,QAAAA,SAAS,EAAG/L,MAAD,IAAoBA,MAAM,GAAGoK,SAFnC;AAGL4B,QAAAA,YAAY,EAAE,MAAM5B,SAHf;AAIL6B,QAAAA,UAAU,EAAGC,MAAD,IAAoBlK,KAAK,CAACkK,MAAM,GAAG9B,SAAV;AAJhC,OAAP;AAMD;;AAED,QAAI0B,cAAc,GAAG,CAArB;AAIA,UAAMK,YAAY,GAAGrM,IAAI,CAACgF,GAAL,CAAU9J,GAAD,IAA0B;AACtD,YAAMoR,gBAAgB,GAAGrM,UAAU,CAAC/E,GAAD,CAAV,GACrBoP,SAAS,CAAC;AAAEjJ,QAAAA,IAAI,EAAE,OAAR;AAAiBnG,QAAAA;AAAjB,OAAD,CADY,GAErBoP,SAAS,CAAC;AAAEjJ,QAAAA,IAAI,EAAE,KAAR;AAAenG,QAAAA;AAAf,OAAD,CAFb;AAGA,YAAMqR,QAAQ,GAAG;AAAEC,QAAAA,GAAG,EAAER,cAAP;AAAuBS,QAAAA,MAAM,EAAEH;AAA/B,OAAjB;AACAN,MAAAA,cAAc,IAAIM,gBAAlB;AACA,aAAOC,QAAP;AACD,KAPoB,CAArB;;AASA,UAAMG,cAAc,GAAIxM,MAAD,IAAoB;AACzC,aAAO+B,GAAG,CAAC,CAAD,EAAID,GAAG,CAAChC,IAAI,CAACe,MAAL,GAAc,CAAf,EAAkBb,MAAlB,CAAP,CAAV;AACD,KAFD;;AAIA,WAAO;AACL8L,MAAAA,cADK;AAELC,MAAAA,SAAS,EAAG/L,MAAD,IAAoBmM,YAAY,CAACK,cAAc,CAACxM,MAAD,CAAf,CAAZ,CAAqCsM,GAF/D;AAGLN,MAAAA,YAAY,EAAGhM,MAAD,IAAoBmM,YAAY,CAACK,cAAc,CAACxM,MAAD,CAAf,CAAZ,CAAqCuM,MAHlE;;AAILN,MAAAA,UAAU,CAACC,MAAD,EAAiB;AACzB,YAAIO,KAAK,GAAG,CAAZ;AACA,YAAIC,GAAG,GAAGP,YAAY,CAACtL,MAAb,GAAsB,CAAhC;;AACA,eAAO4L,KAAK,IAAIC,GAAhB,EAAqB;AACnB,gBAAMC,MAAM,GAAGF,KAAK,GAAGzK,KAAK,CAAC,CAAC0K,GAAG,GAAGD,KAAP,IAAgB,CAAjB,CAA5B;AACA,gBAAMG,aAAa,GAAGT,YAAY,CAACQ,MAAD,CAAZ,CAAqBL,GAA3C;AAEA,cAAIM,aAAa,KAAKV,MAAtB,EAA8B,OAAOS,MAAP;;AAE9B,cAAIC,aAAa,GAAGV,MAApB,EAA4B;AAC1BO,YAAAA,KAAK,GAAGE,MAAM,GAAG,CAAjB;AACD,WAFD,MAEO,IAAIC,aAAa,GAAGV,MAApB,EAA4B;AACjCQ,YAAAA,GAAG,GAAGC,MAAM,GAAG,CAAf;AACD;;AAED,cAAIF,KAAK,GAAGC,GAAZ,EAAiB,OAAOA,GAAP;AAClB;;AACD,eAAO,CAAP;AACD;;AAtBI,KAAP;AAwBD,GAnDsE,EAmDpE,CAAC3M,UAAD,EAAaqK,SAAb,EAAwBtK,IAAxB,CAnDoE,CAAvE;;AAqDA,MAAI,CAACwE,oBAAL,EAA2B;AACzB,WAAO;AACLmF,MAAAA,mBAAmB,EAAE,CADhB;AAELC,MAAAA,iBAAiB,EAAE5J,IAAI,CAACe,MAAL,GAAc,CAF5B;AAGLf,MAAAA,IAHK;AAILc,MAAAA,SAJK;AAKLkL,MAAAA,cALK;AAML/L,MAAAA,UANK;AAOLgM,MAAAA,SAPK;AAQLC,MAAAA,YARK;AASLC,MAAAA;AATK,KAAP;AAWD;;AAED,QAAMY,iBAAiB,GAAG,CAA1B;AACA,QAAMC,kBAAkB,GAAGb,UAAU,CAAC5B,SAAD,CAArC;AACA,QAAM0C,gBAAgB,GAAGd,UAAU,CAAC5B,SAAS,GAAGnC,YAAb,CAAnC;AACA,QAAMuB,mBAAmB,GAAG1H,GAAG,CAAC,CAAD,EAAI+K,kBAAkB,GAAGD,iBAAzB,CAA/B;AACA,QAAMnD,iBAAiB,GAAG5H,GAAG,CAAChC,IAAI,CAACe,MAAL,GAAc,CAAf,EAAkBkM,gBAAgB,GAAGF,iBAArC,CAA7B;AAEA,SAAO;AACLpD,IAAAA,mBADK;AAELC,IAAAA,iBAFK;AAGL5J,IAAAA,IAHK;AAILc,IAAAA,SAJK;AAKLkL,IAAAA,cALK;AAML/L,IAAAA,UANK;AAOLgM,IAAAA,SAPK;AAQLC,IAAAA,YARK;AASLC,IAAAA;AATK,GAAP;AAWD;;;;;ACxMD,MAAMe,cAAc,sBAApB;AAKA,MAAMC,uBAAuB,2BAA2BD,gBAAxD;AAEA,MAAME,cAAc,qBAApB;AAOA,MAAMC,uBAAuB,2BAA2BD,gBAAxD;AAEA,MAAME,KAAK,qBAAX;AAQA,MAAMC,cAAc,qBAAqBD,OAAzC;AAWe,SAASE,kBAAT,CAAmC;AAChDC,EAAAA,MADgD;AAEhDC,EAAAA,aAFgD;AAGhDC,EAAAA,QAHgD;AAIhDC,EAAAA;AAJgD,CAAnC,EAKE;sBAEbvQ;AAAM,IAAA,WAAW8P,uBAAjB;AAA0C,IAAA,SAAUnQ,CAAD,IAAOyQ,MAAM,CAACzQ,CAAC,CAACoC,OAAFpC,IAAaA,CAAC,CAACqC,OAAhB,CAAhE;AAAA,4BACE9B;AAAM,MAAA,WAAW8P,uBAAjB;AAAA,gBAA2CO;AAA3C,MADF,eAEEvQ;AAAA,iBACGqQ,aAAa,KAAK5O,SAAlB4O,iBACCnQ;AAAK,QAAA,SAAQ,UAAb;AAAwB,QAAA,OAAM,IAA9B;AAAmC,QAAA,QAAO,GAA1C;AAA8C,QAAA,WAAWgQ,cAAzD;AAAyE,2BAAzE;AAAA,+BACEhQ;AAAM,UAAA,GAAGmQ,aAAa,KAAK,KAAlBA,GAA0B,eAA1BA,GAA4C;AAArD;AADF,QAFJ,EAMGC,QANH;AAAA,MAFF;AAAA;;;;;;ACtCJ,MAAME,aAAa,qBAAnB;AAYA,MAAMC,sBAAsB,yBAAyBD,eAArD;AAae,SAASE,UAAT,CAA2B;AACxCrQ,EAAAA,MADwC;AAExCe,EAAAA,OAFwC;AAGxCuP,EAAAA,QAHwC;AAIxCnK,EAAAA,eAJwC;AAKxCC,EAAAA,wBALwC;AAMxCmK,EAAAA,WANwC;AAOxCC,EAAAA;AAPwC,CAA3B,EAQY;WAChBC,cAAcnP,OAA2C;QAC5DA,KAAK,CAACoP,WAANpP,KAAsB,OAAtBA,IAAiCA,KAAK,CAACqP,OAANrP,KAAkB,GAAG;;;;UAIpD;AAAEsP,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,QAA+BvP;UAC/B;AAAEwP,MAAAA;AAAF,QAAYF,aAAa,CAACG,qBAAdH;UACZlC,MAAM,GAAGoC,KAAK,GAAGxP,KAAK,CAAC0P;;QAEzBtC,MAAM,GAAG,IAAI;;;;aAKRuC,cAAc3P,OAAqB;UACtCA,KAAK,CAACuP,SAANvP,KAAoBuP,WAAW;;UAC/BvP,KAAK,CAACoP,WAANpP,KAAsB,OAAtBA,IAAiCA,KAAK,CAACqP,OAANrP,KAAkB,GAAG;AACxD4P,QAAAA,WAAW,CAAC5P,KAAD,CAAX4P;;;;YAGIpL,KAAK,GAAGxE,KAAK,CAAC0P,OAAN1P,GAAgBoN,MAAhBpN,GAAyBsP,aAAa,CAACG,qBAAdH,GAAsC3L;;UACzEa,KAAK,GAAG,GAAG;AACbwK,QAAAA,QAAQ,CAACtQ,MAAD,EAAS8F,KAAT,CAARwK;;;;aAIKY,YAAY5P,OAAqB;UACpCA,KAAK,CAACuP,SAANvP,KAAoBuP,WAAW;AACnCtG,MAAAA,MAAM,CAAC4G,mBAAP5G,CAA2B,aAA3BA,EAA0C0G,aAA1C1G;AACAA,MAAAA,MAAM,CAAC4G,mBAAP5G,CAA2B,WAA3BA,EAAwC2G,WAAxC3G;;;AAGFjJ,IAAAA,KAAK,CAAC8P,cAAN9P;AACAiJ,IAAAA,MAAM,CAAC8G,gBAAP9G,CAAwB,aAAxBA,EAAuC0G,aAAvC1G;AACAA,IAAAA,MAAM,CAAC8G,gBAAP9G,CAAwB,WAAxBA,EAAqC2G,WAArC3G;;;QAEI+G,SAAS,GAAGf,WAAH,oBAAGA,WAAW,CAAEgB,SAAbhB,CAAwB9I,IAAD,IAAUA,IAAI,CAAC+J,SAAL/J,KAAmBzH,MAAM,CAACC,GAA3DsQ;QACZkB,UAAU,GACdH,SAAS,KAAKlQ,SAAdkQ,IAA2BA,SAAS,GAAG,CAAC,CAAxCA,GAA4Cf,WAAW,CAAEe,SAAF,CAAvDA,GAAsElQ;QAClE4O,aAAa,GAAGyB,UAAH,oBAAGA,UAAU,CAAEC;QAC5BzB,QAAQ,GAAGwB,UAAU,KAAKrQ,SAAfqQ,IAA4BlB,WAAW,CAAElN,MAAbkN,GAAsB,CAAlDkB,GAAsDH,SAAS,GAAI,CAAnEG,GAAuErQ;QAClFuQ,QAAQ,GACZ3B,aAAa,IAAI,CAACC,QAAlBD,GAA8BA,aAAa,KAAK,KAAlBA,GAA0B,WAA1BA,GAAwC,YAAtEA,GAAsF5O;;QAElF2O,MAAM,GAAI6B,SAAD,IAAwB;QACjCpB,mBAAmB,IAAI,MAAM;UAC3B;AAAEqB,MAAAA;AAAF,QAA0B7R;;QAC5ByR,UAAU,KAAKrQ,WAAW;YAEtB0Q,QAAoB,GAAG;AAC3BN,QAAAA,SAAS,EAAExR,MAAM,CAACC,GADS;AAE3ByR,QAAAA,SAAS,EAAEG,mBAAmB,GAAG,MAAH,GAAY;AAFf;AAI7BrB,MAAAA,mBAAmB,CAACD,WAAW,IAAIqB,SAAfrB,GAA2B,CAAC,GAAGA,WAAJ,EAAiBuB,QAAjB,CAA3BvB,GAAwD,CAACuB,QAAD,CAAzD,CAAnBtB;AANF,WAOO;UACDuB;;UAEDF,mBAAmB,IAAI7B,aAAa,KAAK,MAAzC6B,IACA,CAACA,mBAAD,IAAwB7B,aAAa,KAAK,OAC3C;AACA+B,QAAAA,cAAc,GAAG;AACfP,UAAAA,SAAS,EAAExR,MAAM,CAACC,GADH;AAEfyR,UAAAA,SAAS,EAAE1B,aAAa,KAAK,KAAlBA,GAA0B,MAA1BA,GAAmC;AAF/B,SAAjB+B;;;UAKEH,WAAW;cACPI,eAAe,GAAG,CAAC,GAAGzB,WAAJ;;YACpBwB,gBAAgB;AAElBC,UAAAA,eAAe,CAACV,SAAD,CAAfU,GAA8BD,cAA9BC;AAFF,eAGO;AAELA,UAAAA,eAAe,CAACC,MAAhBD,CAAuBV,SAAvBU,EAAmC,CAAnCA;;;AAEFxB,QAAAA,mBAAmB,CAACwB,eAAD,CAAnBxB;AATF,aAUO;AACLA,QAAAA,mBAAmB,CAACuB,cAAc,GAAG,CAACA,cAAD,CAAH,GAAsB,EAArC,CAAnBvB;;;AAhCN;;WAqCS0B,UAAU;QACblS,MAAM,CAACkG,gBAAgB;0BAEvBrG,eAAC,MAAD,CAAQ,cAAR;AACE,QAAA,QAAQG,MADV;AAEE,QAAA,eAAegQ,aAFjB;AAGE,QAAA,UAAUC,QAHZ;AAIE,QAAA,QAAQF,MAJV;AAKE,QAAA,iBAAiB5J,eALnB;AAME,QAAA,0BAA0BC;AAN5B;;;QAWApG,MAAM,CAACiG,UAAU;0BAEjBpG,eAAC,kBAAD;AAAoB,QAAA,QAAQkQ,MAA5B;AAAoC,QAAA,eAAeC,aAAnD;AAAkE,QAAA,UAAUC,QAA5E;AAAA,kBACGjQ,MAAM,CAAC6F;AADV;;;WAMG7F,MAAM,CAAC6F;;;QAGVsM,SAAS,GAAGjN,gBAAgB,CAAClF,MAAD,EAASA,MAAM,CAACoS,eAAhB,EACNpS,MAAM,CAACgG,SADD,IAC/BoK,sBAD+B;sBAKhCvQ;AACE,IAAA,MAAK,cADP;AAEE,qBAAeG,MAAM,CAACmB,GAAPnB,GAAa,CAF9B;AAGE,iBAAW2R,QAHb;AAIE,oBAAc5Q,OAJhB;AAKE,IAAA,WAAWoR,SALb;AAME,IAAA,OAAOrN,YAAY,CAAC9E,MAAD,EAASe,OAAT,CANrB;AAOE,IAAA,eAAef,MAAM,CAACgG,SAAPhG,GAAmByQ,aAAnBzQ,GAAmCoB,SAPpD;AAAA,cASG8Q,OAAO;AATV;;;ACnIJ,SAASG,SAAT,CAA+C;AAC7ChQ,EAAAA,OAD6C;AAE7C8D,EAAAA,eAF6C;AAG7CC,EAAAA,wBAH6C;AAI7CkM,EAAAA,cAJ6C;AAK7C/B,EAAAA,WAL6C;AAM7CC,EAAAA,mBAN6C;AAO7C3P,EAAAA;AAP6C,CAA/C,EAQ6B;AAC3B,QAAM0R,KAAK,GAAG,EAAd;;AACA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGnQ,OAAO,CAACgB,MAApC,EAA4CmP,KAAK,EAAjD,EAAqD;AACnD,UAAMxS,MAAM,GAAGqC,OAAO,CAACmQ,KAAD,CAAtB;AACA,UAAMzR,OAAO,GAAGH,UAAU,CAACZ,MAAD,EAASa,qBAAT,EAAgC;AAAE8C,MAAAA,IAAI,EAAE;AAAR,KAAhC,CAA1B;;AACA,QAAI5C,OAAO,KAAKK,SAAhB,EAA2B;AACzBoR,MAAAA,KAAK,IAAIzR,OAAO,GAAG,CAAnB;AACD;;AAEDwR,IAAAA,KAAK,CAACvK,IAAN,eACEnI,eAAC,UAAD;AAEE,MAAA,MAAM,EAAEG,MAFV;AAGE,MAAA,OAAO,EAAEe,OAHX;AAIE,MAAA,QAAQ,EAAEuR,cAJZ;AAKE,MAAA,eAAe,EAAEnM,eALnB;AAME,MAAA,wBAAwB,EAAEC,wBAN5B;AAOE,MAAA,mBAAmB,EAAEoK,mBAPvB;AAQE,MAAA,WAAW,EAAED;AARf,OACOvQ,MAAM,CAACC,GADd,CADF;AAYD;;AAED,sBACEJ;AACE,IAAA,IAAI,EAAC,KADP;AAEE,qBAAe,CAFjB;AAGE,IAAA,SAAS,EAAEtC,kBAHb;AAAA,cAKGgV;AALH,IADF;AASD;;AAED,iCAAeE,UAAI,CAACJ,SAAD,CAAnB;;;;;ACvDA,MAAMK,UAAU,qBAAhB;AAIA,MAAMC,mBAAmB,sBAAsBD,YAA/C;AAEA,MAAME,eAAe,sBAArB;AAQA,MAAMC,wBAAwB,4BAA4BD,iBAA1D;;AAEA,SAASE,IAAT,CAAqB;AACnB9S,EAAAA,MADmB;AAEnBe,EAAAA,OAFmB;AAGnBhC,EAAAA,cAHmB;AAInBgU,EAAAA,QAJmB;AAKnBC,EAAAA,aALmB;AAMnBxV,EAAAA,GANmB;AAOnByV,EAAAA,UAPmB;AAQnBC,EAAAA,UARmB;AASnBC,EAAAA,gBATmB;AAUnBC,EAAAA,WAVmB;AAWnBC,EAAAA,UAXmB;KAYhBtT;AAZgB,CAArB,EAa6B;QACrB;AAAEjC,IAAAA,GAAF;AAAOM,IAAAA,QAAP;AAAiBgN,IAAAA;AAAjB,MAA6BH,YAAY,CAAClM,cAAD;QAEzC;AAAEuU,IAAAA;AAAF,MAAgBtT;QAChBmS,SAAS,GAAGjN,gBAAgB,CAChClF,MADgC,EAMhC,OAAOsT,SAAP,KAAqB,UAArB,GAAkCA,SAAS,CAAC9V,GAAD,CAA3C,GAAmD8V,SANnB,EAGPP,QAHO,IAG7BJ,mBAH6B,EAIFK,aAJE,IAI7BH,wBAJ6B;;WASzBU,kBAAkBC,YAA6B;AACtDH,IAAAA,UAAU,CAAC7V,GAAD,EAAMwC,MAAN,EAAcwT,UAAd,CAAVH;;;WAGOI,cAAc;AAAA;;AACrBF,IAAAA,iBAAiB,0BAACvT,MAAM,CAAC0T,aAAR,qBAAC1T,sBAAsB2T,WAAvB,CAAjBJ;AACAL,IAAAA,UAAU,QAAVA,YAAAA,UAAU,CAAG1V,GAAH,EAAQwC,MAAR,CAAVkT;;;WAGOU,oBAAoB;AAC3BL,IAAAA,iBAAiB;;;WAGVM,oBAAoB;AAC3BN,IAAAA,iBAAiB,CAAC,IAAD,CAAjBA;AACAJ,IAAAA,gBAAgB,QAAhBA,YAAAA,gBAAgB,CAAG3V,GAAH,EAAQwC,MAAR,CAAhBmT;;;sBAIAtT;AACE,IAAA,MAAK,UADP;AAEE,qBAAeG,MAAM,CAACmB,GAAPnB,GAAa,CAF9B;qBAGiBjB,cAHjB;AAIE,oBAAcgC,OAJhB;AAKE,qBAAe,CAAC0B,cAAc,CAACzC,MAAD,EAASxC,GAAT,CAAf,IAAgC4D,SALjD;AAME,IAAA,KAAKtD,GANP;AAOE,IAAA,UAAUM,QAPZ;AAQE,IAAA,WAAW+T,SARb;AASE,IAAA,OAAOrN,YAAY,CAAC9E,MAAD,EAASe,OAAT,CATrB;AAUE,IAAA,SAAS0S,WAVX;AAWE,IAAA,eAAeI,iBAXjB;AAYE,IAAA,eAAeD,iBAZjB;AAaE,IAAA,SAASxI,OAbX;AAAA,OAcMrL,KAdN;AAAA,cAgBG,CAACC,MAAM,CAAC2C,QAAR,iBACChD;AAAA,8BACEE,eAAC,MAAD,CAAQ,SAAR;AACE,QAAA,QAAQG,MADV;AAEE,QAAA,KAAKxC,GAFP;AAGE,QAAA,gBAAgBuB,cAHlB;AAIE,QAAA,aAAaqU;AAJf,QADF,EAOGH,UAPH;AAAA;AAjBJ;;;AA+BJ,4BAAeR,UAAI,CAACK,IAAD,CAAnB;;AC1FA,SAASgB,GAAT,CACE;AACE3B,EAAAA,SADF;AAEE3P,EAAAA,MAFF;AAGEuR,EAAAA,eAHF;AAIExO,EAAAA,aAJF;AAKEyO,EAAAA,aALF;AAMEC,EAAAA,kBANF;AAOEpT,EAAAA,qBAPF;AAQErD,EAAAA,GARF;AASE6O,EAAAA,eATF;AAUE6H,EAAAA,kBAVF;AAWEC,EAAAA,sBAXF;AAYEjB,EAAAA,UAZF;AAaEC,EAAAA,gBAbF;AAcEiB,EAAAA,QAdF;AAeEC,EAAAA,oBAfF;AAgBEC,EAAAA,YAhBF;AAiBExF,EAAAA,GAjBF;AAkBEC,EAAAA,MAlBF;AAmBEqE,EAAAA,WAnBF;AAoBEC,EAAAA,UApBF;AAqBE,KAAGtT;AArBL,CADF,EAwBEjC,GAxBF,EAyBE;AACA,QAAMyW,YAAY,GAAGR,eAAe,KAAK,CAAC,CAA1C;AACA,QAAM;AAAEjW,IAAAA,GAAG,EAAE0W,MAAP;AAAepW,IAAAA;AAAf,MAA4BR,WAAW,CAAiB2W,YAAjB,CAA7C;AAEA,QAAME,eAAe,GAAG3J,aAAa,CAAE4J,MAAD,IAAe;AACnDtB,IAAAA,WAAW,CAAC5Q,MAAD,EAASkS,MAAT,CAAX;AACD,GAFoC,CAArC;;AAIA,WAASC,eAAT,CAAyBrT,KAAzB,EAAkE;AAChE+S,IAAAA,oBAAoB,QAApB,YAAAA,oBAAoB,CAAG7R,MAAH,CAApB;AACA8R,IAAAA,YAAY,QAAZ,YAAAA,YAAY,CAAGhT,KAAH,CAAZ;AACD;;AAED6Q,EAAAA,SAAS,GAAGvS,IAAI,CACdnC,YADc,EAEb,WAAU+E,MAAM,GAAG,CAAT,KAAe,CAAf,GAAmB,MAAnB,GAA4B,KAAM,EAF/B,EAMd4R,QANc,oBAMdA,QAAQ,CAAG5W,GAAH,CANM,EAOd2U,SAPc,EAIiBoC,YAJjB,IAIXlX,yBAJW,CAAhB;AAUA,QAAMkV,KAAK,GAAG,EAAd;;AAEA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGnG,eAAe,CAAChJ,MAA5C,EAAoDmP,KAAK,EAAzD,EAA6D;AAC3D,UAAMxS,MAAM,GAAGqM,eAAe,CAACmG,KAAD,CAA9B;AACA,UAAM;AAAErR,MAAAA;AAAF,QAAUnB,MAAhB;AACA,UAAMe,OAAO,GAAGH,UAAU,CAACZ,MAAD,EAASa,qBAAT,EAAgC;AAAE8C,MAAAA,IAAI,EAAE,KAAR;AAAenG,MAAAA;AAAf,KAAhC,CAA1B;;AACA,QAAIuD,OAAO,KAAKK,SAAhB,EAA2B;AACzBoR,MAAAA,KAAK,IAAIzR,OAAO,GAAG,CAAnB;AACD;;AAED,UAAMhC,cAAc,GAAGgV,eAAe,KAAK5S,GAA3C;;AAEA,QAAIpC,cAAc,IAAImV,kBAAtB,EAA0C;AACxC3B,MAAAA,KAAK,CAACvK,IAAN,CAAWkM,kBAAX;AACD,KAFD,MAEO;AACL3B,MAAAA,KAAK,CAACvK,IAAN,eACEnI,eAACiT,MAAD;AAEE,QAAA,MAAM,EAAE9S,MAFV;AAGE,QAAA,OAAO,EAAEe,OAHX;AAIE,QAAA,GAAG,EAAEvD,GAJP;AAKE,QAAA,QAAQ,EAAEwW,aAAa,KAAK7S,GAL9B;AAME,QAAA,aAAa,EAAE8S,kBAAkB,KAAK9S,GANxC;AAOE,QAAA,cAAc,EAAEpC,cAPlB;AAQE,QAAA,UAAU,EAAEA,cAAc,GAAGoV,sBAAH,GAA4B/S,SARxD;AASE,QAAA,UAAU,EAAE8R,UATd;AAUE,QAAA,gBAAgB,EAAEC,gBAVpB;AAWE,QAAA,WAAW,EAAEsB,eAXf;AAYE,QAAA,UAAU,EAAEpB;AAZd,SACOrT,MAAM,CAACC,GADd,CADF;AAgBD;AACF;;AAED,sBACEJ,eAAC,oBAAD;AAAsB,IAAA,KAAK,EAAE0F,aAA7B;AAAA,2BACE1F;AACE,MAAA,IAAI,EAAC,KADP;AAEE,MAAA,GAAG,EAAE8J,eAAe,CAAC7L,GAAD,EAAM0W,MAAN,CAFtB;AAGE,MAAA,QAAQ,EAAEpW,QAHZ;AAIE,MAAA,SAAS,EAAE+T,SAJb;AAKE,MAAA,YAAY,EAAEwC,eALhB;AAME,MAAA,KAAK,EACH;AACE7F,QAAAA,GADF;AAEE,wBAAiB,GAAEC,MAAO;AAF5B,OAPJ;AAAA,SAYMhP,KAZN;AAAA,gBAcGwS;AAdH;AADF,IADF;AAoBD;;AAED,2BAAeE,UAAI,eAACmC,gBAAU,CAACd,GAAD,CAAX,CAAnB;;AC/FA,SAASe,SAAT,CAA0B;AACxB1G,EAAAA,EADwB;AAExB5N,EAAAA,QAFwB;AAGxBgN,EAAAA,SAHwB;AAIxB/M,EAAAA,UAJwB;AAKxBzB,EAAAA,cALwB;AAMxBiB,EAAAA,MANwB;AAOxBxC,EAAAA,GAPwB;AAQxBsX,EAAAA,gBARwB;AASxBrU,EAAAA,WAAW,EAAEsU;AATW,CAA1B,EAU0B;AACxB,QAAM;AAAEjX,IAAAA,GAAF;AAAOM,IAAAA,QAAP;AAAiBgN,IAAAA;AAAjB,MAA6BH,YAAY,CAAClM,cAAD,CAA/C;;AAEA,WAAS0B,WAAT,GAAuB;AACrBsU,IAAAA,kBAAkB,CAAC5G,EAAD,CAAlB;AACD;;AAGD,QAAM6G,eAAe,GAAGhV,MAAM,CAAC2C,QAAP,IAAmBmS,gBAAgB,KAAK9U,MAAM,CAACmB,GAAvE;AAEA,sBACEtB;AACE,IAAA,IAAI,EAAC,UADP;AAEE,qBAAeG,MAAM,CAACmB,GAAP,GAAa,CAF9B;AAGE,qBAAepC,cAHjB;AAIE,IAAA,GAAG,EAAEjB,GAJP;AAKE,IAAA,QAAQ,EAAEM,QALZ;AAOE,IAAA,SAAS,EAAE8G,gBAAgB,CAAClF,MAAD,CAP7B;AAQE,IAAA,KAAK,EAAE,EACL,GAAG8E,YAAY,CAAC9E,MAAD,CADV;AAELiV,MAAAA,MAAM,EAAED,eAAe,GAAG,SAAH,GAAe;AAFjC,KART;AAYE,IAAA,OAAO,EAAEA,eAAe,GAAGvU,WAAH,GAAiBW,SAZ3C;AAaE,IAAA,OAAO,EAAEgK,OAbX;AAAA,cAeG,CAAC,CAACpL,MAAM,CAAC2C,QAAR,IAAoBmS,gBAAgB,KAAK9U,MAAM,CAACmB,GAAjD,KAAyDnB,MAAM,CAACsG,cAAhE,iBACCzG,eAAC,MAAD,CAAQ,cAAR;AACE,MAAA,QAAQ,EAAEU,QADZ;AAEE,MAAA,SAAS,EAAEgN,SAFb;AAGE,MAAA,MAAM,EAAEvN,MAHV;AAIE,MAAA,GAAG,EAAExC,GAJP;AAKE,MAAA,UAAU,EAAEgD,UALd;AAME,MAAA,cAAc,EAAEzB,cANlB;AAOE,MAAA,WAAW,EAAE0B;AAPf;AAhBJ,KAMOT,MAAM,CAACC,GANd,CADF;AA6BD;;AAED,iCAAewS,UAAI,CAACoC,SAAD,CAAnB;;AC1CA,SAASK,UAAT,CAA2B;AACzB/G,EAAAA,EADyB;AAEzB5N,EAAAA,QAFyB;AAGzB8L,EAAAA,eAHyB;AAIzBkB,EAAAA,SAJyB;AAKzB/K,EAAAA,MALyB;AAMzBhF,EAAAA,GANyB;AAOzBsR,EAAAA,GAPyB;AAQzBC,EAAAA,MARyB;AASzBf,EAAAA,KATyB;AAUzBxN,EAAAA,UAVyB;AAWzBuT,EAAAA,eAXyB;AAYzBxO,EAAAA,aAZyB;AAazB4P,EAAAA,WAbyB;AAczB1U,EAAAA,WAdyB;AAezB,KAAGV;AAfsB,CAA3B,EAgBiC;AAC/B,QAAMwU,YAAY,GAAGR,eAAe,KAAK,CAAC,CAA1C;AACA,QAAM;AAAEjW,IAAAA,GAAF;AAAOM,IAAAA;AAAP,MAAoBR,WAAW,CAAiB2W,YAAjB,CAArC;AAGA,QAAMpT,GAAG,GAAGkL,eAAe,CAAC,CAAD,CAAf,CAAmBpM,GAAnB,KAA2BoF,iBAA3B,GAA+C2I,KAAK,GAAG,CAAvD,GAA2DA,KAAvE;;AAEA,WAASoH,iBAAT,GAA6B;AAC3BD,IAAAA,WAAW,CAAC3S,MAAD,CAAX;AACD;;AAED,sBACE3C,eAAC,oBAAD;AAAsB,IAAA,KAAK,EAAE0F,aAA7B;AAAA,2BACE1F;AACE,MAAA,IAAI,EAAC,KADP;AAEE,oBAAYmO,KAFd;AAGE,uBAAexN,UAHjB;AAIE,MAAA,GAAG,EAAE1C,GAJP;AAKE,MAAA,QAAQ,EAAEM,QALZ;AAME,MAAA,SAAS,EAAEwB,IAAI,CACbnC,YADa,EAEbN,iBAFa,EAGZ,WAAUqF,MAAM,GAAG,CAAT,KAAe,CAAf,GAAmB,MAAnB,GAA4B,KAAM,EAHhC,EAKkB+R,YALlB,IAKVlX,yBALU,CANjB;AAcE,MAAA,OAAO,EAAE+X,iBAdX;AAeE,MAAA,KAAK,EACH;AACEtG,QAAAA,GADF;AAEE,wBAAiB,GAAEC,MAAO;AAF5B,OAhBJ;AAAA,SAqBMhP,KArBN;AAAA,gBAuBGsM,eAAe,CAAC/E,GAAhB,CAAqBtH,MAAD,iBACnBH,eAACgV,WAAD;AAEE,QAAA,EAAE,EAAE1G,EAFN;AAGE,QAAA,QAAQ,EAAE5N,QAHZ;AAIE,QAAA,SAAS,EAAEgN,SAJb;AAKE,QAAA,UAAU,EAAE/M,UALd;AAME,QAAA,cAAc,EAAEuT,eAAe,KAAK/T,MAAM,CAACmB,GAN7C;AAOE,QAAA,MAAM,EAAEnB,MAPV;AAQE,QAAA,GAAG,EAAExC,GARP;AASE,QAAA,gBAAgB,EAAE2D,GATpB;AAUE,QAAA,WAAW,EAAEV;AAVf,SACOT,MAAM,CAACC,GADd,CADD;AAvBH;AADF,IADF;AA0CD;;AAED,sCAAewS,UAAI,CAACyC,UAAD,CAAnB;;ACxFA,SAASG,WAAT,CAA4B;AAAErV,EAAAA,MAAF;AAAUe,EAAAA,OAAV;AAAmBvD,EAAAA;AAAnB,CAA5B,EAA+E;AAC7E,QAAM;AAAE8X,IAAAA,gBAAgB,EAAEC,gBAApB;AAAsCC,IAAAA;AAAtC,MAA2DxV,MAAjE;AACA,QAAMmS,SAAS,GAAGjN,gBAAgB,CAChClF,MADgC,EAEhC,OAAOwV,gBAAP,KAA4B,UAA5B,GAAyCA,gBAAgB,CAAChY,GAAD,CAAzD,GAAiEgY,gBAFjC,CAAlC;AAKA,sBACE3V;AACE,IAAA,IAAI,EAAC,UADP;AAEE,qBAAeG,MAAM,CAACmB,GAAP,GAAa,CAF9B;AAGE,oBAAcJ,OAHhB;AAIE,IAAA,SAAS,EAAEoR,SAJb;AAKE,IAAA,KAAK,EAAErN,YAAY,CAAC9E,MAAD,EAASe,OAAT,CALrB;AAAA,cAOGwU,gBAAgB,iBAAI1V,eAAC,gBAAD;AAAkB,MAAA,MAAM,EAAEG,MAA1B;AAAkC,MAAA,GAAG,EAAExC;AAAvC;AAPvB,IADF;AAWD;;AAED,mCAAeiV,UAAI,CAAC4C,WAAD,CAAnB;;AChBA,SAASI,UAAT,CAA2B;AACzBjT,EAAAA,MADyB;AAEzBhF,EAAAA,GAFyB;AAGzB6O,EAAAA,eAHyB;AAIzBqJ,EAAAA,MAJyB;AAKzB7U,EAAAA,qBALyB;AAMzB,mBAAiB8U;AANQ,CAA3B,EAO2B;AACzB,QAAMpD,KAAK,GAAG,EAAd;;AACA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGnG,eAAe,CAAChJ,MAA5C,EAAoDmP,KAAK,EAAzD,EAA6D;AAC3D,UAAMxS,MAAM,GAAGqM,eAAe,CAACmG,KAAD,CAA9B;AACA,UAAMzR,OAAO,GAAGH,UAAU,CAACZ,MAAD,EAASa,qBAAT,EAAgC;AAAE8C,MAAAA,IAAI,EAAE,SAAR;AAAmBnG,MAAAA;AAAnB,KAAhC,CAA1B;;AACA,QAAIuD,OAAO,KAAKK,SAAhB,EAA2B;AACzBoR,MAAAA,KAAK,IAAIzR,OAAO,GAAG,CAAnB;AACD;;AAEDwR,IAAAA,KAAK,CAACvK,IAAN,eAAWnI,eAACwV,aAAD;AAAqC,MAAA,MAAM,EAAErV,MAA7C;AAAqD,MAAA,OAAO,EAAEe,OAA9D;AAAuE,MAAA,GAAG,EAAEvD;AAA5E,OAAyBwC,MAAM,CAACC,GAAhC,CAAX;AACD;;AAED,sBACEJ;AACE,IAAA,IAAI,EAAC,KADP;AAEE,qBAAe8V,YAFjB;AAGE,IAAA,SAAS,EAAG,GAAElY,YAAa,YACzB+E,MAAM,GAAG,CAAT,KAAe,CAAf,GAAmB,MAAnB,GAA4B,KAC7B,IAAG7E,mBAAoB,EAL1B;AAME,IAAA,KAAK,EAAE;AAAE+X,MAAAA;AAAF,KANT;AAAA,cAQGnD;AARH,IADF;AAYD;;AAED,kCAAeE,UAAI,CAACgD,UAAD,CAAnB;;;;;ACxBA,MAAMG,WAAW,sBAAjB;AAYe,SAASC,QAAT,CAAyB;AACtC7V,EAAAA,MADsC;AAEtCe,EAAAA,OAFsC;AAGtCvD,EAAAA,GAHsC;AAItC4V,EAAAA,WAJsC;AAKtC0C,EAAAA,OALsC;AAMtCC,EAAAA,SANsC;AAOtCC,EAAAA;AAPsC,CAAzB,EAQU;AAAA;;QACjBC,eAAe,GAAGlY,YAAM;QAKxBmY,wBAAwB,GAAGpL,aAAa,CAAC,MAAM;AACnDsI,IAAAA,WAAW,CAAC5V,GAAD,EAAM,IAAN,CAAX4V;AAD4C,GAAA;;WAIrC+C,qBAAqB;AAC5BC,IAAAA,oBAAoB,CAACH,eAAe,CAAChY,OAAjB,CAApBmY;;;AAGFpL,EAAAA,eAAS,CAAC,MAAM;aACLqL,2BAA2B;AAClCJ,MAAAA,eAAe,CAAChY,OAAhBgY,GAA0BK,qBAAqB,CAACJ,wBAAD,CAA/CD;;;AAGF5E,IAAAA,gBAAgB,CAAC,WAAD,EAAcgF,wBAAd,EAAwC;AAAEE,MAAAA,OAAO,EAAE;AAAX,KAAxC,CAAhBlF;WAEO,MAAM;AACXF,MAAAA,mBAAmB,CAAC,WAAD,EAAckF,wBAAd,EAAwC;AAAEE,QAAAA,OAAO,EAAE;AAAX,OAAxC,CAAnBpF;AACAgF,MAAAA,kBAAkB;AAFpB;AAPO,GAAA,EAWN,CAACD,wBAAD,CAXM,CAATlL;QAaM;AAAEsI,IAAAA;AAAF,MAAgBtT;QAChBmS,SAAS,GAAGjN,gBAAgB,CAChClF,MADgC,EAEhC,sBAFgC,EAIhC,OAAOsT,SAAP,KAAqB,UAArB,GAAkCA,SAAS,CAAC9V,GAAD,CAA3C,GAAmD8V,SAJnB,EAGhC,2BAACtT,MAAM,CAAC0T,aAAR,aAAC1T,sBAAsBwW,YAAvB,CAHgC,IAGOZ,WAHP;MAO9Ba;;MACAzW,MAAM,CAAC0C,MAAP1C,IAAiB,MAAM;AAAA;;AACzByW,IAAAA,OAAO,gBACL5W,eAAC,MAAD,CAAQ,MAAR;AACE,MAAA,QAAQG,MADV;AAEE,MAAA,KAAKxC,GAFP;AAGE,MAAA,aAAa4V,WAHf;AAIE,MAAA,SAAS0C,OAJX;AAKE,MAAA,oBAAoBE;AALtB,MADFS;;kCAUIzW,MAAM,CAAC0T,0BAAP1T,uBAAsBwW,cAAc;AACtCC,MAAAA,OAAO,gBACL9W;AAAA,gCACG6W,qBAAY,CAACC,OAAD,EAAUT,kBAAV,CADf,eAEEnW,eAAC,MAAD,CAAQ,SAAR;AAAkB,UAAA,QAAQG,MAA1B;AAAkC,UAAA,KAAKxC,GAAvC;AAA4C,UAAA,cAA5C,MAAA;AAA2D,UAAA,aAAa4V;AAAxE,UAFF;AAAA,QADFqD;;;;WASK/V,cAAcY,OAA4C;AACjEyU,IAAAA,SAAS,CAACzU,KAAD,EAAQ,IAAR,CAATyU;;;sBAIAlW;AACE,IAAA,MAAK,UADP;AAEE,qBAAeG,MAAM,CAACmB,GAAPnB,GAAa,CAF9B;oBAGgBe,OAHhB;AAIE,yBAJF;AAKE,IAAA,WAAWoR,SALb;AAME,IAAA,OAAOrN,YAAY,CAAC9E,MAAD,EAASe,OAAT,CANrB;AAOE,IAAA,WAAWf,0BAAAA,MAAM,CAAC0T,aAAP1T,oCAAsBwW,YAAtBxW,GAAqCU,aAArCV,GAAqDoB,SAPlE;AAQE,IAAA,oBAAoB+U,kBARtB;AAAA,cAUGM;AAVH;;;;;;ACrGJ,MAAMC,cAAc,qBAApB;AAiBA,MAAMC,uBAAuB,2BAA2BD,gBAAxD;AAYe,SAASE,UAAT,CAA2B;AACxCtU,EAAAA,IADwC;AAExCD,EAAAA,OAFwC;AAGxCD,EAAAA,gBAHwC;AAIxCyU,EAAAA,uBAJwC;AAKxCpU,EAAAA,cALwC;AAMxCqU,EAAAA,YANwC;AAOxCC,EAAAA,MAPwC;AAQxCC,EAAAA,WARwC;AASxC3C,EAAAA;AATwC,CAA3B,EAUE;WACN4C,gBAAgB3V,OAAqD;QACxEA,KAAK,CAACqP,OAANrP,KAAkB,GAAG;AACzB0V,IAAAA,WAAW,CAAC,IAAD,CAAXA;AACAzM,IAAAA,MAAM,CAAC8G,gBAAP9G,CAAwB,WAAxBA,EAAqC2M,WAArC3M;AACAA,IAAAA,MAAM,CAAC8G,gBAAP9G,CAAwB,SAAxBA,EAAmC4M,SAAnC5M;;aAES2M,YAAY5V,OAAmB;UAIlCA,KAAK,CAACqP,OAANrP,KAAkB,GAAG6V,SAAS;;;aAG3BA,YAAY;AACnB5M,MAAAA,MAAM,CAAC4G,mBAAP5G,CAA2B,WAA3BA,EAAwC2M,WAAxC3M;AACAA,MAAAA,MAAM,CAAC4G,mBAAP5G,CAA2B,SAA3BA,EAAsC4M,SAAtC5M;AACAyM,MAAAA,WAAW,CAAC,KAAD,CAAXA;AACAI,MAAAA,aAAa;;;;WAIRA,gBAAgB;UACjBC,UAAU,GAAGR,uBAAuB,CAAC5Y;QACvCoZ,UAAU,KAAKjW,WAAW;UAExB;AAAEoB,MAAAA;AAAF,QAAaJ;UACbgL,aAAa,GAAG5K,MAAM,GAAG6U,UAAT7U,GAAsBA,MAAM,GAAG,CAA/BA,GAAmC6U;UACnDC,WAAW,GAAG9U,MAAM,GAAG6U,UAAT7U,GAAsB6U,UAAU,GAAG,CAAnC7U,GAAuCA;AAC3D+U,IAAAA,UAAU,CAACnK,aAAD,EAAgBkK,WAAhB,CAAVC;AACAlD,IAAAA,oBAAoB,CAACjT,SAAD,CAApBiT;;;WAGOR,kBAAkBvS,OAAyC;AAClEA,IAAAA,KAAK,CAACD,eAANC;AACAiW,IAAAA,UAAU,CAACnV,gBAAgB,CAACI,MAAjBJ,GAA0B,CAA3B,EAA8BE,IAAI,CAACe,MAAnC,CAAVkU;;;WAGOA,WAAWC,aAAqBC,WAAmB;UACpD;AAAEtW,MAAAA,GAAF;AAAOqB,MAAAA;AAAP,QAAkBJ;UAClBpC,MAAM,GAAGqC,OAAO,CAAClB,GAAD;UAChBuW,SAAS,GAAGpV,IAAI,CAACE,MAAD;UAChBmV,WAAW,GAAG,CAAC,GAAGrV,IAAJ;UACdsV,OAAiB,GAAG;;SACrB,IAAI5O,CAAC,GAAGwO,aAAaxO,CAAC,GAAGyO,WAAWzO,CAAC,IAAI;UACxCvG,cAAc,CAAC;AAAED,QAAAA,MAAM,EAAEwG,CAAV;AAAa7H,QAAAA;AAAb,OAAD,GAAsB;cAChC0W,UAAU,GAAGd,MAAM,CAAC;AAAEvF,UAAAA,SAAS,EAAExR,MAAM,CAACC,GAApB;AAAyByX,UAAAA,SAAzB;AAAoCI,UAAAA,SAAS,EAAExV,IAAI,CAAC0G,CAAD;AAAnD,SAAD;;YACrB6O,UAAU,KAAKvV,IAAI,CAAC0G,CAAD,GAAK;AAC1B2O,UAAAA,WAAW,CAAC3O,CAAD,CAAX2O,GAAiBE,UAAjBF;AACAC,UAAAA,OAAO,CAAC5P,IAAR4P,CAAa5O,CAAb4O;;;;;QAKFA,OAAO,CAACvU,MAARuU,GAAiB,GAAG;AACtBd,MAAAA,YAAY,QAAZA,YAAAA,YAAY,CAAGa,WAAH,EAAgB;AAAEC,QAAAA,OAAF;AAAW5X,QAAAA;AAAX,OAAhB,CAAZ8W;;;;sBAKFjX;AACE,IAAA,WAAW8W,uBADb;AAEE,IAAA,aAAaM,eAFf;AAGE,IAAA,eAAepD;AAHjB;;;;AC3BJ,MAAMkE,IAAI,2BAAGC,UAAU,CAACC,QAAd,qBAAG,qBAAqBF,IAAlC;AAEA,MAAMG,eAAgC,GAAG;AACvC/W,EAAAA,GAAG,EAAE,CAAC,CADiC;AAEvCqB,EAAAA,MAAM,EAAE,CAAC,CAF8B;AAGvC2V,EAAAA,IAAI,EAAE;AAHiC,CAAzC;;AAyGA,SAASC,QAAT,CACE;AAEE/V,EAAAA,OAAO,EAAEmE,UAFX;AAGElE,EAAAA,IAAI,EAAEqK,OAHR;AAIEX,EAAAA,WAJF;AAKEqM,EAAAA,YALF;AAMEvB,EAAAA,YANF;AAQElK,EAAAA,SARF;AASE0L,EAAAA,eAAe,EAAEC,kBATnB;AAUEC,EAAAA,gBAAgB,EAAEC,mBAVpB;AAYEC,EAAAA,YAZF;AAaEC,EAAAA,oBAbF;AAcEpI,EAAAA,WAdF;AAeEC,EAAAA,mBAfF;AAgBE5J,EAAAA,oBAhBF;AAiBEQ,EAAAA,OAAO,EAAEP,UAjBX;AAkBEiG,EAAAA,UAlBF;AAmBEC,EAAAA,gBAnBF;AAoBE6L,EAAAA,wBApBF;AAsBEC,EAAAA,WAtBF;AAuBEC,EAAAA,iBAAiB,EAAEC,iBAvBrB;AAyBE7F,EAAAA,UAzBF;AA0BEC,EAAAA,gBA1BF;AA2BE6F,EAAAA,QA3BF;AA4BE1G,EAAAA,cA5BF;AA6BE2G,EAAAA,oBA7BF;AA8BElC,EAAAA,MA9BF;AA+BEmC,EAAAA,OA/BF;AAiCEpW,EAAAA,kBAAkB,EAAEqW,qBAjCtB;AAkCErS,EAAAA,oBAlCF;AAoCEkP,EAAAA,kBAAkB,EAAEoD,qBApCtB;AAqCEjH,EAAAA,SArCF;AAsCEkH,EAAAA,KAtCF;AAuCEjF,EAAAA,QAvCF;AAyCE,gBAAcjV,SAzChB;AA0CE,qBAAmBC,cA1CrB;AA2CE,sBAAoBka,eA3CtB;AA4CE,iBAAeC;AA5CjB,CADF,EA+CEzb,GA/CF,EAgDE;AAAA;;AAIA,gBAAA8O,SAAS,SAAT,gBAAAA,SAAS,GAAK,EAAd;AACA,QAAM0L,eAAe,GAAGC,kBAAH,WAAGA,kBAAH,GAA0B,OAAO3L,SAAP,KAAqB,QAArB,GAAgCA,SAAhC,GAA4C,EAA3F;AACA,QAAM4L,gBAAgB,GAAGC,mBAAH,WAAGA,mBAAH,GAA2B,OAAO7L,SAAP,KAAqB,QAArB,GAAgCA,SAAhC,GAA4C,EAA7F;AACA,QAAM4M,WAAW,GAAGX,WAAH,WAAGA,WAAH,GAAkB/E,KAAnC;AACA,QAAMhR,kBAAkB,GAAGqW,qBAAH,WAAGA,qBAAH,GAA4B,MAApD;AACA,2BAAArS,oBAAoB,SAApB,2BAAAA,oBAAoB,GAAK,IAAzB;AACA,QAAMkP,kBAAkB,GAAGoD,qBAAH,WAAGA,qBAAH,GAA4BrB,IAApD;AAKA,QAAM,CAAClL,SAAD,EAAY4M,YAAZ,IAA4BtP,cAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACxD,UAAD,EAAa+S,aAAb,IAA8BvP,cAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAAC1D,YAAD,EAAekT,eAAf,IAAkCxP,cAAQ,CAA8B,MAAM,IAAI9B,GAAJ,EAApC,CAAhD;AACA,QAAM,CAACjG,gBAAD,EAAmBwX,mBAAnB,IAA0CzP,cAAQ,CACtD+N,eADsD,CAAxD;AAGA,QAAM,CAAC2B,UAAD,EAAaC,aAAb,IAA8B3P,cAAQ,CAAuC,IAAvC,CAA5C;AACA,QAAM,CAAC4P,UAAD,EAAa/C,WAAb,IAA4B7M,cAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAAC6P,iBAAD,EAAoBC,aAApB,IAAqC9P,cAAQ,CAAqB/I,SAArB,CAAnD;AAKA,QAAM8Y,oBAAoB,GAAGnc,YAAM,CAACqE,gBAAD,CAAnC;AACA,QAAMyU,uBAAuB,GAAG9Y,YAAM,CAACic,iBAAD,CAAtC;AACA,QAAMG,kBAAkB,GAAGpc,YAAM,CAAC,CAAC,CAAF,CAAjC;AAKA,QAAM,CAACiM,OAAD,EAAUC,SAAV,EAAqBG,UAArB,IAAmCL,iBAAiB,EAA1D;AACA,QAAMqQ,eAAe,GAAG,CAAxB;AACA,QAAMC,gBAAgB,0BAAGrO,WAAH,oBAAGA,WAAW,CAAE3I,MAAhB,kCAA0B,CAAhD;AACA,QAAMqH,YAAY,GAAGN,UAAU,GAAGkO,eAAb,GAA+B+B,gBAAgB,GAAG7B,gBAAvE;AACA,QAAM8B,YAAY,GAAG5B,YAAY,IAAI,IAAhB,IAAwBC,oBAAoB,IAAI,IAArE;AAEA,QAAMxS,eAAe,GAAGkB,aAAO,CAAC,MAAe;AAE7C,UAAM;AAAEhE,MAAAA;AAAF,QAAasJ,OAAnB;AACA,WACEtJ,MAAM,KAAK,CAAX,IACAqV,YAAY,IAAI,IADhB,IAEAL,YAAY,IAAI,IAFhB,IAGAK,YAAY,CAAC6B,IAAb,IAAqBlX,MAHrB,IAIAsJ,OAAO,CAAC6N,KAAR,CAAehd,GAAD,IAASkb,YAAY,CAAC7W,GAAb,CAAiBwW,YAAY,CAAC7a,GAAD,CAA7B,CAAvB,CALF;AAOD,GAV8B,EAU5B,CAACmP,OAAD,EAAU+L,YAAV,EAAwBL,YAAxB,CAV4B,CAA/B;AAYA,QAAM;AACJhW,IAAAA,OADI;AAEJU,IAAAA,cAFI;AAGJkG,IAAAA,mBAHI;AAIJC,IAAAA,iBAJI;AAKJjB,IAAAA,aALI;AAMJG,IAAAA,aANI;AAOJF,IAAAA,gBAPI;AAQJrH,IAAAA,qBARI;AASJsH,IAAAA,sBATI;AAUJf,IAAAA;AAVI,MAWFb,oBAAoB,CAAC;AACvBC,IAAAA,UADuB;AAEvBC,IAAAA,YAFuB;AAGvBE,IAAAA,UAHuB;AAIvBD,IAAAA,aAAa,EAAEuD,SAJQ;AAKvBrD,IAAAA,oBALuB;AAMvBC,IAAAA,UAAU,EAAEiG,UAAU,GAAGjG,UAAH,GAAgBzF,SANf;AAOvB0F,IAAAA;AAPuB,GAAD,CAXxB;AAqBA,QAAM;AACJmF,IAAAA,mBADI;AAEJC,IAAAA,iBAFI;AAGJ5J,IAAAA,IAHI;AAIJc,IAAAA,SAJI;AAKJkL,IAAAA,cALI;AAMJ/L,IAAAA,UANI;AAOJgM,IAAAA,SAPI;AAQJC,IAAAA,YARI;AASJC,IAAAA;AATI,MAUF/B,eAAe,CAAC;AAClBC,IAAAA,OADkB;AAElBvF,IAAAA,OAFkB;AAGlB0F,IAAAA,UAHkB;AAIlBF,IAAAA,SAJkB;AAKlBlC,IAAAA,YALkB;AAMlBmC,IAAAA,SANkB;AAOlBE,IAAAA,gBAPkB;AAQlBjG,IAAAA;AARkB,GAAD,CAVnB;AAqBA,QAAMuF,eAAe,GAAGN,kBAAkB,CAAC;AACzC1J,IAAAA,OADyC;AAEzCU,IAAAA,cAFyC;AAGzCkG,IAAAA,mBAHyC;AAIzCC,IAAAA,iBAJyC;AAKzCrI,IAAAA,qBALyC;AAMzCoL,IAAAA,mBANyC;AAOzCC,IAAAA,iBAPyC;AAQzC5J,IAAAA,IARyC;AASzC0J,IAAAA,WATyC;AAUzCzJ,IAAAA;AAVyC,GAAD,CAA1C;AAaA,QAAMkY,SAAS,GAAGrT,OAAO,CAAC/D,MAAR,GAAiB,CAAjB,IAAsB,OAAOyJ,UAAP,KAAsB,UAA9D;AACA,QAAM4N,SAAS,GAAGD,SAAS,GAAG,CAAC,CAAJ,GAAQ,CAAnC;AAKA,QAAME,eAAe,GAAG7P,aAAa,CAAC8P,SAAD,CAArC;AACA,QAAMC,mBAAmB,GAAG/P,aAAa,CAACgQ,aAAD,CAAzC;AACA,QAAMC,8BAA8B,GAAGjQ,aAAa,CAACkQ,SAAD,CAApD;AACA,QAAMC,gBAAgB,GAAGnQ,aAAa,CACpC,CAACtN,GAAD,EAASwC,MAAT,EAA0Ckb,YAA1C,KAAuF;AACrF,UAAM1Y,MAAM,GAAGF,IAAI,CAACwF,OAAL,CAAatK,GAAb,CAAf;AACA6V,IAAAA,UAAU,CAAC;AAAE7Q,MAAAA,MAAF;AAAUrB,MAAAA,GAAG,EAAEnB,MAAM,CAACmB;AAAtB,KAAD,EAA8B+Z,YAA9B,CAAV;AACD,GAJmC,CAAtC;AAMA,QAAMC,iBAAiB,GAAGrQ,aAAa,CAAEtI,MAAD,IAAoB;AAC1D6Q,IAAAA,UAAU,CAAC;AAAE7Q,MAAAA,MAAF;AAAUrB,MAAAA,GAAG,EAAE,CAAC;AAAhB,KAAD,CAAV;AACD,GAFsC,CAAvC;AAGA,QAAMia,iBAAiB,GAAGtQ,aAAa,CAACrK,WAAD,CAAvC;AAKAzC,EAAAA,qBAAe,CAAC,MAAM;AACpB,QACEoE,gBAAgB,KAAK8X,oBAAoB,CAACjc,OAA1C,IACAmE,gBAAgB,CAAC+V,IAAjB,KAA0B,MAD1B,IAEA,CAAChV,kBAAkB,CAACf,gBAAD,CAHrB,EAIE;AACA;AACD;;AACD8X,IAAAA,oBAAoB,CAACjc,OAArB,GAA+BmE,gBAA/B;AACAiZ,IAAAA,YAAY,CAACjZ,gBAAD,CAAZ;AACD,GAVc,CAAf;AAYAkZ,EAAAA,yBAAmB,CAACxd,GAAD,EAAM,OAAO;AAC9Byd,IAAAA,OAAO,EAAEvR,OAAO,CAAC/L,OADa;;AAE9Bud,IAAAA,cAAc,CAACra,GAAD,EAAc;AAC1Bka,MAAAA,YAAY,CAAC;AAAEla,QAAAA;AAAF,OAAD,CAAZ;AACD,KAJ6B;;AAK9Bsa,IAAAA,WAAW,CAACjZ,MAAD,EAAiB;AAC1B,YAAM;AAAEvE,QAAAA;AAAF,UAAc+L,OAApB;AACA,UAAI,CAAC/L,OAAL,EAAc;AACdA,MAAAA,OAAO,CAACyd,QAAR,CAAiB;AACf5M,QAAAA,GAAG,EAAEP,SAAS,CAAC/L,MAAD,CADC;AAEfmZ,QAAAA,QAAQ,EAAE;AAFK,OAAjB;AAID,KAZ6B;;AAa9BtI,IAAAA;AAb8B,GAAP,CAAN,CAAnB;AAmBA,QAAMuI,kBAAkB,GAAG/R,iBAAW,CACpC,CAAC7J,MAAD,EAAkC8F,KAAlC,KAAoD;AAClD6T,IAAAA,eAAe,CAAElT,YAAD,IAAkB;AAChC,YAAMoV,eAAe,GAAG,IAAIxT,GAAJ,CAAQ5B,YAAR,CAAxB;AACAoV,MAAAA,eAAe,CAAClT,GAAhB,CAAoB3I,MAAM,CAACC,GAA3B,EAAgC6F,KAAhC;AACA,aAAO+V,eAAP;AACD,KAJc,CAAf;AAMAvJ,IAAAA,cAAc,QAAd,YAAAA,cAAc,CAAGtS,MAAM,CAACmB,GAAV,EAAe2E,KAAf,CAAd;AACD,GATmC,EAUpC,CAACwM,cAAD,CAVoC,CAAtC;AAaA,QAAM+B,oBAAoB,GAAGxK,iBAAW,CAAErH,MAAD,IAAqB;AAC5DyX,IAAAA,aAAa,CAACzX,MAAD,CAAb;AACAqU,IAAAA,uBAAuB,CAAC5Y,OAAxB,GAAkCuE,MAAlC;AACD,GAHuC,EAGrC,EAHqC,CAAxC;;AAQA,WAASoY,SAAT,CAAmB;AAAEpd,IAAAA,GAAF;AAAOgC,IAAAA,OAAP;AAAgBkG,IAAAA;AAAhB,GAAnB,EAAsE;AACpE,QAAI,CAACiT,oBAAL,EAA2B;AAE3BhU,IAAAA,sBAAsB,CAAO0T,YAAP,CAAtB;AACA,UAAMyD,eAAe,GAAG,IAAIta,GAAJ,CAAQkX,YAAR,CAAxB;;AACA,QAAInW,UAAU,CAAC/E,GAAD,CAAd,EAAqB;AACnB,WAAK,MAAMue,QAAX,IAAuBve,GAAG,CAAC+P,SAA3B,EAAsC;AACpC,cAAMyO,MAAM,GAAG3D,YAAY,CAAC0D,QAAD,CAA3B;;AACA,YAAIvc,OAAJ,EAAa;AACXsc,UAAAA,eAAe,CAACzN,GAAhB,CAAoB2N,MAApB;AACD,SAFD,MAEO;AACLF,UAAAA,eAAe,CAACG,MAAhB,CAAuBD,MAAvB;AACD;AACF;;AACDrD,MAAAA,oBAAoB,CAACmD,eAAD,CAApB;AACA;AACD;;AAED,UAAME,MAAM,GAAG3D,YAAY,CAAC7a,GAAD,CAA3B;;AACA,QAAIgC,OAAJ,EAAa;AACXsc,MAAAA,eAAe,CAACzN,GAAhB,CAAoB2N,MAApB;AACA,YAAME,cAAc,GAAG/B,kBAAkB,CAAClc,OAA1C;AACA,YAAMuE,MAAM,GAAGF,IAAI,CAACwF,OAAL,CAAatK,GAAb,CAAf;AACA2c,MAAAA,kBAAkB,CAAClc,OAAnB,GAA6BuE,MAA7B;;AACA,UAAIkD,YAAY,IAAIwW,cAAc,KAAK,CAAC,CAApC,IAAyCA,cAAc,KAAK1Z,MAAhE,EAAwE;AACtE,cAAM2Z,IAAI,GAAG1X,IAAI,CAACjC,MAAM,GAAG0Z,cAAV,CAAjB;;AACA,aAAK,IAAIlT,CAAC,GAAGkT,cAAc,GAAGC,IAA9B,EAAoCnT,CAAC,KAAKxG,MAA1C,EAAkDwG,CAAC,IAAImT,IAAvD,EAA6D;AAC3D,gBAAM3e,GAAG,GAAG8E,IAAI,CAAC0G,CAAD,CAAhB;AACA,cAAIzG,UAAU,CAAC/E,GAAD,CAAd,EAAqB;AACrBse,UAAAA,eAAe,CAACzN,GAAhB,CAAoBgK,YAAY,CAAC7a,GAAD,CAAhC;AACD;AACF;AACF,KAbD,MAaO;AACLse,MAAAA,eAAe,CAACG,MAAhB,CAAuBD,MAAvB;AACA7B,MAAAA,kBAAkB,CAAClc,OAAnB,GAA6B,CAAC,CAA9B;AACD;;AAED0a,IAAAA,oBAAoB,CAACmD,eAAD,CAApB;AACD;;AAED,WAAShB,aAAT,CAAuBtb,OAAvB,EAAyC;AACvC,QAAI,CAACmZ,oBAAL,EAA2B;AAE3BhU,IAAAA,sBAAsB,CAAO0T,YAAP,CAAtB;AACA,UAAMyD,eAAe,GAAG,IAAIta,GAAJ,CAAQkX,YAAR,CAAxB;;AAEA,SAAK,MAAMlb,GAAX,IAAkBmP,OAAlB,EAA2B;AACzB,YAAMqP,MAAM,GAAG3D,YAAY,CAAC7a,GAAD,CAA3B;;AACA,UAAIgC,OAAJ,EAAa;AACXsc,QAAAA,eAAe,CAACzN,GAAhB,CAAoB2N,MAApB;AACD,OAFD,MAEO;AACLF,QAAAA,eAAe,CAACG,MAAhB,CAAuBD,MAAvB;AACD;AACF;;AAEDrD,IAAAA,oBAAoB,CAACmD,eAAD,CAApB;AACD;;AAED,WAASrb,WAAT,CAAqB2b,eAArB,EAA+C;AAC7C,QAAI,CAACxD,wBAAL,EAA+B;AAC/B,UAAMyD,mBAAmB,GAAG,IAAI7a,GAAJ,CAAQuL,gBAAR,CAA5B;;AACA,QAAIsP,mBAAmB,CAACxa,GAApB,CAAwBua,eAAxB,CAAJ,EAA8C;AAC5CC,MAAAA,mBAAmB,CAACJ,MAApB,CAA2BG,eAA3B;AACD,KAFD,MAEO;AACLC,MAAAA,mBAAmB,CAAChO,GAApB,CAAwB+N,eAAxB;AACD;;AACDxD,IAAAA,wBAAwB,CAACyD,mBAAD,CAAxB;AACD;;AAED,WAASC,WAAT,GAAuB;AACrB,QAAInZ,kBAAkB,CAACf,gBAAD,CAAtB,EAA0C;AAE1C,UAAM8V,eAAgC,GAAG;AAAE/W,MAAAA,GAAG,EAAE,CAAP;AAAUqB,MAAAA,MAAM,EAAE,CAAlB;AAAqB2V,MAAAA,IAAI,EAAE;AAA3B,KAAzC;;AACA,QAAIhV,kBAAkB,CAAC+U,eAAD,CAAtB,EAAyC;AACvC0B,MAAAA,mBAAmB,CAAC1B,eAAD,CAAnB;AACD;AAEF;;AAED,WAASxX,aAAT,CAAuBY,KAAvB,EAAmEib,mBAAmB,GAAG,KAAzF,EAAgG;AAC9F,QAAI,EAAEjb,KAAK,CAAC/B,MAAN,YAAwBid,OAA1B,CAAJ,EAAwC;AACxC,UAAMC,WAAW,GAAGnb,KAAK,CAAC/B,MAAN,CAAamd,OAAb,CAAsB,IAAGngB,IAAc,EAAvC,MAA8C,IAAlE;AACA,UAAMogB,UAAU,GAAGlC,SAAS,IAAInZ,KAAK,CAAC/B,MAAN,CAAaqd,SAAb,CAAuBC,QAAvB,CAAgCpf,GAAhC,CAAhC;AACA,QAAI,CAACgf,WAAD,IAAgB,CAACE,UAAjB,IAA+B,CAACJ,mBAApC,EAAyD;AAEzD,UAAM;AAAEtc,MAAAA,GAAF;AAAO6c,MAAAA;AAAP,QAAmBxb,KAAzB;AACA,UAAM9D,KAAG,GAAG8E,IAAI,CAACF,gBAAgB,CAACI,MAAlB,CAAhB;;AAEA,QACE0W,OAAO,IACPzX,iBAAiB,CAACH,KAAD,CADjB,IAEA6B,kBAAkB,CAACf,gBAAD,CAFlB,IAGA,CAACG,UAAU,CAAC/E,KAAD,CAHX,IAIA4E,gBAAgB,CAACjB,GAAjB,KAAyB,CAAC,CAJ1B,IAKAiB,gBAAgB,CAAC+V,IAAjB,KAA0B,QAN5B,EAOE;AAGA,YAAM4E,IAAI,GAAG,EAAb;AACA,YAAMC,IAAI,GAAG,EAAb;;AACA,UAAIF,OAAO,KAAKC,IAAhB,EAAsB;AACpBE,QAAAA,UAAU;AACV;AACD;;AACD,UAAIH,OAAO,KAAKE,IAAhB,EAAsB;AACpBE,QAAAA,WAAW;AACX;AACD;AACF;;AAED,QACE/Z,kBAAkB,CAACf,gBAAD,CAAlB,IACAG,UAAU,CAAC/E,KAAD,CADV,IAEA4E,gBAAgB,CAACjB,GAAjB,KAAyB,CAAC,CAF1B,KAIElB,GAAG,KAAK,WAAR,IAAuBzC,KAAG,CAACgD,UAA5B,IAEEP,GAAG,KAAK,YAAR,IAAwB,CAACzC,KAAG,CAACgD,UANhC,CADF,EAQE;AACAc,MAAAA,KAAK,CAAC8P,cAAN;AACA3Q,MAAAA,WAAW,CAACjD,KAAG,CAAC2Q,EAAL,CAAX;AACA;AACD;;AAED,YAAQ7M,KAAK,CAACrB,GAAd;AACE,WAAK,QAAL;AACE6Z,QAAAA,aAAa,CAAC,IAAD,CAAb;AACAqD,QAAAA,WAAW;AACX;;AACF,WAAK,SAAL;AACA,WAAK,WAAL;AACA,WAAK,WAAL;AACA,WAAK,YAAL;AACA,WAAK,KAAL;AACA,WAAK,MAAL;AACA,WAAK,KAAL;AACA,WAAK,QAAL;AACA,WAAK,UAAL;AACEC,QAAAA,QAAQ,CAAC9b,KAAD,CAAR;AACA;;AACF;AACE+b,QAAAA,eAAe,CAAC/b,KAAD,CAAf;AACA;AAlBJ;AAoBD;;AAED,WAASgc,YAAT,CAAsBhc,KAAtB,EAA4D;AAC1D,UAAM;AAAEuL,MAAAA,SAAF;AAAalG,MAAAA;AAAb,QAA4BrF,KAAK,CAACsP,aAAxC;AACA6I,IAAAA,YAAY,CAAC5M,SAAD,CAAZ;AACA6M,IAAAA,aAAa,CAAC/S,UAAD,CAAb;AACAqS,IAAAA,QAAQ,QAAR,YAAAA,QAAQ,CAAG1X,KAAH,CAAR;AACD;;AAED,WAASic,YAAT,CAAsB/a,MAAtB,EAAsC;AACpC,WAAOiY,SAAS,GAAG9N,OAAO,CAAC7E,OAAR,CAAgBxF,IAAI,CAACE,MAAD,CAApB,CAAH,GAAwCA,MAAxD;AACD;;AAED,WAASwY,SAAT,CAAmBxY,MAAnB,EAAmChF,GAAnC,EAA2C;AACzC,QAAI,OAAOsZ,YAAP,KAAwB,UAA5B,EAAwC;AACxC,UAAM0G,SAAS,GAAGD,YAAY,CAAC/a,MAAD,CAA9B;AACA,QAAIhF,GAAG,KAAKmP,OAAO,CAAC6Q,SAAD,CAAnB,EAAgC;AAChC,UAAM7F,WAAW,GAAG,CAAC,GAAGhL,OAAJ,CAApB;AACAgL,IAAAA,WAAW,CAAC6F,SAAD,CAAX,GAAyBhgB,GAAzB;AACAsZ,IAAAA,YAAY,CAACa,WAAD,EAAc;AACxBC,MAAAA,OAAO,EAAE,CAAC4F,SAAD,CADe;AAExBxd,MAAAA,MAAM,EAAEqC,OAAO,CAACD,gBAAgB,CAACjB,GAAlB;AAFS,KAAd,CAAZ;AAID;;AAED,WAASsc,mBAAT,GAA+B;AAAA;;AAC7B,QACE,0BAAApb,OAAO,CAACD,gBAAgB,CAACjB,GAAlB,CAAP,2CAA+BuB,MAA/B,KAAyC,IAAzC,IACAN,gBAAgB,CAAC+V,IAAjB,KAA0B,QAD1B,IAEA/V,gBAAgB,CAAC5E,GAAjB,KAAyB4E,gBAAgB,CAACsb,WAH5C,EAIE;AACA;AACD;;AAED1C,IAAAA,SAAS,CAAC5Y,gBAAgB,CAACI,MAAlB,EAA0BJ,gBAAgB,CAAC5E,GAA3C,CAAT;AACD;;AAED,WAASyf,UAAT,GAAsB;AACpB,UAAM;AAAE9b,MAAAA,GAAF;AAAOqB,MAAAA;AAAP,QAAkBJ,gBAAxB;AACA0X,IAAAA,aAAa,CAAC;AAAEtc,MAAAA,GAAG,EAAEmP,OAAO,CAAC4Q,YAAY,CAAC/a,MAAD,CAAb,CAAd;AAAsCgP,MAAAA,SAAS,EAAEnP,OAAO,CAAClB,GAAD,CAAP,CAAalB;AAA9D,KAAD,CAAb;AACD;;AAED,WAASid,WAAT,GAAuB;AACrB,QAAI,CAAChE,OAAD,IAAY,CAACpC,YAAb,IAA6B+C,UAAU,KAAK,IAA5C,IAAoD,CAACpX,cAAc,CAACL,gBAAD,CAAvE,EAA2F;AACzF;AACD;;AAED,UAAM;AAAEjB,MAAAA,GAAF;AAAOqB,MAAAA;AAAP,QAAkBJ,gBAAxB;AACA,UAAM0V,SAAS,GAAGnL,OAAO,CAAC4Q,YAAY,CAAC/a,MAAD,CAAb,CAAzB;AAEA,UAAMmb,gBAAgB,GAAGzE,OAAO,CAAC;AAC/BxB,MAAAA,SAAS,EAAEmC,UAAU,CAACrc,GADS;AAE/BogB,MAAAA,eAAe,EAAE/D,UAAU,CAACrI,SAFG;AAG/BsG,MAAAA,SAH+B;AAI/B+F,MAAAA,eAAe,EAAExb,OAAO,CAAClB,GAAD,CAAP,CAAalB;AAJC,KAAD,CAAhC;AAOA+a,IAAAA,SAAS,CAACxY,MAAD,EAASmb,gBAAT,CAAT;AACD;;AAED,WAASN,eAAT,CAAyB/b,KAAzB,EAAqE;AAAA;;AACnE,QAAI,CAAC6B,kBAAkB,CAACf,gBAAD,CAAnB,IAAyCA,gBAAgB,CAACjB,GAAjB,KAAyB,CAAC,CAAvE,EAA0E;AAC1E,UAAM3D,GAAG,GAAG8E,IAAI,CAACF,gBAAgB,CAACI,MAAlB,CAAhB;AACA,QAAID,UAAU,CAAC/E,GAAD,CAAd,EAAqB;AACrB,UAAM;AAAEyC,MAAAA,GAAF;AAAOP,MAAAA;AAAP,QAAoB4B,KAA1B;;AAEA,QAAIc,gBAAgB,CAAC+V,IAAjB,KAA0B,MAA9B,EAAsC;AACpC,UAAIlY,GAAG,KAAK,OAAZ,EAAqB;AAEnBwd,QAAAA,mBAAmB;AACnBN,QAAAA,WAAW;AACZ;;AACD;AACD;;AAGD,QAAI7C,YAAY,IAAI5a,QAAhB,IAA4BO,GAAG,KAAK,GAAxC,EAA6C;AAC3C0E,MAAAA,sBAAsB,CAAO0T,YAAP,CAAtB;AACA,YAAM2D,MAAM,GAAG3D,YAAY,CAAC7a,GAAD,CAA3B;AACAod,MAAAA,SAAS,CAAC;AAAEpd,QAAAA,GAAF;AAAOgC,QAAAA,OAAO,EAAE,CAACkZ,YAAY,CAAE7W,GAAd,CAAkBma,MAAlB,CAAjB;AAA4CtW,QAAAA,YAAY,EAAE;AAA1D,OAAD,CAAT;AAEApE,MAAAA,KAAK,CAAC8P,cAAN;AACA;AACD;;AAED,UAAMpR,MAAM,GAAGqC,OAAO,CAACD,gBAAgB,CAACjB,GAAlB,CAAtB;AACA,6BAAAnB,MAAM,CAAC0T,aAAP,2CAAsBoK,aAAtB,0CAAsBA,aAAtB,CAAsCxc,KAAtC;AACA,QAAIA,KAAK,CAACyc,kBAAN,EAAJ,EAAgC;;AAEhC,QAAItb,cAAc,CAACL,gBAAD,CAAd,IAAoCR,kBAAkB,CAACN,KAAD,CAA1D,EAAmE;AACjEsY,MAAAA,mBAAmB,CAAC,CAAC;AAAEzY,QAAAA,GAAF;AAAOqB,QAAAA;AAAP,OAAD,MAAsB;AACxCrB,QAAAA,GADwC;AAExCqB,QAAAA,MAFwC;AAGxCvC,QAAAA,GAHwC;AAIxCkY,QAAAA,IAAI,EAAE,MAJkC;AAKxC3a,QAAAA,GALwC;AAMxCkgB,QAAAA,WAAW,EAAElgB;AAN2B,OAAtB,CAAD,CAAnB;AAQD;AACF;;AAED,WAASwgB,qBAAT,CAA+BxgB,GAA/B,EAAuCygB,aAAvC,EAAgE;AAC9D,QAAI7b,gBAAgB,CAAC+V,IAAjB,KAA0B,QAA9B,EAAwC;;AACxC,QAAI8F,aAAJ,EAAmB;AACjBjD,MAAAA,SAAS,CAAC5Y,gBAAgB,CAACI,MAAlB,EAA0BhF,GAA1B,CAAT;AACA2f,MAAAA,WAAW;AACZ,KAHD,MAGO;AACLvD,MAAAA,mBAAmB,CAAE/K,QAAD,KAAe,EAAE,GAAGA,QAAL;AAAerR,QAAAA;AAAf,OAAf,CAAD,CAAnB;AACD;AACF;;AAED,WAAS0gB,aAAT,CAAuBD,aAAvB,EAAgD;AAC9C,QAAIA,aAAJ,EAAmB;AACjBR,MAAAA,mBAAmB;AACpB;;AACDN,IAAAA,WAAW;AACZ;;AAKD,WAASha,kBAAT,CAA4B;AAAEhC,IAAAA,GAAF;AAAOqB,IAAAA;AAAP,GAA5B,EAAgE;AAC9D,WAAOA,MAAM,IAAI,CAAV,IAAeA,MAAM,GAAGF,IAAI,CAACe,MAA7B,IAAuClC,GAAG,IAAIuZ,SAA9C,IAA2DvZ,GAAG,GAAGkB,OAAO,CAACgB,MAAhF;AACD;;AAED,WAASZ,cAAT,CAAwBoM,QAAxB,EAAqD;AACnD,WACE1L,kBAAkB,CAAC0L,QAAD,CAAlB,IACA1M,sBAAsB,CAAC;AAAEE,MAAAA,OAAF;AAAWC,MAAAA,IAAX;AAAiBF,MAAAA,gBAAgB,EAAEyM,QAAnC;AAA6CtM,MAAAA;AAA7C,KAAD,CAFxB;AAID;;AAED,WAAS8Q,UAAT,CAAoBxE,QAApB,EAAwCqM,YAAxC,EAA6E;AAC3E,QAAI,CAAC/X,kBAAkB,CAAC0L,QAAD,CAAvB,EAAmC;AACnC4O,IAAAA,mBAAmB;;AAEnB,QAAIvC,YAAY,IAAIzY,cAAc,CAACoM,QAAD,CAAlC,EAA8C;AAC5C,YAAMrR,GAAG,GAAG8E,IAAI,CAACuM,QAAQ,CAACrM,MAAV,CAAhB;AACAoX,MAAAA,mBAAmB,CAAC,EAAE,GAAG/K,QAAL;AAAesJ,QAAAA,IAAI,EAAE,MAArB;AAA6BlY,QAAAA,GAAG,EAAE,IAAlC;AAAwCzC,QAAAA,GAAxC;AAA6CkgB,QAAAA,WAAW,EAAElgB;AAA1D,OAAD,CAAnB;AACD,KAHD,MAGO;AACLoc,MAAAA,mBAAmB,CAAC,EAAE,GAAG/K,QAAL;AAAesJ,QAAAA,IAAI,EAAE;AAArB,OAAD,CAAnB;AACD;;AACDc,IAAAA,oBAAoB,QAApB,YAAAA,oBAAoB,CAAG,EAAE,GAAGpK;AAAL,KAAH,CAApB;AACD;;AAED,WAASsO,WAAT,GAAuB;AACrB,QAAI/a,gBAAgB,CAAC+V,IAAjB,KAA0B,QAA9B,EAAwC;AACxCyB,IAAAA,mBAAmB,CAAC,CAAC;AAAEzY,MAAAA,GAAF;AAAOqB,MAAAA;AAAP,KAAD,MAAsB;AAAErB,MAAAA,GAAF;AAAOqB,MAAAA,MAAP;AAAe2V,MAAAA,IAAI,EAAE;AAArB,KAAtB,CAAD,CAAnB;AACD;;AAED,WAASkD,YAAT,CAAsB;AAAEla,IAAAA,GAAF;AAAOqB,IAAAA;AAAP,GAAtB,EAAgE;AAC9D,UAAM;AAAEvE,MAAAA;AAAF,QAAc+L,OAApB;AACA,QAAI,CAAC/L,OAAL,EAAc;;AAEd,QAAI,OAAOkD,GAAP,KAAe,QAAf,IAA2BA,GAAG,GAAGN,qBAArC,EAA4D;AAAA;;AAC1D,iBAAA2B,MAAM,SAAN,aAAAA,MAAM,GAAKJ,gBAAgB,CAACI,MAA5B;AACA,UAAI,CAACW,kBAAkB,CAAC;AAAEX,QAAAA,MAAF;AAAUrB,QAAAA;AAAV,OAAD,CAAvB,EAA0C;AAC1C,YAAM;AAAEsJ,QAAAA;AAAF,UAAkBxM,OAAxB;AACA,YAAM+B,MAAM,GAAGqC,OAAO,CAAClB,GAAD,CAAtB;AACA,YAAM;AAAE8D,QAAAA,IAAF;AAAQa,QAAAA;AAAR,UAAkBsC,aAAa,CAACW,GAAd,CAAkB/I,MAAlB,CAAxB;AACA,UAAI8Q,KAAK,GAAG7L,IAAI,GAAGa,KAAnB;AACA,YAAMtI,GAAG,GAAG8E,IAAI,CAACE,MAAD,CAAhB;;AACA,UAAI,CAACD,UAAU,CAAC/E,GAAD,CAAf,EAAsB;AACpB,cAAMuD,OAAO,GAAGH,UAAU,CAACZ,MAAD,EAASa,qBAAT,EAAgC;AAAE8C,UAAAA,IAAI,EAAE,KAAR;AAAenG,UAAAA;AAAf,SAAhC,CAA1B;;AACA,YAAIuD,OAAO,KAAKK,SAAhB,EAA2B;AACzB,gBAAM;AAAE6D,YAAAA,IAAF;AAAQa,YAAAA;AAAR,cAAkBsC,aAAa,CAACW,GAAd,CAAkB1G,OAAO,CAACrC,MAAM,CAACmB,GAAP,GAAaJ,OAAb,GAAuB,CAAxB,CAAzB,CAAxB;AACA+P,UAAAA,KAAK,GAAG7L,IAAI,GAAGa,KAAf;AACD;AACF;;AAED,YAAMqY,oBAAoB,GAAGlZ,IAAI,GAAG0B,UAAU,GAAGwB,sBAAjD;AACA,YAAMiW,qBAAqB,GAAGtN,KAAK,GAAGrG,WAAW,GAAG9D,UAApD;;AACA,UAAIwX,oBAAJ,EAA0B;AACxBlgB,QAAAA,OAAO,CAAC0I,UAAR,GAAqB1B,IAAI,GAAGkD,sBAA5B;AACD,OAFD,MAEO,IAAIiW,qBAAJ,EAA2B;AAChCngB,QAAAA,OAAO,CAAC0I,UAAR,GAAqBmK,KAAK,GAAGrG,WAA7B;AACD;AACF;;AAED,QAAI,OAAOjI,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,YAAM6b,MAAM,GAAG9P,SAAS,CAAC/L,MAAD,CAAxB;AACA,YAAMoK,SAAS,GAAG4B,YAAY,CAAChM,MAAD,CAA9B;;AACA,UAAI6b,MAAM,GAAGxR,SAAb,EAAwB;AAEtB5O,QAAAA,OAAO,CAAC4O,SAAR,GAAoBwR,MAApB;AACD,OAHD,MAGO,IAAIA,MAAM,GAAGzR,SAAT,GAAqBC,SAAS,GAAGnC,YAArC,EAAmD;AAExDzM,QAAAA,OAAO,CAAC4O,SAAR,GAAoBwR,MAAM,GAAGzR,SAAT,GAAqBlC,YAAzC;AACD;AACF;AACF;;AAED,WAAS4T,eAAT,CAAyBre,GAAzB,EAAsCyB,OAAtC,EAAwDhC,QAAxD,EAAqF;AACnF,UAAM;AAAEyB,MAAAA,GAAF;AAAOqB,MAAAA;AAAP,QAAkBJ,gBAAxB;AACA,UAAM5E,GAAG,GAAG8E,IAAI,CAACE,MAAD,CAAhB;AACA,UAAM+C,aAAa,GAAGpC,kBAAkB,CAACf,gBAAD,CAAlB,IAAwCjB,GAAG,KAAK,CAAC,CAAvE;;AAGA,QACElB,GAAG,KAAK,WAAR,IACAsF,aADA,IAEAhD,UAAU,CAAC/E,GAAD,CAFV,IAGA,CAACA,GAAG,CAACgD,UAHL,IAIAhD,GAAG,CAACwQ,KAAJ,KAAc,CALhB,EAME;AACA,UAAIuQ,YAAY,GAAG,CAAC,CAApB;;AACA,WAAK,IAAIvV,CAAC,GAAG5G,gBAAgB,CAACI,MAAjB,GAA0B,CAAvC,EAA0CwG,CAAC,IAAI,CAA/C,EAAkDA,CAAC,EAAnD,EAAuD;AACrD,cAAMwV,SAAS,GAAGlc,IAAI,CAAC0G,CAAD,CAAtB;;AACA,YAAIzG,UAAU,CAACic,SAAD,CAAV,IAAyBA,SAAS,CAACrQ,EAAV,KAAiB3Q,GAAG,CAACuQ,QAAlD,EAA4D;AAC1DwQ,UAAAA,YAAY,GAAGvV,CAAf;AACA;AACD;AACF;;AACD,UAAIuV,YAAY,KAAK,CAAC,CAAtB,EAAyB;AACvB,eAAO;AAAEpd,UAAAA,GAAF;AAAOqB,UAAAA,MAAM,EAAE+b;AAAf,SAAP;AACD;AACF;;AAED,YAAQte,GAAR;AACE,WAAK,SAAL;AACE,eAAO;AAAEkB,UAAAA,GAAF;AAAOqB,UAAAA,MAAM,EAAEA,MAAM,GAAG;AAAxB,SAAP;;AACF,WAAK,WAAL;AACE,eAAO;AAAErB,UAAAA,GAAF;AAAOqB,UAAAA,MAAM,EAAEA,MAAM,GAAG;AAAxB,SAAP;;AACF,WAAK,WAAL;AACE,eAAO;AAAErB,UAAAA,GAAG,EAAEA,GAAG,GAAG,CAAb;AAAgBqB,UAAAA;AAAhB,SAAP;;AACF,WAAK,YAAL;AACE,eAAO;AAAErB,UAAAA,GAAG,EAAEA,GAAG,GAAG,CAAb;AAAgBqB,UAAAA;AAAhB,SAAP;;AACF,WAAK,KAAL;AACE,eAAO;AAAErB,UAAAA,GAAG,EAAEA,GAAG,IAAIzB,QAAQ,GAAG,CAAC,CAAJ,GAAQ,CAApB,CAAV;AAAkC8C,UAAAA;AAAlC,SAAP;;AACF,WAAK,MAAL;AAEE,YAAI+C,aAAJ,EAAmB,OAAO;AAAEpE,UAAAA,GAAF;AAAOqB,UAAAA,MAAM,EAAE;AAAf,SAAP;AACnB,eAAOd,OAAO,GAAG;AAAEP,UAAAA,GAAG,EAAE,CAAP;AAAUqB,UAAAA,MAAM,EAAE;AAAlB,SAAH,GAA2B;AAAErB,UAAAA,GAAG,EAAE,CAAP;AAAUqB,UAAAA;AAAV,SAAzC;;AACF,WAAK,KAAL;AAEE,YAAI+C,aAAJ,EAAmB,OAAO;AAAEpE,UAAAA,GAAF;AAAOqB,UAAAA,MAAM,EAAEF,IAAI,CAACe,MAAL,GAAc;AAA7B,SAAP;AACnB,eAAO3B,OAAO,GACV;AAAEP,UAAAA,GAAG,EAAEkB,OAAO,CAACgB,MAAR,GAAiB,CAAxB;AAA2Bb,UAAAA,MAAM,EAAEF,IAAI,CAACe,MAAL,GAAc;AAAjD,SADU,GAEV;AAAElC,UAAAA,GAAG,EAAEkB,OAAO,CAACgB,MAAR,GAAiB,CAAxB;AAA2Bb,UAAAA;AAA3B,SAFJ;;AAGF,WAAK,QAAL;AAAe;AACb,gBAAMic,QAAQ,GAAGlQ,SAAS,CAAC/L,MAAD,CAAT,GAAoBgM,YAAY,CAAChM,MAAD,CAAhC,GAA2CkI,YAA5D;AACA,iBAAO;AAAEvJ,YAAAA,GAAF;AAAOqB,YAAAA,MAAM,EAAEic,QAAQ,GAAG,CAAX,GAAehQ,UAAU,CAACgQ,QAAD,CAAzB,GAAsC;AAArD,WAAP;AACD;;AACD,WAAK,UAAL;AAAiB;AACf,gBAAMA,QAAQ,GAAGlQ,SAAS,CAAC/L,MAAD,CAAT,GAAoBkI,YAArC;AACA,iBAAO;AAAEvJ,YAAAA,GAAF;AAAOqB,YAAAA,MAAM,EAAEic,QAAQ,GAAGnQ,cAAX,GAA4BG,UAAU,CAACgQ,QAAD,CAAtC,GAAmDnc,IAAI,CAACe,MAAL,GAAc;AAAhF,WAAP;AACD;;AACD;AACE,eAAOjB,gBAAP;AA9BJ;AAgCD;;AAED,WAASgb,QAAT,CAAkB9b,KAAlB,EAA8D;AAC5D,QAAIc,gBAAgB,CAAC+V,IAAjB,KAA0B,MAA9B,EAAsC;AAAA;;AACpC,YAAMuG,YAAY,uDAChBrc,OAAO,CAACD,gBAAgB,CAACjB,GAAlB,CAAP,CAA8BuS,aADd,qBAChB,uBAA6CgL,YAD7B,qCAC6C5c,kBAD/D;AAEA,UAAI,CAAC4c,YAAY,CAACpd,KAAD,CAAjB,EAA0B;AAC3B;;AACD,UAAM;AAAErB,MAAAA,GAAF;AAAOP,MAAAA;AAAP,QAAoB4B,KAA1B;AACA,QAAI6W,IAAI,GAAGrV,kBAAX;;AACA,QAAI7C,GAAG,KAAK,KAAZ,EAAmB;AAEjB,UACEgE,WAAW,CAAC;AACVvE,QAAAA,QADU;AAEVoD,QAAAA,kBAFU;AAGVT,QAAAA,OAHU;AAIVe,QAAAA,SAAS,EAAEd,IAAI,CAACe,MAJN;AAKVjB,QAAAA;AALU,OAAD,CADb,EAQE;AACAqb,QAAAA,mBAAmB;AAEnB;AACD;;AAEDtF,MAAAA,IAAI,GAAGrV,kBAAkB,KAAK,MAAvB,GAAgC,YAAhC,GAA+CA,kBAAtD;AACD;;AAGDxB,IAAAA,KAAK,CAAC8P,cAAN;AAEA,UAAM1P,OAAO,GAAGD,iBAAiB,CAACH,KAAD,CAAjC;AACA,UAAM4B,YAAY,GAAGob,eAAe,CAACre,GAAD,EAAMyB,OAAN,EAAehC,QAAf,CAApC;;AACA,QACEwD,YAAY,CAACV,MAAb,KAAwBJ,gBAAgB,CAACI,MAAzC,IACAU,YAAY,CAAC/B,GAAb,KAAqBiB,gBAAgB,CAACjB,GAFxC,EAGE;AACA;AACD;;AAED,UAAMwd,wBAAwB,GAAG9b,2BAA2B,CAAC;AAC3DR,MAAAA,OAD2D;AAE3DU,MAAAA,cAF2D;AAG3DT,MAAAA,IAH2D;AAI3DzB,MAAAA,qBAJ2D;AAK3DiC,MAAAA,kBAAkB,EAAEqV,IALuC;AAM3DnV,MAAAA,eAAe,EAAEZ,gBAN0C;AAO3Dc,MAAAA,YAP2D;AAQ3DC,MAAAA,kBAR2D;AAS3DZ,MAAAA;AAT2D,KAAD,CAA5D;AAYA8Q,IAAAA,UAAU,CAACsL,wBAAD,CAAV;AACD;;AAED,WAASC,qBAAT,CAA+BC,aAA/B,EAA0E;AACxE,QAAI7E,iBAAiB,KAAK5Y,SAA1B,EAAqC;AACrC,UAAM;AAAEoB,MAAAA;AAAF,QAAaJ,gBAAnB;AAEA,UAAM4Q,aAAa,GACjBxQ,MAAM,GAAGwX,iBAAT,GACIxX,MAAM,GAAGqc,aAAT,IAA0BA,aAAa,IAAI7E,iBAD/C,GAEIxX,MAAM,GAAGqc,aAAT,IAA0BA,aAAa,IAAI7E,iBAHjD;AAKA,WAAOhH,aAAa,GAAG5Q,gBAAgB,CAACjB,GAApB,GAA0BC,SAA9C;AACD;;AAED,WAAS0d,aAAT,CAAuBtc,MAAvB,EAAuC;AACrC,QACEJ,gBAAgB,CAACI,MAAjB,KAA4BA,MAA5B,IACAJ,gBAAgB,CAAC+V,IAAjB,KAA0B,MAD1B,IAEAsC,SAFA,IAGA1D,MAAM,IAAI,IAJZ,EAKE;AACA;AACD;;AAED,wBACElX,eAAC,UAAD;AACE,MAAA,IAAI,EAAE8M,OADR;AAEE,MAAA,OAAO,EAAEtK,OAFX;AAGE,MAAA,gBAAgB,EAAED,gBAHpB;AAIE,MAAA,cAAc,EAAEK,cAJlB;AAKE,MAAA,uBAAuB,EAAEoU,uBAL3B;AAME,MAAA,YAAY,EAAEC,YANhB;AAOE,MAAA,MAAM,EAAEC,MAPV;AAQE,MAAA,WAAW,EAAEC,WARf;AASE,MAAA,oBAAoB,EAAE3C;AATxB,MADF;AAaD;;AAED,WAAS0K,aAAT,CAAuBvc,MAAvB,EAAuC;AACrC,QAAIJ,gBAAgB,CAACI,MAAjB,KAA4BA,MAA5B,IAAsCJ,gBAAgB,CAAC+V,IAAjB,KAA0B,QAApE,EAA8E;AAE9E,UAAM;AAAEhX,MAAAA,GAAF;AAAO3D,MAAAA;AAAP,QAAe4E,gBAArB;AACA,UAAMpC,MAAM,GAAGqC,OAAO,CAAClB,GAAD,CAAtB;AACA,UAAMJ,OAAO,GAAGH,UAAU,CAACZ,MAAD,EAASa,qBAAT,EAAgC;AAAE8C,MAAAA,IAAI,EAAE,KAAR;AAAenG,MAAAA;AAAf,KAAhC,CAA1B;AAEA,wBACEqC,eAAC,QAAD;AAEE,MAAA,MAAM,EAAEG,MAFV;AAGE,MAAA,OAAO,EAAEe,OAHX;AAIE,MAAA,GAAG,EAAEvD,GAJP;AAKE,MAAA,kBAAkB,EAAEwY,kBALtB;AAME,MAAA,SAAS,EAAEtV,aANb;AAOE,MAAA,WAAW,EAAEsd,qBAPf;AAQE,MAAA,OAAO,EAAEE;AARX,OACOle,MAAM,CAACC,GADd,CADF;AAYD;;AAED,WAAS+e,eAAT,GAA2B;AACzB,UAAMC,WAAW,GAAG,EAApB;AACA,QAAI7R,aAAa,GAAG,CAApB;AAEA,UAAM;AAAEjM,MAAAA,GAAG,EAAE+d,WAAP;AAAoB1c,MAAAA,MAAM,EAAE2c;AAA5B,QAA+C/c,gBAArD;AACA,UAAMgd,kBAAkB,GAAGjc,kBAAkB,CAACf,gBAAD,CAA7C;AACA,UAAMoV,WAAW,GACf4H,kBAAkB,IAAID,cAAc,GAAGlT,mBAAvC,GACIA,mBAAmB,GAAG,CAD1B,GAEIA,mBAHN;AAIA,UAAMwL,SAAS,GACb2H,kBAAkB,IAAID,cAAc,GAAGjT,iBAAvC,GACIA,iBAAiB,GAAG,CADxB,GAEIA,iBAHN;;AAKA,SAAK,IAAImT,cAAc,GAAG7H,WAA1B,EAAuC6H,cAAc,IAAI5H,SAAzD,EAAoE4H,cAAc,EAAlF,EAAsF;AACpF,YAAMC,oBAAoB,GACxBD,cAAc,KAAKpT,mBAAmB,GAAG,CAAzC,IAA8CoT,cAAc,KAAKnT,iBAAiB,GAAG,CADvF;AAEA,YAAM1J,MAAM,GAAG8c,oBAAoB,GAAGH,cAAH,GAAoBE,cAAvD;AAEA,UAAIE,UAAU,GAAGlT,eAAjB;AACA,YAAMmT,cAAc,GAAGnd,OAAO,CAAC6c,WAAD,CAA9B;;AAGA,UAAIM,cAAc,KAAKpe,SAAvB,EAAkC;AAChC,YAAIke,oBAAJ,EAA0B;AAExBC,UAAAA,UAAU,GAAG,CAACC,cAAD,CAAb;AACD,SAHD,MAGO,IAAIL,cAAc,KAAK3c,MAAnB,IAA6B,CAAC6J,eAAe,CAAC7E,QAAhB,CAAyBgY,cAAzB,CAAlC,EAA4E;AAEjFD,UAAAA,UAAU,GACRL,WAAW,GAAG7S,eAAe,CAACA,eAAe,CAAChJ,MAAhB,GAAyB,CAA1B,CAAf,CAA4ClC,GAA1D,GACI,CAAC,GAAGkL,eAAJ,EAAqBmT,cAArB,CADJ,GAEI,CACE,GAAGnT,eAAe,CAACoT,KAAhB,CAAsB,CAAtB,EAAyB5e,qBAAqB,GAAG,CAAjD,CADL,EAEE2e,cAFF,EAGE,GAAGnT,eAAe,CAACoT,KAAhB,CAAsB5e,qBAAqB,GAAG,CAA9C,CAHL,CAHN;AAQD;AACF;;AAED,YAAMrD,GAAG,GAAG8E,IAAI,CAACE,MAAD,CAAhB;AACA,YAAMsM,GAAG,GAAGP,SAAS,CAAC/L,MAAD,CAAT,GAAoB8V,eAAhC;;AACA,UAAI/V,UAAU,CAAC/E,GAAD,CAAd,EAAqB;AACnB,SAAC;AAAE4P,UAAAA;AAAF,YAAoB5P,GAArB;AACA,cAAMkiB,kBAAkB,GACtBpF,YAAY,IAAI9c,GAAG,CAAC+P,SAAJ,CAAciN,KAAd,CAAqBmF,EAAD,IAAQjH,YAAR,oBAAQA,YAAY,CAAE7W,GAAd,CAAkBwW,YAAY,CAAEsH,EAAF,CAA9B,CAA5B,CADlB;AAEAV,QAAAA,WAAW,CAACjX,IAAZ,eACEnI,eAAC,gBAAD;AACE,wBAAYrC,GAAG,CAACwQ,KAAJ,GAAY,CAD1B;AAEE,0BAAcxQ,GAAG,CAAC4Q,OAFpB;AAGE,2BAAe5Q,GAAG,CAAC0Q,QAAJ,GAAe,CAHhC;AAIE,2BAAekM,eAAe,GAAGhN,aAAlB,GAAkC,CAJnD;AAKE,2BAAekN,YAAY,GAAGoF,kBAAH,GAAwBte,SALrD;AAOE,UAAA,EAAE,EAAE5D,GAAG,CAAC2Q,EAPV;AAQE,UAAA,QAAQ,EAAE3Q,GAAG,CAAC+C,QARhB;AASE,UAAA,eAAe,EAAEgf,UATnB;AAUE,UAAA,SAAS,EAAE/hB,GAAG,CAAC+P,SAVjB;AAWE,UAAA,MAAM,EAAE/K,MAXV;AAYE,UAAA,GAAG,EAAEhF,GAZP;AAaE,UAAA,GAAG,EAAEsR,GAbP;AAcE,UAAA,MAAM,EAAEN,YAAY,CAAChM,MAAD,CAdtB;AAeE,UAAA,KAAK,EAAEhF,GAAG,CAACwQ,KAfb;AAgBE,UAAA,UAAU,EAAExQ,GAAG,CAACgD,UAhBlB;AAiBE,UAAA,eAAe,EAAE2e,cAAc,KAAK3c,MAAnB,GAA4B0c,WAA5B,GAA0C9d,SAjB7D;AAkBE,UAAA,aAAa,EAAEse,kBAlBjB;AAmBE,UAAA,WAAW,EAAEvE,iBAnBf;AAoBE,UAAA,WAAW,EAAEC;AApBf,WAMO5d,GAAG,CAAC2Q,EANX,CADF;AAwBA;AACD;;AAEDf,MAAAA,aAAa;AACb,UAAInN,GAAJ;AACA,UAAIsF,aAAa,GAAG,KAApB;;AACA,UAAI,OAAO8S,YAAP,KAAwB,UAA5B,EAAwC;AAAA;;AACtCpY,QAAAA,GAAG,GAAGoY,YAAY,CAAC7a,GAAD,CAAlB;AACA+H,QAAAA,aAAa,wBAAGmT,YAAH,oBAAGA,YAAY,CAAE7W,GAAd,CAAkB5B,GAAlB,CAAH,gCAA6B,KAA1C;AACD,OAHD,MAGO;AACLA,QAAAA,GAAG,GAAGwa,SAAS,GAAGrN,aAAH,GAAmB5K,MAAlC;AACD;;AAEDyc,MAAAA,WAAW,CAACjX,IAAZ,eACEnI,eAAC,WAAD;AACE,yBAAeua,eAAe,IAAIK,SAAS,GAAGrN,aAAH,GAAmB5K,MAAhC,CAAf,GAAyD,CAD1E;AAEE,yBAAe8X,YAAY,GAAG/U,aAAH,GAAmBnE,SAFhD;AAIE,QAAA,MAAM,EAAEoB,MAJV;AAKE,QAAA,GAAG,EAAEhF,GALP;AAME,QAAA,eAAe,EAAE+hB,UANnB;AAOE,QAAA,aAAa,EAAEha,aAPjB;AAQE,QAAA,UAAU,EAAE2N,UARd;AASE,QAAA,gBAAgB,EAAEC,gBATpB;AAUE,QAAA,QAAQ,EAAEiB,QAVZ;AAWE,QAAA,GAAG,EAAEtF,GAXP;AAYE,QAAA,MAAM,EAAEN,YAAY,CAAChM,MAAD,CAZtB;AAaE,QAAA,aAAa,EACXqX,UAAU,KAAK,IAAf,IAAuBA,UAAU,CAACrc,GAAX,KAAmBA,GAA1C,GACI6E,OAAO,CAACkP,SAAR,CAAmBqO,CAAD,IAAOA,CAAC,CAAC3f,GAAF,KAAU4Z,UAAU,CAACrI,SAA9C,CADJ,GAEIpQ,SAhBR;AAkBE,QAAA,eAAe,EAAE+d,cAAc,KAAK3c,MAAnB,GAA4B0c,WAA5B,GAA0C9d,SAlB7D;AAmBE,QAAA,kBAAkB,EAAEwd,qBAAqB,CAACpc,MAAD,CAnB3C;AAoBE,QAAA,oBAAoB,EAAEuX,UAAU,GAAG1F,oBAAH,GAA0BjT,SApB5D;AAqBE,QAAA,qBAAqB,EAAEP,qBArBzB;AAsBE,QAAA,WAAW,EAAEka,8BAtBf;AAuBE,QAAA,UAAU,EAAEE,gBAvBd;AAwBE,QAAA,sBAAsB,EAAE6D,aAAa,CAACtc,MAAD,CAxBvC;AAyBE,QAAA,kBAAkB,EAAEuc,aAAa,CAACvc,MAAD;AAzBnC,SAGOvC,GAHP,CADF;AA6BD;;AAED,WAAOgf,WAAP;AACD;;AAGD,MAAI7c,gBAAgB,CAACjB,GAAjB,IAAwBkB,OAAO,CAACgB,MAAhC,IAA0CjB,gBAAgB,CAACI,MAAjB,IAA2BF,IAAI,CAACe,MAA9E,EAAsF;AACpFuW,IAAAA,mBAAmB,CAAC1B,eAAD,CAAnB;AACA7D,IAAAA,oBAAoB,CAACjT,SAAD,CAApB;AACD;;AAED,MACEgB,gBAAgB,CAAC+V,IAAjB,KAA0B,MAA1B,IACA7V,IAAI,CAACF,gBAAgB,CAACI,MAAlB,CAAJ,KAAkCJ,gBAAgB,CAACsb,WAFrD,EAGE;AAEAP,IAAAA,WAAW;AACZ;;AAED,sBACExd;AACE,IAAA,IAAI,EAAE8a,SAAS,GAAG,UAAH,GAAgB,MADjC;AAEE,kBAAYtb,SAFd;AAGE,uBAAiBC,cAHnB;AAIE,wBAAkBka,eAJpB;AAKE,4BAAsBgB,YAAY,GAAG,IAAH,GAAUlZ,SAL9C;AAME,qBAAeiB,OAAO,CAACgB,MANzB;AAOE,qBAAe+W,eAAe,GAAGhX,SAAlB,GAA8BiX,gBAP/C;AAQE,IAAA,SAAS,EAAEza,IAAI,CAAC/C,aAAD,EAA6DsV,SAA7D,EAA+C4H,UAA/C,IAAmB9c,yBAAnB,CARjB;AASE,IAAA,KAAK,EACH,EACE,GAAGoc,KADL;AAEE,6BAAwB,GAAEf,eAAgB,IAF5C;AAGE,qBAAgB,GAAEpQ,gBAAiB,IAHrC;AAIE,8BAAyB,GAAEsQ,gBAAiB,IAJ9C;AAKE,SAAGvQ;AALL,KAVJ;AAkBE,IAAA,GAAG,EAAE+B,OAlBP;AAmBE,IAAA,QAAQ,EAAEsT,YAnBZ;AAoBE,IAAA,SAAS,EAAE5c,aApBb;AAqBE,mBAAa6Y,MArBf;AAAA,4BAuBE1Z,eAACwS,WAAD;AACE,MAAA,OAAO,EAAEhG,eADX;AAEE,MAAA,cAAc,EAAEuP,kBAFlB;AAGE,MAAA,eAAe,EAAEzV,eAHnB;AAIE,MAAA,wBAAwB,EAAE0U,mBAJ5B;AAKE,MAAA,WAAW,EAAEtK,WALf;AAME,MAAA,mBAAmB,EAAEC,mBANvB;AAOE,MAAA,qBAAqB,EAAE3P;AAPzB,MAvBF,EAgCGyB,IAAI,CAACe,MAAL,KAAgB,CAAhB,IAAqB0V,iBAArB,gBACClZ,eAAC,iBAAD,KADD,gBAGCF;AAAA,iBAKG,CAACwD,kBAAkB,CAACf,gBAAD,CAAnB,iBACCvC;AAAK,QAAA,SAAS,EAAE9C,kBAAhB;AAAoC,QAAA,QAAQ,EAAE,CAA9C;AAAiD,QAAA,OAAO,EAAEuf;AAA1D,QANJ,eAQEzc;AAAK,QAAA,KAAK,EAAE;AAAEkP,UAAAA,MAAM,EAAExK,GAAG,CAAC+J,cAAD,EAAiB5D,YAAjB;AAAb;AAAZ,QARF,eASE7K,eAAC,0BAAD;AAA4B,QAAA,KAAK,EAAE8a,eAAnC;AAAA,kBACGqE,eAAe;AADlB,QATF,EAYGhT,WAZH,oBAYGA,WAAW,CAAE1E,GAAb,CAAiB,CAAC9J,GAAD,EAAMgF,MAAN,kBAChB3C,eAAC4V,YAAD;AACE,yBAAe2E,eAAe,GAAGhX,SAAlB,GAA8BZ,MAA9B,GAAuC,CADxD;AAGE,QAAA,MAAM,EAAEA,MAHV;AAIE,QAAA,GAAG,EAAEhF,GAJP;AAKE,QAAA,MAAM,EAAEgb,gBAAgB,IAAIxM,WAAW,CAAC3I,MAAZ,GAAqB,CAArB,GAAyBb,MAA7B,CAL1B;AAME,QAAA,eAAe,EAAE6J,eANnB;AAOE,QAAA,qBAAqB,EAAExL;AAPzB,SAEO2B,MAFP,CADD,CAZH;AAAA,MAnCJ;AAAA,IADF;AA+DD;;AAED,gCAAeoS,gBAAU,CAACwD,QAAD,CAAzB;;;;;AC7lCA,MAAMyH,UAAU,sBAAhB;AA0BO,MAAMC,mBAAmB,sBAAsBD,YAA/C;;AAEP,SAASE,kBAAT,CAA4BC,KAA5B,EAA4D;AAC1DA,EAAAA,KAAK,QAALA,YAAAA,KAAK,CAAE9hB,KAAP8hB;AACAA,EAAAA,KAAK,QAALA,YAAAA,KAAK,CAAEC,MAAPD;;;AAGa,SAASE,UAAT,CAAuC;AACpD1iB,EAAAA,GADoD;AAEpDwC,EAAAA,MAFoD;AAGpDoT,EAAAA,WAHoD;AAIpD0C,EAAAA;AAJoD,CAAvC,EAKoB;sBAE/BjW;AACE,IAAA,WAAWigB,mBADb;AAEE,IAAA,KAAKC,kBAFP;AAGE,IAAA,OAAOviB,GAAG,CAACwC,MAAM,CAACC,GAAR,CAHZ;AAIE,IAAA,UAAWqB,KAAD,IAAW8R,WAAW,CAAC,EAAE,GAAG5V,GAAL;OAAWwC,MAAM,CAACC,MAAMqB,KAAK,CAAC/B,MAAN+B,CAAaxC;AAArC,KAAD,CAJlC;AAKE,IAAA,QAAQ,MAAMgX,OAAO,CAAC,IAAD;AALvB;;;;;;;;;;;;;;"}